%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1602.i105.020.P.m007.c23.obesity.eps
%%Creator: Adobe Illustrator(R) 17.1
%%For: Agor
%%CreationDate: 2/26/2016
%%BoundingBox: 0 0 418 426
%%HiResBoundingBox: 0 0 417.5653 425.5869
%%CropBox: 0 0 417.5653 425.5869
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.1.0 x273 R agm 4.7709 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">obesity</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-02-26T20:52:48+05:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-02-26T20:52:48+05:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-02-26T20:52:48+05:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>252</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD8AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FWF/mhoLa5p+n2E&#xA;8jrpJuTJqMEbNGZlWNvTjZloeHM1Ye3tmHrc5xwscy5OlxCct+SVflr5PtfL2v3J0blb6Pc2p+tW&#xA;LSSSL9ZSRPSkTmWIJRpA2/hlGg1UshIlu26zTxgAYvSc2bguxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KrLieG3gkuJ3EcMKtJLIeiqoqxPyAwSkALPJ&#xA;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&#xA;T/OdZPIZADuVsua3/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:8b2dacbf-1333-3446-b32e-c6c0096ab7af</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:8b2dacbf-1333-3446-b32e-c6c0096ab7af</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:95350d1a-2cd4-49a9-9ecd-e2e050aea6b3</stRef:instanceID>
            <stRef:documentID>xmp.did:3f8b259a-0ad4-1b49-a94d-3f375cc525dc</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:81b5ae68-aa01-c141-95db-8f777c1bb1eb</stEvt:instanceID>
                  <stEvt:when>2016-02-24T12:06:36+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8b2dacbf-1333-3446-b32e-c6c0096ab7af</stEvt:instanceID>
                  <stEvt:when>2016-02-26T20:52:48+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 11.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -425.587 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 425.587 li
417.565 425.587 li
417.565 0 li
cp
clp
364.033 328.9 mo
364.059 329.134 li
364.244 329.279 li
365.25 329.551 li
365.542 329.63 365.843 329.674 366.145 329.682 cv
368.597 329.752 li
368.785 329.762 li
374.356 330.177 li
375.051 330.229 375.767 330.202 376.455 330.098 cv
377.683 329.912 378.827 329.655 379.738 329.201 cv
379.87 329.135 379.943 328.99 379.917 328.845 cv
379.8 328.195 li
364.406 327.651 li
364.033 328.9 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.72549 .72549 .72549 rgb
f
375.725 325.639 mo
374.188 325.123 372.097 325.558 370.601 323.787 cv
369.992 323.202 368.873 320.393 371.029 320.518 cv
371.265 320.532 371.042 321.134 371.451 321.856 cv
372.758 324.168 374.932 324.903 376.608 325.448 cv
376.608 325.448 li
376.599 325.456 li
376.363 325.671 376.028 325.741 375.725 325.639 cv
cp
.8 .8 .8 rgb
f
365.245 323.259 mo
367.815 325.164 369.463 323.546 370.499 322.866 cv
370.728 322.716 371.03 322.752 371.218 322.952 cv
372.648 324.469 374.306 325.163 375.735 325.643 cv
376.036 325.744 376.364 325.67 376.599 325.456 cv
376.608 325.448 li
377.844 325.85 378.879 326.116 379.393 326.667 cv
379.836 327.007 380.023 328.155 379.723 328.258 cv
378.02 328.842 377.274 328.898 375.919 329.041 cv
374.794 329.159 373.659 329.119 372.545 328.92 cv
370.087 328.321 li
369.757 328.262 369.424 328.22 369.09 328.196 cv
364.364 327.848 li
364.147 326.572 364.402 324.693 365.245 323.259 cv
cp
.0156863 .454902 .501961 rgb
f
364.709 324.438 mo
365.523 324.776 365.519 324.074 366.695 324.023 cv
366.546 323.814 366.264 323.77 366.107 323.145 cv
365.994 322.692 365.882 322.242 365.67 322.12 cv
365.601 322.094 li
365.346 322.112 li
365.197 322.319 li
365.103 322.818 364.918 323.742 364.709 324.438 cv
cp
.8 .8 .8 rgb
f
375.122 326.272 mo
375.127 326.275 li
375.263 326.343 375.434 326.277 375.509 326.127 cv
375.921 325.3 li
375.995 325.15 375.945 324.974 375.809 324.906 cv
375.804 324.904 li
375.668 324.836 375.497 324.902 375.423 325.052 cv
375.011 325.879 li
374.936 326.028 374.986 326.205 375.122 326.272 cv
cp
.72549 .72549 .72549 rgb
f
374.34 325.94 mo
374.345 325.943 li
374.481 326.011 374.652 325.944 374.726 325.795 cv
375.138 324.968 li
375.213 324.818 375.163 324.642 375.027 324.574 cv
375.022 324.572 li
374.885 324.504 374.715 324.57 374.64 324.72 cv
374.228 325.547 li
374.154 325.696 374.203 325.873 374.34 325.94 cv
cp
f
373.557 325.608 mo
373.562 325.611 li
373.698 325.679 373.869 325.612 373.943 325.463 cv
374.355 324.636 li
374.43 324.486 374.38 324.31 374.244 324.242 cv
374.239 324.24 li
374.103 324.172 373.932 324.238 373.857 324.388 cv
373.445 325.215 li
373.371 325.364 373.421 325.541 373.557 325.608 cv
cp
f
372.755 325.157 mo
372.76 325.16 li
372.888 325.241 373.068 325.187 373.161 325.04 cv
373.677 324.224 li
373.77 324.076 373.742 323.89 373.613 323.809 cv
373.608 323.806 li
373.48 323.725 373.3 323.779 373.206 323.927 cv
372.691 324.742 li
372.598 324.89 372.626 325.076 372.755 325.157 cv
cp
f
371.937 324.625 mo
371.941 324.629 li
372.058 324.726 372.246 324.693 372.361 324.556 cv
372.995 323.795 li
373.11 323.657 373.108 323.466 372.991 323.369 cv
372.987 323.365 li
372.87 323.268 372.682 323.301 372.567 323.438 cv
371.933 324.2 li
371.818 324.337 371.82 324.528 371.937 324.625 cv
cp
f
371.197 323.92 mo
371.201 323.924 li
371.31 324.03 371.501 324.01 371.627 323.881 cv
372.322 323.164 li
372.448 323.034 372.461 322.843 372.352 322.737 cv
372.348 322.733 li
372.239 322.627 372.048 322.646 371.922 322.776 cv
371.227 323.493 li
371.101 323.623 371.088 323.814 371.197 323.92 cv
cp
f
365.826 281.527 mo
365.776 282.123 365.803 282.776 365.915 283.487 cv
366.219 285.66 li
368.412 301.457 li
368.437 301.634 368.47 301.806 368.518 301.972 cv
369.107 304.356 371.408 305.955 373.889 305.612 cv
373.987 305.598 li
376.659 305.236 378.523 302.773 378.152 300.106 cv
376.74 289.93 li
375.655 282.125 li
375.593 280.818 375.191 279.759 374.58 278.945 cv
373.75 277.826 372.529 277.175 371.263 277 cv
368.768 276.65 366.1 278.131 365.826 281.527 cv
cp
.0941176 .360784 .592157 rgb
f
364.02 324.685 mo
368.388 300.615 li
369.045 298.004 371.696 296.421 374.306 297.083 cv
374.401 297.108 li
377.003 297.767 378.58 300.409 377.925 303.013 cv
374.239 324.24 li
364.02 324.685 li
cp
f
377.594 330.894 mo
377.619 331.127 li
377.805 331.272 li
378.81 331.544 li
379.102 331.623 379.403 331.668 379.706 331.676 cv
382.157 331.746 li
382.345 331.756 li
387.917 332.171 li
388.611 332.222 389.327 332.196 390.015 332.092 cv
391.244 331.905 392.388 331.648 393.299 331.195 cv
393.431 331.129 393.504 330.984 393.478 330.839 cv
393.36 330.189 li
377.966 329.645 li
377.594 330.894 li
cp
.854902 .854902 .854902 rgb
f
389.286 327.633 mo
387.748 327.116 385.658 327.552 384.162 325.781 cv
383.552 325.196 382.433 322.387 384.589 322.512 cv
384.825 322.526 384.602 323.127 385.011 323.85 cv
386.319 326.162 388.493 326.897 390.169 327.441 cv
390.168 327.442 li
390.159 327.45 li
389.923 327.665 389.588 327.735 389.286 327.633 cv
cp
.929412 .929412 .929412 rgb
f
378.806 325.253 mo
381.376 327.157 383.023 325.54 384.059 324.86 cv
384.288 324.71 384.59 324.746 384.778 324.946 cv
386.208 326.463 387.866 327.157 389.296 327.637 cv
389.596 327.737 389.925 327.663 390.159 327.45 cv
390.168 327.442 li
391.405 327.844 392.439 328.109 392.954 328.66 cv
393.397 329.001 393.583 330.148 393.283 330.251 cv
391.58 330.836 390.834 330.892 389.48 331.034 cv
388.355 331.153 387.219 331.113 386.106 330.914 cv
383.647 330.315 li
383.317 330.256 382.985 330.214 382.651 330.19 cv
377.924 329.842 li
377.707 328.566 377.962 326.687 378.806 325.253 cv
cp
.0196078 .576471 .631373 rgb
f
378.269 326.432 mo
379.083 326.77 379.079 326.068 380.255 326.017 cv
380.107 325.808 379.824 325.764 379.668 325.139 cv
379.555 324.686 379.443 324.236 379.23 324.114 cv
379.161 324.087 li
378.907 324.106 li
378.757 324.313 li
378.663 324.812 378.478 325.736 378.269 326.432 cv
cp
.929412 .929412 .929412 rgb
f
388.683 328.266 mo
388.688 328.269 li
388.824 328.337 388.995 328.27 389.069 328.121 cv
389.481 327.294 li
389.556 327.144 389.506 326.968 389.37 326.9 cv
389.365 326.898 li
389.229 326.83 389.058 326.896 388.983 327.046 cv
388.571 327.872 li
388.497 328.022 388.547 328.198 388.683 328.266 cv
cp
.854902 .854902 .854902 rgb
f
387.9 327.934 mo
387.905 327.937 li
388.041 328.005 388.212 327.938 388.287 327.788 cv
388.699 326.962 li
388.773 326.812 388.723 326.636 388.587 326.568 cv
388.582 326.565 li
388.446 326.498 388.275 326.564 388.2 326.714 cv
387.789 327.54 li
387.714 327.69 387.764 327.866 387.9 327.934 cv
cp
f
387.117 327.602 mo
387.122 327.605 li
387.259 327.672 387.429 327.606 387.504 327.456 cv
387.916 326.63 li
387.99 326.48 387.94 326.304 387.804 326.236 cv
387.799 326.233 li
387.663 326.166 387.492 326.232 387.418 326.382 cv
387.006 327.208 li
386.931 327.358 386.981 327.534 387.117 327.602 cv
cp
f
386.315 327.151 mo
386.32 327.154 li
386.449 327.235 386.629 327.181 386.722 327.033 cv
387.237 326.217 li
387.331 326.07 387.302 325.884 387.173 325.803 cv
387.169 325.8 li
387.04 325.719 386.86 325.773 386.767 325.92 cv
386.251 326.736 li
386.158 326.884 386.187 327.069 386.315 327.151 cv
cp
f
385.497 326.619 mo
385.502 326.623 li
385.619 326.72 385.806 326.687 385.921 326.549 cv
386.555 325.788 li
386.67 325.65 386.668 325.46 386.552 325.362 cv
386.547 325.359 li
386.43 325.261 386.243 325.294 386.128 325.432 cv
385.494 326.193 li
385.379 326.331 385.381 326.522 385.497 326.619 cv
cp
f
384.758 325.914 mo
384.762 325.918 li
384.871 326.024 385.061 326.004 385.187 325.874 cv
385.882 325.157 li
386.008 325.028 386.022 324.836 385.913 324.731 cv
385.909 324.727 li
385.799 324.621 385.609 324.64 385.483 324.77 cv
384.788 325.487 li
384.662 325.617 384.648 325.808 384.758 325.914 cv
cp
f
368.432 282.698 mo
368.468 283.295 368.589 283.937 368.802 284.625 cv
369.763 287.714 li
369.763 287.714 377.51 302.198 377.581 302.356 cv
378.506 304.63 377.464 306.071 379.87 305.376 cv
383.515 305.159 li
386.107 304.417 386.64 304.872 387.282 300.726 cv
387.282 300.726 387.754 287.308 386.91 277.998 cv
382.893 279.24 377.446 279.603 376.725 278.885 cv
375.742 277.898 374.441 277.428 373.162 277.438 cv
370.643 277.449 368.216 279.298 368.432 282.698 cv
cp
.113725 .443137 .721569 rgb
f
376.963 326.919 mo
377.235 301.364 li
377.34 298.674 379.608 296.579 382.298 296.689 cv
382.397 296.693 li
385.079 296.803 387.166 299.064 387.062 301.746 cv
386.555 325.788 li
376.963 326.919 li
cp
f
370.61 290.857 mo
381.362 292.631 li
386.559 293.214 390.796 286.821 392.502 278.735 cv
365.13 274.361 li
364.48 280.468 li
363.789 285.634 366.925 290.632 370.61 290.857 cv
cp
f
379.759 243.994 mo
372.555 243.15 li
371.029 243.008 368.294 247.567 367.783 249.011 cv
364.906 257.142 364.384 263.889 365.13 274.361 cv
370.526 278.193 385.344 279.127 392.502 278.735 cv
393.282 261.393 387.913 256.363 379.759 243.994 cv
cp
0 .690196 .658824 rgb
f
372.217 242.913 mo
373.184 236.628 li
376.111 236.425 384.341 242.564 385.018 242.402 cv
383.275 243.667 382.551 244.754 381.917 246.035 cv
381.579 246.717 382.823 248.521 384.543 251.067 cv
384.543 251.067 381.178 246.997 380.713 246.675 cv
378.751 246.034 372.782 244.653 372.217 242.913 cv
cp
.921569 .713726 .466667 rgb
f
372.132 237.604 mo
371.558 236.187 371.244 234.544 371.195 232.997 cv
371.407 225.952 376.353 226.282 378.964 226.278 cv
382.016 226.407 384.905 228.463 385.076 233.151 cv
384.923 233.612 384.739 233.989 384.739 233.989 cv
386.122 236.241 li
386.288 236.672 386.032 237.151 385.581 237.252 cv
385.829 240.548 li
385.455 244.222 380.416 243.685 380.416 243.685 cv
378.581 243.481 375.426 241.157 376.288 237.524 cv
375.174 237.394 372.554 238.643 372.132 237.604 cv
cp
.976471 .768627 .517647 rgb
f
373.499 239.109 mo
378.258 240.135 375.574 234.699 375.574 234.699 cv
375.574 234.699 376.648 236.409 377.034 236.888 cv
377.807 236.877 377.807 236.877 378.507 236.821 cv
378.773 230.834 377.606 228.149 384.21 229.53 cv
385.509 229.303 386.238 225.194 378.264 225.436 cv
374.739 225.543 371.993 227.483 371.37 230.954 cv
370.762 234.333 370.737 238.213 373.499 239.109 cv
cp
.235294 .235294 .231373 rgb
f
374.769 235.164 mo
374.775 236.268 375.713 237.537 376.435 237.534 cv
377.156 237.53 377.072 236.635 377.077 235.532 cv
377.081 234.801 377.26 233.763 376.468 233.536 cv
375.774 233.338 374.761 233.545 374.769 235.164 cv
cp
.976471 .768627 .517647 rgb
f
369.918 253.136 mo
365.957 269.734 li
373.204 271.718 li
378.192 256.001 li
378.685 254.405 378.054 252.02 375.378 251.35 cv
375.378 251.35 370.776 250.018 369.918 253.136 cv
cp
f
378.505 255.852 mo
375.931 263.127 li
368.025 261.068 li
369.639 252.919 li
371.517 246.418 380.65 249.192 378.505 255.852 cv
cp
0 .631373 .6 rgb
f
368.396 259.515 mo
367.972 261.054 li
375.931 263.127 li
376.354 261.587 li
368.396 259.515 li
cp
0 .509804 .490196 rgb
f
372.061 267.472 mo
379.764 279.571 li
376.647 282.527 li
366.38 272.217 li
365.421 270.775 365.902 268.554 367.455 267.257 cv
367.512 267.209 li
369.065 265.912 371.102 266.029 372.061 267.472 cv
cp
.976471 .768627 .517647 rgb
f
378.757 279.949 mo
378.953 279.784 379.146 279.622 379.328 279.452 cv
380.503 279.678 382.113 279.704 382.924 279.547 cv
383.281 279.478 383.811 279.531 383.884 280.018 cv
383.886 280.031 li
384.063 280.651 383.217 280.884 382.844 280.984 cv
382.056 281.196 379.285 281.168 377.784 280.929 cv
378.097 280.592 378.402 280.247 378.757 279.949 cv
cp
.921569 .713726 .466667 rgb
f
381.848 281.968 mo
381.857 281.958 li
382.115 281.695 382.543 281.671 382.815 281.905 cv
385.77 284.426 li
386.041 284.66 386.052 285.063 385.794 285.327 cv
385.785 285.336 li
385.527 285.6 385.098 285.624 384.827 285.39 cv
381.872 282.868 li
381.601 282.634 381.59 282.231 381.848 281.968 cv
cp
f
380.819 282.584 mo
380.83 282.576 li
381.124 282.35 381.55 282.385 381.78 282.655 cv
384.701 286.149 li
384.932 286.419 384.879 286.822 384.584 287.048 cv
384.573 287.056 li
384.279 287.282 383.853 287.246 383.623 286.976 cv
380.701 283.482 li
380.471 283.212 380.524 282.81 380.819 282.584 cv
cp
f
379.894 283.342 mo
379.906 283.335 li
380.225 283.14 380.641 283.221 380.837 283.515 cv
383.193 286.915 li
383.389 287.208 383.289 287.604 382.97 287.798 cv
382.958 287.805 li
382.64 288 382.223 287.919 382.027 287.625 cv
379.671 284.225 li
379.475 283.931 379.575 283.536 379.894 283.342 cv
cp
f
378.99 284.101 mo
379.001 284.095 li
379.3 283.95 379.66 284.057 379.804 284.334 cv
381.371 287.252 li
381.515 287.529 381.389 287.871 381.09 288.017 cv
381.079 288.022 li
380.78 288.167 380.421 288.06 380.276 287.783 cv
378.709 284.865 li
378.565 284.588 378.691 284.246 378.99 284.101 cv
cp
f
383.09 282.142 mo
382.083 281.274 li
380.903 280.255 li
380.105 279.567 378.785 279.01 378.027 279.785 cv
377.261 280.316 li
374.232 283.254 379.118 285.622 379.118 285.622 cv
379.358 285.83 379.739 285.809 379.968 285.575 cv
379.976 285.566 li
380.205 285.332 380.195 284.974 379.955 284.767 cv
380.114 284.905 li
380.385 285.138 380.814 285.115 381.072 284.851 cv
381.081 284.842 li
381.339 284.578 381.328 284.175 381.057 283.941 cv
381.205 284.069 li
381.476 284.303 381.905 284.279 382.162 284.015 cv
382.172 284.006 li
382.429 283.742 382.419 283.339 382.147 283.106 cv
382.419 283.339 382.847 283.315 383.105 283.052 cv
383.114 283.042 li
383.372 282.779 383.361 282.376 383.09 282.142 cv
cp
.976471 .768627 .517647 rgb
f
379.434 249.781 mo
369.94 245.127 li
370.903 243.713 371.587 242.914 372.326 242.204 cv
380.713 246.675 li
379.434 249.781 li
cp
.929412 .929412 .929412 rgb
f
24.2044 50.5696 mo
24.779 60.1168 32.1286 67.6696 41.116 67.6696 cv
50.1033 67.6696 57.4529 60.1168 58.0276 50.5696 cv
24.2044 50.5696 li
.113725 .443137 .721569 rgb
f
40.5307 106.288 mo
40.5045 106.527 li
40.3146 106.676 li
39.2845 106.954 li
38.9851 107.035 38.6771 107.081 38.3671 107.089 cv
35.8561 107.161 li
35.6634 107.171 li
29.9565 107.596 li
29.2454 107.649 28.5118 107.622 27.8068 107.515 cv
26.5488 107.324 25.3767 107.061 24.4439 106.596 cv
24.3084 106.529 24.2336 106.38 24.2606 106.231 cv
24.3809 105.566 li
40.149 105.009 li
40.5307 106.288 li
cp
.854902 .854902 .854902 rgb
f
28.5545 102.948 mo
30.129 102.419 32.2706 102.865 33.803 101.051 cv
34.427 100.452 35.5736 97.5745 33.3648 97.7024 cv
33.1232 97.7163 33.3516 98.3329 32.9328 99.0732 cv
31.5933 101.441 29.3666 102.194 27.65 102.752 cv
27.6504 102.752 li
27.6597 102.76 li
27.9016 102.981 28.2442 103.052 28.5545 102.948 cv
cp
.929412 .929412 .929412 rgb
f
39.2892 100.51 mo
36.6567 102.461 34.9691 100.804 33.9081 100.108 cv
33.6734 99.9536 33.3639 99.9909 33.1713 100.195 cv
31.7065 101.75 30.0085 102.46 28.5442 102.952 cv
28.2361 103.055 27.8999 102.979 27.6597 102.76 cv
27.6506 102.752 li
26.384 103.164 25.3242 103.436 24.7973 104 cv
24.3433 104.349 24.1523 105.524 24.4596 105.63 cv
26.2044 106.229 26.9683 106.286 28.3557 106.432 cv
29.5079 106.553 30.6713 106.513 31.8117 106.308 cv
34.3299 105.695 li
34.6677 105.635 35.0083 105.592 35.3505 105.567 cv
40.1921 105.211 li
40.4141 103.904 40.1531 101.979 39.2892 100.51 cv
cp
.0196078 .576471 .631373 rgb
f
39.8387 101.718 mo
39.0047 102.064 39.0091 101.345 37.804 101.293 cv
37.9566 101.079 38.2456 101.033 38.4059 100.393 cv
38.5221 99.9294 38.6366 99.4686 38.8541 99.343 cv
38.9248 99.316 li
39.1858 99.335 li
39.2657 99.3797 39.322 99.4574 39.3389 99.5474 cv
39.4348 100.058 39.6248 101.005 39.8387 101.718 cv
cp
.929412 .929412 .929412 rgb
f
29.172 103.597 mo
29.1669 103.599 li
29.0274 103.669 28.8524 103.601 28.776 103.447 cv
28.354 102.601 li
28.2776 102.447 28.3288 102.267 28.4682 102.197 cv
28.4735 102.195 li
28.6128 102.125 28.7879 102.193 28.8642 102.346 cv
29.2862 103.193 li
29.3626 103.346 29.3115 103.527 29.172 103.597 cv
cp
.854902 .854902 .854902 rgb
f
29.9738 103.256 mo
29.9686 103.259 li
29.8291 103.329 29.6541 103.261 29.5778 103.107 cv
29.1558 102.26 li
29.0794 102.107 29.1305 101.927 29.27 101.857 cv
29.2751 101.854 li
29.4145 101.785 29.5896 101.853 29.666 102.006 cv
30.0879 102.853 li
30.1643 103.006 30.1132 103.187 29.9738 103.256 cv
cp
f
30.7754 102.916 mo
30.7703 102.919 li
30.6308 102.988 30.4559 102.92 30.3795 102.767 cv
29.9576 101.92 li
29.8811 101.767 29.9323 101.586 30.0717 101.517 cv
30.0768 101.514 li
30.2164 101.445 30.3913 101.513 30.4676 101.666 cv
30.8896 102.513 li
30.9661 102.666 30.9149 102.847 30.7754 102.916 cv
cp
f
31.5968 102.454 mo
31.592 102.457 li
31.4603 102.54 31.276 102.485 31.1804 102.334 cv
30.6525 101.498 li
30.557 101.347 30.5863 101.157 30.7179 101.073 cv
30.7229 101.07 li
30.8546 100.987 31.0389 101.042 31.1345 101.194 cv
31.6623 102.029 li
31.7579 102.18 31.7286 102.371 31.5968 102.454 cv
cp
f
32.4347 101.909 mo
32.4303 101.913 li
32.3106 102.013 32.1182 101.979 32.0006 101.838 cv
31.3511 101.058 li
31.2335 100.917 31.2353 100.722 31.355 100.622 cv
31.3594 100.618 li
31.4791 100.519 31.6715 100.552 31.7891 100.694 cv
32.4386 101.473 li
32.5562 101.614 32.5544 101.81 32.4347 101.909 cv
cp
f
33.1926 101.187 mo
33.1884 101.191 li
33.0766 101.299 32.8814 101.28 32.7524 101.147 cv
32.0403 100.412 li
31.9115 100.279 31.8976 100.083 32.0095 99.975 cv
32.0135 99.971 li
32.1255 99.8626 32.3207 99.8824 32.4496 100.015 cv
33.1616 100.75 li
33.2906 100.883 33.3044 101.078 33.1926 101.187 cv
cp
f
41.8239 106.288 mo
41.8501 106.527 li
42.04 106.676 li
43.0701 106.954 li
43.3695 107.035 43.6775 107.081 43.9876 107.089 cv
46.4985 107.161 li
46.6912 107.171 li
52.3981 107.596 li
53.1092 107.649 53.8428 107.622 54.5478 107.515 cv
55.8058 107.324 56.9779 107.061 57.9107 106.596 cv
58.0462 106.529 58.121 106.38 58.094 106.231 cv
57.9737 105.566 li
42.2056 105.009 li
41.8239 106.288 li
cp
f
53.8001 102.948 mo
52.2256 102.419 50.084 102.865 48.5516 101.051 cv
47.9276 100.452 46.781 97.5745 48.9898 97.7024 cv
49.2314 97.7163 49.003 98.3329 49.4218 99.0732 cv
50.7613 101.441 52.988 102.194 54.7046 102.752 cv
54.7042 102.752 li
54.695 102.76 li
54.453 102.981 54.1104 103.052 53.8001 102.948 cv
cp
.929412 .929412 .929412 rgb
f
43.0654 100.51 mo
45.6979 102.461 47.3855 100.804 48.4466 100.108 cv
48.6812 99.9536 48.9907 99.9909 49.1833 100.195 cv
50.6481 101.75 52.3461 102.46 53.8105 102.952 cv
54.1185 103.055 54.4548 102.979 54.695 102.76 cv
54.7041 102.752 li
55.9706 103.164 57.0305 103.436 57.5573 104 cv
58.0113 104.349 58.2023 105.524 57.895 105.63 cv
56.1502 106.229 55.3864 106.286 53.9989 106.432 cv
52.8467 106.553 51.6833 106.513 50.543 106.308 cv
48.0247 105.695 li
47.6869 105.635 47.3463 105.592 47.0041 105.567 cv
42.1625 105.211 li
41.9405 103.904 42.2015 101.979 43.0654 100.51 cv
cp
.0196078 .576471 .631373 rgb
f
42.5159 101.718 mo
43.3499 102.064 43.3455 101.345 44.5506 101.293 cv
44.398 101.079 44.109 101.033 43.9487 100.393 cv
43.8325 99.9294 43.718 99.4686 43.5005 99.343 cv
43.4298 99.316 li
43.1688 99.335 li
43.0889 99.3797 43.0326 99.4574 43.0157 99.5474 cv
42.9198 100.058 42.7298 101.005 42.5159 101.718 cv
cp
.929412 .929412 .929412 rgb
f
53.1826 103.597 mo
53.1877 103.599 li
53.3272 103.669 53.5022 103.601 53.5786 103.447 cv
54.0006 102.601 li
54.077 102.447 54.0258 102.267 53.8864 102.197 cv
53.8811 102.195 li
53.7418 102.125 53.5667 102.193 53.4904 102.346 cv
53.0684 103.193 li
52.9921 103.346 53.0431 103.527 53.1826 103.597 cv
cp
.854902 .854902 .854902 rgb
f
52.3809 103.256 mo
52.386 103.259 li
52.5255 103.329 52.7005 103.261 52.7769 103.107 cv
53.1989 102.26 li
53.2752 102.107 53.2241 101.927 53.0846 101.857 cv
53.0795 101.854 li
52.9401 101.785 52.765 101.853 52.6886 102.006 cv
52.2667 102.853 li
52.1903 103.006 52.2414 103.187 52.3809 103.256 cv
cp
f
51.5792 102.916 mo
51.5843 102.919 li
51.7238 102.988 51.8987 102.92 51.9751 102.767 cv
52.397 101.92 li
52.4735 101.767 52.4224 101.586 52.2829 101.517 cv
52.2778 101.514 li
52.1382 101.445 51.9633 101.513 51.887 101.666 cv
51.465 102.513 li
51.3885 102.666 51.4398 102.847 51.5792 102.916 cv
cp
f
50.7578 102.454 mo
50.7626 102.457 li
50.8943 102.54 51.0786 102.485 51.1742 102.334 cv
51.7021 101.498 li
51.7976 101.347 51.7683 101.157 51.6367 101.073 cv
51.6318 101.07 li
51.5 100.987 51.3157 101.042 51.2201 101.194 cv
50.6923 102.029 li
50.5968 102.18 50.626 102.371 50.7578 102.454 cv
cp
f
49.9199 101.909 mo
49.9243 101.913 li
50.044 102.013 50.2364 101.979 50.354 101.838 cv
51.0035 101.058 li
51.1211 100.917 51.1194 100.722 50.9996 100.622 cv
50.9952 100.618 li
50.8755 100.519 50.6831 100.552 50.5655 100.694 cv
49.916 101.473 li
49.7985 101.614 49.8002 101.81 49.9199 101.909 cv
cp
f
49.162 101.187 mo
49.1662 101.191 li
49.278 101.299 49.4732 101.28 49.6022 101.147 cv
50.3143 100.412 li
50.4431 100.279 50.457 100.083 50.3451 99.975 cv
50.3411 99.971 li
50.2291 99.8626 50.0339 99.8824 49.905 100.015 cv
49.193 100.75 li
49.064 100.883 49.0502 101.078 49.162 101.187 cv
cp
f
40.1882 77.2846 mo
39.3075 83.5451 29.6348 83.0243 30.1308 76.1671 cv
26.6805 53.9306 li
43.2214 55.2281 li
40.1882 77.2846 li
.113725 .443137 .721569 rgb
f
40.273 103.882 mo
37.5755 101.261 35.1201 102.946 31.6563 100.735 cv
30.2935 76.483 li
30.1312 70.7445 39.5687 70.6729 40.1391 76.8067 cv
40.273 103.882 li
cp
f
41.9607 77.2846 mo
42.8414 83.5451 52.5142 83.0243 52.0181 76.1671 cv
55.4684 53.9306 li
38.9275 55.2281 li
41.9607 77.2846 li
f
42.0881 103.882 mo
45.1958 102.12 46.6027 101.889 50.8638 101.604 cv
52.0181 76.8067 li
51.9067 70.7445 42.4693 70.6729 41.8989 76.8067 cv
42.0881 103.882 li
cp
f
27.26 22.9347 mo
23.3622 30.3227 li
20.0029 38.0267 li
25.7889 42.2083 li
34.7394 27.8843 li
35.6349 26.426 35.616 23.8993 33.1312 22.5528 cv
33.1312 22.5528 28.9043 20.0599 27.26 22.9347 cv
cp
.976471 .768627 .517647 rgb
f
35.0874 27.8161 mo
30.6817 34.3782 li
23.3622 30.3227 li
27.0385 22.6488 li
30.5561 16.6763 38.9113 21.754 35.0874 27.8161 cv
cp
.913725 .305882 .105882 rgb
f
24.1254 28.876 mo
23.3135 30.2957 li
30.6817 34.3782 li
31.4936 32.9585 li
24.1254 28.876 li
cp
.8 .266667 .0941176 rgb
f
54.893 22.9347 mo
58.7909 30.3227 li
62.1501 38.0267 li
56.3641 42.2083 li
47.4137 27.8843 li
46.5181 26.426 46.5371 23.8993 49.0218 22.5528 cv
49.0218 22.5528 53.2487 20.0599 54.893 22.9347 cv
cp
.976471 .768627 .517647 rgb
f
47.0657 27.8161 mo
51.4714 34.3782 li
58.7909 30.3227 li
55.1146 22.6488 li
51.597 16.6763 43.2417 21.754 47.0657 27.8161 cv
cp
.913725 .305882 .105882 rgb
f
58.0276 28.876 mo
58.8396 30.2957 li
51.4714 34.3782 li
50.6594 32.9585 li
58.0276 28.876 li
cp
.8 .266667 .0941176 rgb
f
37.5989 16.9974 mo
30.4072 20.0462 li
28.6266 20.6589 30.2914 27.2295 30.2914 29.1903 cv
29.1079 33.6955 29.2413 35.0932 26.5131 40.1528 cv
24.9894 42.9785 23.8814 47.3438 24.1638 49.3657 cv
24.2199 49.7668 24.1804 50.1712 24.2043 50.5696 cv
27.0629 54.4044 34.0732 56.2525 41.0765 56.2247 cv
48.0798 56.2525 55.0901 54.4044 57.9487 50.5696 cv
57.9727 50.1712 57.9332 49.7668 57.9892 49.3657 cv
58.2717 47.3438 57.1636 42.9785 55.6399 40.1528 cv
52.9117 35.0932 53.0451 33.6955 51.8616 29.1903 cv
51.8616 27.2295 53.5265 20.6589 51.7459 20.0462 cv
44.5541 16.9974 li
37.5989 16.9974 li
cp
.913725 .305882 .105882 rgb
f
41.0765 25.222 mo
40.3526 20.7576 li
38.6378 20.4746 37.1741 19.1897 35.9015 17.7175 cv
36.1974 14.5273 li
41.0765 14.6512 li
45.9556 14.5273 li
46.2516 17.7175 li
44.979 19.1897 43.5153 20.4746 41.8004 20.7576 cv
41.0765 25.222 li
cp
.921569 .713726 .466667 rgb
f
23.6553 35.1608 mo
37.8609 38.908 li
37.5715 43.2987 li
22.6805 42.6803 li
20.9559 42.2623 19.774 40.2569 20.0404 38.2013 cv
20.0502 38.1261 li
20.3167 36.0703 21.9307 34.7428 23.6553 35.1608 cv
cp
.976471 .768627 .517647 rgb
f
37.3663 39.8929 mo
37.3995 39.6321 37.4315 39.3765 37.4502 39.1216 cv
38.4919 38.4752 39.721 37.3751 40.2215 36.6933 cv
40.4422 36.3927 40.8784 36.0648 41.2712 36.3809 cv
41.2816 36.3883 li
41.8465 36.7323 41.3712 37.4956 41.1601 37.8304 cv
40.7149 38.5369 38.611 40.4427 37.3154 41.3068 cv
37.3171 40.8353 37.3062 40.364 37.3663 39.8929 cv
cp
.921569 .713726 .466667 rgb
f
41.0948 39.2626 mo
41.0952 39.2488 li
41.1061 38.8715 41.4118 38.5556 41.7782 38.543 cv
45.7547 38.3857 li
46.1212 38.3732 46.4095 38.6689 46.3987 39.0461 cv
46.3983 39.06 li
46.3875 39.4373 46.0818 39.7532 45.7152 39.7657 cv
41.7388 39.923 li
41.3724 39.9355 41.084 39.6399 41.0948 39.2626 cv
cp
f
40.7491 40.4415 mo
40.7514 40.4278 li
40.8161 40.0529 41.161 39.7839 41.5219 39.8272 cv
46.1486 40.4246 li
46.5095 40.4678 46.7496 40.8068 46.6849 41.1818 cv
46.6825 41.1955 li
46.6179 41.5705 46.2729 41.8394 45.9121 41.7962 cv
41.2853 41.1988 li
40.9245 41.1556 40.6844 40.8165 40.7491 40.4415 cv
cp
f
40.5802 41.6544 mo
40.5841 41.6409 li
40.6888 41.2731 41.0586 41.044 41.4098 41.129 cv
45.5461 42.0486 li
45.8974 42.1337 46.0972 42.5007 45.9925 42.8686 cv
45.9886 42.882 li
45.8838 43.2497 45.5141 43.4789 45.1627 43.3939 cv
41.0266 42.4743 li
40.6752 42.3892 40.4754 42.0222 40.5802 41.6544 cv
cp
f
40.4278 42.8539 mo
40.4323 42.8422 li
40.5564 42.5249 40.901 42.3554 41.202 42.4636 cv
44.4097 43.5692 li
44.7107 43.6774 44.8541 44.0224 44.73 44.3397 cv
44.7255 44.3513 li
44.6014 44.6686 44.2567 44.8381 43.9557 44.73 cv
40.7481 43.6243 li
40.4471 43.5161 40.3036 43.1712 40.4278 42.8539 cv
cp
f
42.1508 38.5304 mo
40.7899 38.5768 li
39.1932 38.6314 li
38.1149 38.6682 36.7348 39.1666 36.7031 40.2766 cv
36.4962 41.2081 li
36.26 45.5244 41.5816 43.9099 41.5816 43.9099 cv
41.9071 43.8989 42.1787 43.6182 42.1883 43.2832 cv
42.1885 43.2709 li
42.1982 42.9359 41.9421 42.6732 41.6167 42.6844 cv
41.8325 42.677 li
42.199 42.6645 42.5048 42.3485 42.5156 41.9712 cv
42.516 41.9574 li
42.5268 41.5802 42.2384 41.2845 41.872 41.2971 cv
42.0719 41.2902 li
42.4384 41.2777 42.7441 40.9617 42.7549 40.5845 cv
42.7554 40.5707 li
42.7661 40.1934 42.4778 39.8978 42.1113 39.9103 cv
42.4778 39.8978 42.7836 39.5818 42.7943 39.2045 cv
42.7948 39.1907 li
42.8056 38.8135 42.5172 38.5179 42.1508 38.5304 cv
cp
.976471 .768627 .517647 rgb
f
57.1347 36.0775 mo
46.1031 45.7804 li
48.3249 49.5785 li
61.3684 42.3679 li
62.7241 41.223 62.8849 38.9007 61.7275 37.1811 cv
61.6851 37.1182 li
60.5276 35.3985 58.4904 34.9326 57.1347 36.0775 cv
cp
f
46.9859 46.4402 mo
46.8396 46.2218 46.6967 46.0075 46.5659 45.7879 cv
45.3452 45.6754 43.7539 45.2408 43.0015 44.8547 cv
42.6696 44.6845 42.1329 44.5862 41.9228 45.0446 cv
41.9168 45.0559 li
41.5653 45.6161 42.3317 46.0864 42.6702 46.2915 cv
43.3843 46.7244 46.1182 47.4885 47.6635 47.6822 cv
47.4512 47.2612 47.2502 46.8348 46.9859 46.4402 cv
cp
.921569 .713726 .466667 rgb
f
43.3689 47.5434 mo
43.3624 47.5312 li
43.184 47.1986 42.7693 47.0527 42.4359 47.2053 cv
38.8086 48.8424 li
38.4753 48.995 38.3496 49.3884 38.5278 49.721 cv
38.5344 49.7332 li
38.7127 50.0659 39.1275 50.2118 39.4609 50.0591 cv
43.0882 48.422 li
43.4215 48.2694 43.5473 47.8761 43.3689 47.5434 cv
cp
f
44.2053 48.4434 mo
44.197 48.4321 li
43.9715 48.1257 43.5428 48.0393 43.2393 48.2393 cv
39.3678 50.8423 li
39.0643 51.0423 39.0011 51.4528 39.2266 51.7593 cv
39.2349 51.7705 li
39.4604 52.0771 39.8892 52.1633 40.1926 51.9634 cv
44.0642 49.3605 li
44.3675 49.1605 44.4308 48.7499 44.2053 48.4434 cv
cp
f
44.8986 49.4528 mo
44.8891 49.4424 li
44.6309 49.1603 44.1977 49.1206 43.9216 49.3537 cv
40.6329 52.0255 li
40.3566 52.2587 40.342 52.6764 40.6002 52.9585 cv
40.6096 52.9688 li
40.8678 53.2509 41.301 53.2906 41.5772 53.0575 cv
44.8659 50.3857 li
45.142 50.1525 45.1567 49.7349 44.8986 49.4528 cv
cp
f
45.5712 50.4576 mo
45.562 50.4492 li
45.309 50.2208 44.925 50.2232 44.7041 50.4546 cv
42.3292 52.8777 li
42.1083 53.109 42.1342 53.4817 42.3871 53.71 cv
42.3964 53.7184 li
42.6492 53.9467 43.0333 53.9443 43.2542 53.713 cv
45.6291 51.2899 li
45.85 51.0585 45.8241 50.6859 45.5712 50.4576 cv
cp
f
42.0969 47.3605 mo
43.3351 46.7936 li
44.7877 46.1286 li
45.7687 45.6795 47.226 45.5082 47.7506 46.487 cv
48.3522 47.2277 li
50.4931 50.983 45.0112 51.9181 45.0112 51.9181 cv
44.7151 52.0537 44.3467 51.9241 44.1884 51.6286 cv
44.1826 51.6178 li
44.0242 51.3224 44.1359 50.973 44.4319 50.8375 cv
44.2356 50.9274 li
43.9022 51.08 43.4874 50.9341 43.309 50.6014 cv
43.3025 50.5893 li
43.1242 50.2567 43.2499 49.8633 43.5833 49.7107 cv
43.4014 49.7939 li
43.068 49.9465 42.6532 49.8006 42.475 49.468 cv
42.4684 49.4559 li
42.2901 49.1232 42.4158 48.7299 42.7492 48.5772 cv
42.4158 48.7299 42.001 48.584 41.8227 48.2512 cv
41.8162 48.2391 li
41.6378 47.9065 41.7636 47.5132 42.0969 47.3605 cv
cp
.976471 .768627 .517647 rgb
f
41.0763 70.8531 mo
41.0742 70.842 li
41.0745 70.84 li
41.0763 70.8531 li
.909635 .909635 .908835 rgb
f
41.0742 70.842 mo
40.273 66.5421 li
32.9121 61.7305 li
35.3057 63.0181 37.7073 63.7255 40.1174 63.8804 cv
41.0745 70.84 li
41.0742 70.842 li
.113725 .407843 .658823 rgb
f
41.0765 70.8546 mo
41.0763 70.8531 li
41.0745 70.84 li
40.1174 63.8804 li
40.4567 63.9022 40.796 63.9131 41.1357 63.9131 cv
44.005 63.9131 46.8862 63.1368 49.7774 61.6313 cv
42.1791 66.6413 li
41.0765 70.8546 li
f
38.8149 22.6921 mo
36.8737 21.6616 35.4076 20.2494 34.7038 18.2247 cv
35.981 16.8608 li
36.8986 18.5776 38.4446 19.8078 40.3526 20.7576 cv
38.8149 22.6921 li
cp
.929412 .929412 .929412 rgb
f
43.3382 22.6921 mo
45.2794 21.6616 46.7455 20.2494 47.4492 18.2247 cv
46.1721 16.8608 li
45.2544 18.5776 43.7084 19.8078 41.8004 20.7576 cv
43.3382 22.6921 li
cp
f
47.6721 8.10318 mo
47.5551 8.08401 47.437 8.10014 47.3209 8.14359 cv
47.3209 5.3345 li
47.3209 3.01952 45.4442 1.14282 43.1293 1.14282 cv
39.1258 1.14282 li
36.8108 1.14282 34.9341 3.01952 34.9341 5.3345 cv
34.9341 8.14359 li
34.8181 8.10014 34.7 8.08401 34.583 8.10318 cv
33.966 8.20348 33.8589 9.1967 34.0427 10.3096 cv
34.3155 11.9613 35.3042 12.1161 35.3384 12.1044 cv
34.1481 18.602 41.1141 18.2205 41.1221 18.2205 cv
41.1275 18.2205 li
41.133 18.2205 li
47.8711 18.3602 47.411 13.1518 46.853 11.5707 cv
47.0762 11.8497 48.0435 11.7567 48.2123 10.3096 cv
48.3431 9.18923 48.2891 8.20348 47.6721 8.10318 cv
cp
.976471 .768627 .517647 rgb
f
41.1276 0 mo
41.1221 0 li
38.4469 0 37.1093 .45977 35.7718 1.87849 cv
34.847 2.85928 34.3372 4.16567 34.3873 5.51498 cv
34.583 8.10318 li
34.919 8.048 35.2651 8.26872 35.541 8.66491 cv
35.541 5.66546 li
35.541 4.35127 36.6044 3.28791 37.9186 3.28791 cv
44.3365 3.28791 li
45.6507 3.28791 46.7141 4.35127 46.7141 5.66546 cv
46.7141 8.66491 li
46.9899 8.26872 47.3361 8.048 47.6721 8.10318 cv
47.8677 5.51498 li
47.9179 4.16567 47.4081 2.85928 46.4834 1.87849 cv
45.1458 .45977 43.8082 0 41.133 0 cv
41.1276 0 li
cp
.235294 .235294 .231373 rgb
f
28.9269 304.752 mo
28.8886 304.752 li
27.841 304.752 26.9917 305.602 26.9917 306.649 cv
26.9917 322.069 li
26.9917 323.117 27.841 323.966 28.8886 323.966 cv
28.9269 323.966 li
29.9746 323.966 30.8238 323.117 30.8238 322.069 cv
30.8238 306.649 li
30.8238 305.602 29.9746 304.752 28.9269 304.752 cv
cp
1 .811765 .623529 rgb
f
25.1985 304.015 mo
25.1602 304.014 li
24.113 303.985 23.2404 304.81 23.2112 305.858 cv
22.7804 321.272 li
22.7511 322.319 23.5763 323.192 24.6235 323.221 cv
24.6618 323.222 li
25.7091 323.251 26.5817 322.426 26.611 321.379 cv
27.0417 305.965 li
27.071 304.917 26.2459 304.045 25.1985 304.015 cv
cp
f
32.6031 304.741 mo
32.5648 304.743 li
31.5178 304.78 30.6992 305.659 30.7365 306.706 cv
31.233 320.667 li
31.2702 321.714 32.1492 322.533 33.1962 322.495 cv
33.2345 322.494 li
34.2815 322.457 35.0999 321.578 35.0626 320.531 cv
34.5662 306.57 li
34.529 305.523 33.6502 304.704 32.6031 304.741 cv
cp
f
35.9687 304.765 mo
35.935 304.769 li
35.0113 304.882 34.3541 305.722 34.4669 306.646 cv
35.6936 316.687 li
35.8063 317.611 36.6465 318.268 37.5702 318.155 cv
37.604 318.151 li
38.5276 318.038 39.1848 317.198 39.072 316.274 cv
37.8453 306.233 li
37.7324 305.31 36.8923 304.652 35.9687 304.765 cv
cp
f
36.0969 295.976 mo
37.9573 239.747 li
23.8858 239.747 li
25.2782 295.723 li
23.3986 296.402 21.954 297.881 21.484 299.717 cv
21.3796 300.135 21.3187 300.57 21.3187 301.014 cv
21.3187 303.637 li
23.0592 304.141 li
23.1097 309.487 li
27.0425 310.49 34.1982 309.688 37.9665 307.44 cv
37.9665 302.512 li
37.9665 298.969 37.4458 297.021 36.0969 295.976 cv
cp
.960784 .752941 .54902 rgb
f
21.9166 239.747 mo
22.7797 296.109 li
21.0192 296.817 19.8099 300.388 19.5128 302.913 cv
19.2533 305.119 19.0951 307.205 18.0492 308.5 cv
15.6575 311.46 19.6323 312.941 21.6156 309.913 cv
22.3591 308.778 23.316 306.688 23.316 304.014 cv
26.4657 305.868 30.4909 304.072 30.4211 298.978 cv
30.4295 298.783 29.7504 246.503 29.654 239.747 cv
21.9166 239.747 li
cp
1 .811765 .623529 rgb
f
29.654 239.747 mo
37.9573 239.747 li
36.0969 295.976 li
34.0594 294.655 31.8897 294.921 29.654 295.976 cv
29.654 239.747 li
cp
f
38.9884 265.977 mo
20.3196 265.977 li
20.3196 243.951 li
38.9884 243.951 li
38.9884 265.977 li
cp
.341176 .341176 .337255 rgb
f
52.4004 288.241 mo
33.5276 288.241 li
30.5262 288.241 28.0843 285.799 28.0843 282.798 cv
28.0843 265.566 li
29.731 265.566 li
29.731 282.798 li
29.731 284.892 31.4339 286.595 33.5276 286.595 cv
52.4004 286.595 li
52.4004 288.241 li
cp
f
51.3801 276.852 mo
36.0281 276.852 li
33.2526 276.852 30.9941 274.594 30.9941 271.818 cv
30.9941 261.037 li
32.6407 261.037 li
32.6407 271.818 li
32.6407 273.686 34.1603 275.205 36.0281 275.205 cv
51.3801 275.205 li
53.2479 275.205 54.7675 273.686 54.7675 271.818 cv
54.7675 270.746 li
56.4141 270.746 li
56.4141 271.818 li
56.4141 274.594 54.1556 276.852 51.3801 276.852 cv
cp
f
21.4053 264.639 mo
19.7249 264.639 li
19.7249 245.291 li
21.4053 245.291 li
23.0698 245.291 24.4191 246.641 24.4191 248.305 cv
24.4191 261.625 li
24.4191 263.29 23.0698 264.639 21.4053 264.639 cv
cp
.235294 .235294 .231373 rgb
f
54.6646 288.962 mo
50.0334 288.962 li
50.0334 285.72 li
54.6646 285.72 li
54.6646 288.962 li
cp
.823529 .521569 .572549 rgb
f
69.7604 287.418 mo
69.7604 290.456 65.9975 292.919 61.3557 292.919 cv
56.7139 292.919 52.9509 290.456 52.9509 287.418 cv
52.9509 284.38 56.7139 281.917 61.3557 281.917 cv
65.9975 281.917 69.7604 284.38 69.7604 287.418 cv
cp
f
57.5119 271.226 mo
53.6648 271.226 li
53.6648 265.977 li
57.5119 265.977 li
57.5119 271.226 li
cp
.615686 .615686 .611765 rgb
f
55.5908 249.614 mo
51.4195 249.614 48.0265 253.007 48.0265 257.178 cv
48.0265 261.349 51.4195 264.742 55.5908 264.742 cv
59.7621 264.742 63.155 261.349 63.155 257.178 cv
63.155 253.007 59.7621 249.614 55.5908 249.614 cv
cp
55.5908 266.389 mo
50.5118 266.389 46.3799 262.257 46.3799 257.178 cv
46.3799 252.099 50.5118 247.967 55.5908 247.967 cv
60.6698 247.967 64.8017 252.099 64.8017 257.178 cv
64.8017 262.257 60.6698 266.389 55.5908 266.389 cv
cp
.341176 .341176 .337255 rgb
f
55.537 252.009 mo
55.5908 252.008 li
57.4377 252.008 59.1444 252.994 60.0678 254.593 cv
60.2825 254.965 60.4473 255.357 60.5621 255.76 cv
58.6632 256.301 li
58.5922 256.052 58.4904 255.81 58.3577 255.58 cv
57.787 254.592 56.7322 253.983 55.5908 253.983 cv
55.5575 253.983 li
55.537 252.009 li
cp
.913725 .305882 .105882 rgb
f
60.5541 255.732 mo
60.9437 257.069 60.7816 258.527 60.0678 259.763 cv
59.1444 261.362 57.4377 262.348 55.5908 262.348 cv
53.7439 262.348 52.0372 261.362 51.1137 259.763 cv
50.1903 258.163 50.1903 256.193 51.1137 254.593 cv
52.0372 252.994 53.7439 252.008 55.5908 252.008 cv
55.5908 253.983 li
54.4493 253.983 53.3946 254.592 52.8239 255.58 cv
52.2531 256.569 52.2531 257.787 52.8239 258.775 cv
53.3946 259.764 54.4493 260.373 55.5908 260.373 cv
56.7322 260.373 57.787 259.764 58.3577 258.775 cv
58.7988 258.011 58.899 257.11 58.6582 256.284 cv
60.5541 255.732 li
cp
.909804 .87451 .819608 rgb
f
50.6648 255.609 mo
50.7763 255.259 50.9259 254.919 51.1137 254.593 cv
52.0372 252.994 53.7439 252.008 55.5908 252.008 cv
55.5908 253.983 li
54.4493 253.983 53.3946 254.592 52.8239 255.58 cv
52.7078 255.782 52.6153 255.992 52.5464 256.208 cv
50.6648 255.609 li
cp
.584314 .756863 .121569 rgb
f
49.2787 256.646 mo
49.5629 256.646 49.7932 256.877 49.7932 257.161 cv
49.7932 257.445 49.5629 257.675 49.2787 257.675 cv
48.9945 257.675 48.7641 257.445 48.7641 257.161 cv
48.7641 256.877 48.9945 256.646 49.2787 256.646 cv
cp
.235294 .235294 .231373 rgb
f
61.9029 256.646 mo
62.1871 256.646 62.4175 256.877 62.4175 257.161 cv
62.4175 257.445 62.1871 257.675 61.9029 257.675 cv
61.6187 257.675 61.3883 257.445 61.3883 257.161 cv
61.3883 256.877 61.6187 256.646 61.9029 256.646 cv
cp
f
56.1054 250.849 mo
56.1054 251.133 55.875 251.363 55.5908 251.363 cv
55.3066 251.363 55.0762 251.133 55.0762 250.849 cv
55.0762 250.564 55.3066 250.334 55.5908 250.334 cv
55.875 250.334 56.1054 250.564 56.1054 250.849 cv
cp
f
56.1054 263.473 mo
56.1054 263.757 55.875 263.988 55.5908 263.988 cv
55.3066 263.988 55.0762 263.757 55.0762 263.473 cv
55.0762 263.189 55.3066 262.958 55.5908 262.958 cv
55.875 262.958 56.1054 263.189 56.1054 263.473 cv
cp
f
50.7636 261.26 mo
50.9645 261.059 51.2903 261.059 51.4913 261.26 cv
51.6923 261.461 51.6923 261.787 51.4913 261.988 cv
51.2903 262.189 50.9645 262.189 50.7636 261.988 cv
50.5626 261.787 50.5626 261.461 50.7636 261.26 cv
cp
f
59.6903 252.334 mo
59.8912 252.133 60.217 252.133 60.418 252.334 cv
60.6189 252.535 60.6189 252.86 60.418 253.061 cv
60.217 253.262 59.8912 253.262 59.6903 253.061 cv
59.4893 252.86 59.4893 252.535 59.6903 252.334 cv
cp
f
51.4913 252.334 mo
51.6923 252.535 51.6923 252.86 51.4913 253.061 cv
51.2903 253.262 50.9645 253.262 50.7636 253.061 cv
50.5626 252.86 50.5626 252.535 50.7636 252.334 cv
50.9645 252.133 51.2903 252.133 51.4913 252.334 cv
cp
f
60.418 261.26 mo
60.6189 261.461 60.6189 261.787 60.418 261.988 cv
60.217 262.189 59.8912 262.189 59.6903 261.988 cv
59.4893 261.787 59.4893 261.461 59.6903 261.26 cv
59.8912 261.059 60.217 261.059 60.418 261.26 cv
cp
f
57.063 257.953 mo
56.635 258.766 55.6288 259.078 54.8157 258.65 cv
54.0026 258.222 53.6905 257.216 54.1186 256.403 cv
54.5466 255.59 55.5528 255.278 56.3659 255.706 cv
57.179 256.134 57.4911 257.14 57.063 257.953 cv
cp
.341176 .341176 .337255 rgb
f
55.1513 256.772 mo
58.5393 251.577 li
56.1741 257.311 li
55.1513 256.772 li
cp
f
195.882 409.515 mo
159.716 409.515 li
159.716 387.619 li
195.882 387.619 li
195.882 409.515 li
cp
.854902 .854902 .854902 rgb
f
188.557 405.897 mo
188.549 405.897 li
188.354 405.894 188.191 405.775 188.167 405.618 cv
186.465 394.648 li
185.572 399.228 li
185.543 399.383 185.378 399.498 185.184 399.498 cv
179.962 399.498 li
179.962 398.858 li
184.848 398.858 li
186.121 392.328 li
186.151 392.171 186.312 392.053 186.515 392.058 cv
186.711 392.061 186.874 392.18 186.899 392.338 cv
188.609 403.362 li
189.915 396.947 li
189.944 396.804 190.089 396.694 190.267 396.681 cv
190.451 396.67 190.612 396.754 190.673 396.891 cv
191.543 398.858 li
195.882 398.858 li
195.882 399.498 li
191.267 399.498 li
191.101 399.498 190.953 399.413 190.897 399.286 cv
190.444 398.263 li
188.945 405.63 li
188.913 405.784 188.749 405.897 188.557 405.897 cv
cp
.776471 .776471 .776471 rgb
f
183.264 398.567 mo
159.716 398.567 li
159.716 409.515 li
183.264 398.567 li
cp
.341176 .341176 .337255 rgb
f
138.098 417.753 mo
130.817 413.508 121.586 406.811 116.688 398.079 cv
109.261 384.839 110.133 371.855 118.424 366.83 cv
124.789 362.972 133.855 364.889 138.098 371.845 cv
142.342 364.889 151.408 362.972 157.773 366.83 cv
166.064 371.855 166.936 384.839 159.509 398.079 cv
154.611 406.811 145.38 413.508 138.098 417.753 cv
cp
.913725 .305882 .105882 rgb
f
183.264 398.567 mo
130.274 398.567 li
130.274 376.671 li
183.264 376.671 li
183.264 398.567 li
cp
.929412 .929412 .929412 rgb
f
136.56 395.584 mo
136.552 395.584 li
136.357 395.58 136.194 395.461 136.169 395.304 cv
134.467 384.334 li
133.575 388.914 li
133.545 389.069 133.381 389.184 133.187 389.184 cv
130.274 389.184 li
130.274 388.545 li
132.851 388.545 li
134.124 382.014 li
134.154 381.857 134.315 381.739 134.518 381.744 cv
134.714 381.747 134.877 381.866 134.902 382.024 cv
136.612 393.048 li
137.918 386.633 li
137.947 386.49 138.092 386.38 138.27 386.367 cv
138.454 386.356 138.615 386.44 138.676 386.577 cv
139.546 388.545 li
143.885 388.545 li
143.885 389.184 li
139.269 389.184 li
139.104 389.184 138.956 389.099 138.899 388.972 cv
138.447 387.949 li
136.947 395.316 li
136.916 395.471 136.752 395.584 136.56 395.584 cv
cp
.615686 .615686 .611765 rgb
f
162.335 395.584 mo
162.328 395.584 li
162.133 395.58 161.97 395.461 161.945 395.304 cv
160.243 384.334 li
159.351 388.914 li
159.321 389.069 159.156 389.184 158.963 389.184 cv
156.05 389.184 li
156.05 388.545 li
158.627 388.545 li
159.899 382.014 li
159.93 381.857 160.091 381.739 160.294 381.744 cv
160.489 381.747 160.653 381.866 160.678 382.024 cv
162.388 393.048 li
163.694 386.633 li
163.723 386.49 163.868 386.38 164.046 386.367 cv
164.23 386.356 164.391 386.44 164.452 386.577 cv
165.322 388.545 li
169.661 388.545 li
169.661 389.184 li
165.045 389.184 li
164.879 389.184 164.732 389.099 164.675 388.972 cv
164.223 387.949 li
162.723 395.316 li
162.692 395.471 162.527 395.584 162.335 395.584 cv
cp
f
175.946 395.584 mo
175.938 395.584 li
175.743 395.58 175.581 395.461 175.556 395.304 cv
173.854 384.334 li
172.962 388.914 li
172.932 389.069 172.767 389.184 172.574 389.184 cv
169.661 389.184 li
169.661 388.545 li
172.238 388.545 li
173.51 382.014 li
173.54 381.857 173.702 381.739 173.904 381.744 cv
174.1 381.747 174.264 381.866 174.288 382.024 cv
175.999 393.048 li
177.305 386.633 li
177.334 386.49 177.478 386.38 177.657 386.367 cv
177.841 386.356 178.001 386.44 178.062 386.577 cv
178.932 388.545 li
183.272 388.545 li
183.272 389.184 li
178.656 389.184 li
178.49 389.184 178.342 389.099 178.286 388.972 cv
177.834 387.949 li
176.334 395.316 li
176.302 395.471 176.138 395.584 175.946 395.584 cv
cp
f
149.727 396.977 mo
149.719 396.977 li
149.524 396.973 149.361 396.854 149.337 396.697 cv
147.635 380.852 li
146.742 388.914 li
146.713 389.069 146.548 389.184 146.354 389.184 cv
143.885 389.184 li
143.885 388.545 li
146.018 388.545 li
147.291 378.532 li
147.322 378.375 147.48 378.257 147.685 378.262 cv
147.881 378.265 148.045 378.384 148.069 378.542 cv
149.779 394.441 li
151.086 383.151 li
151.115 383.007 151.26 382.898 151.438 382.885 cv
151.62 382.874 151.782 382.958 151.843 383.095 cv
152.714 388.545 li
156.05 388.545 li
156.05 389.184 li
152.437 389.184 li
152.271 389.184 152.123 389.099 152.067 388.972 cv
151.519 385.248 li
150.115 396.709 li
150.083 396.864 149.919 396.977 149.727 396.977 cv
cp
.878431 .286275 .219608 rgb
f
299.783 415.338 mo
281.011 415.338 li
281.011 367.285 li
299.783 367.285 li
299.783 415.338 li
cp
.913725 .305882 .105882 rgb
f
297.096 415.338 mo
283.699 415.338 li
283.699 367.285 li
297.096 367.285 li
297.096 415.338 li
cp
.690196 .223529 .172549 rgb
f
297.096 412.278 mo
297.095 412.278 li
296.353 402.799 289.878 398.397 289.728 391.863 cv
289.576 385.217 296.089 380.858 297.095 370.345 cv
297.096 370.345 li
297.096 412.278 li
cp
.976471 .796078 .470588 rgb
f
293.681 374.456 mo
293.28 375.557 292.415 376.254 291.749 376.011 cv
291.083 375.768 290.868 374.678 291.269 373.577 cv
291.671 372.475 292.536 371.779 293.202 372.022 cv
293.868 372.264 294.083 373.354 293.681 374.456 cv
cp
.639216 .203922 .160784 rgb
f
287.112 402.1 mo
287.722 403.102 287.726 404.213 287.12 404.581 cv
286.515 404.95 285.529 404.437 284.92 403.436 cv
284.31 402.434 284.306 401.324 284.912 400.955 cv
285.517 400.586 286.502 401.099 287.112 402.1 cv
cp
f
292.313 404.917 mo
291.613 405.858 290.584 406.276 290.016 405.853 cv
289.447 405.429 289.554 404.324 290.255 403.384 cv
290.955 402.443 291.984 402.025 292.553 402.448 cv
293.121 402.872 293.014 403.977 292.313 404.917 cv
cp
f
287.635 372.871 mo
288.641 373.473 289.161 374.454 288.797 375.062 cv
288.433 375.67 287.323 375.675 286.316 375.073 cv
285.311 374.471 284.79 373.49 285.154 372.882 cv
285.518 372.273 286.629 372.268 287.635 372.871 cv
cp
f
290.163 378.893 mo
290.432 380.034 290.091 381.091 289.401 381.254 cv
288.711 381.417 287.934 380.624 287.664 379.483 cv
287.395 378.342 287.736 377.285 288.426 377.122 cv
289.115 376.959 289.893 377.752 290.163 378.893 cv
cp
f
288.333 398.539 mo
287.395 399.243 286.29 399.353 285.865 398.786 cv
285.439 398.219 285.855 397.189 286.792 396.485 cv
287.73 395.782 288.835 395.671 289.261 396.238 cv
289.686 396.805 289.271 397.835 288.333 398.539 cv
cp
f
286.956 410.492 mo
285.923 409.937 285.357 408.981 285.692 408.357 cv
286.028 407.732 287.137 407.675 288.17 408.23 cv
289.203 408.785 289.768 409.74 289.433 410.365 cv
289.098 410.99 287.989 411.046 286.956 410.492 cv
cp
f
287.727 385.759 mo
286.776 386.445 285.669 386.535 285.254 385.96 cv
284.839 385.385 285.274 384.363 286.225 383.677 cv
287.176 382.991 288.283 382.901 288.697 383.476 cv
289.112 384.051 288.678 385.073 287.727 385.759 cv
cp
f
288.201 391.504 mo
287.851 392.623 287.018 393.359 286.342 393.147 cv
285.665 392.935 285.401 391.857 285.751 390.738 cv
286.101 389.619 286.933 388.883 287.61 389.095 cv
288.286 389.307 288.551 390.385 288.201 391.504 cv
cp
f
295.109 409.744 mo
294.759 410.863 293.926 411.599 293.25 411.387 cv
292.573 411.175 292.308 410.096 292.659 408.978 cv
293.009 407.859 293.841 407.123 294.518 407.335 cv
295.194 407.546 295.459 408.625 295.109 409.744 cv
cp
f
275.76 415.338 mo
256.988 415.338 li
256.988 367.285 li
275.76 367.285 li
275.76 415.338 li
cp
.913725 .305882 .105882 rgb
f
273.072 415.338 mo
259.676 415.338 li
259.676 367.285 li
273.072 367.285 li
273.072 415.338 li
cp
.690196 .223529 .172549 rgb
f
273.072 412.278 mo
273.072 412.278 li
272.329 402.799 269.537 398.397 269.387 391.863 cv
269.235 385.217 272.066 380.858 273.072 370.345 cv
273.072 412.278 li
cp
.976471 .796078 .470588 rgb
f
270.588 373.706 mo
270.186 374.807 269.321 375.504 268.655 375.261 cv
267.989 375.018 267.774 373.928 268.175 372.827 cv
268.577 371.725 269.442 371.029 270.108 371.272 cv
270.774 371.514 270.989 372.604 270.588 373.706 cv
cp
.639216 .203922 .160784 rgb
f
263.5 403.483 mo
264.11 404.484 264.113 405.595 263.508 405.964 cv
262.902 406.332 261.917 405.819 261.307 404.818 cv
260.698 403.817 260.694 402.706 261.3 402.337 cv
261.905 401.969 262.89 402.481 263.5 403.483 cv
cp
f
268.29 404.917 mo
267.59 405.858 266.561 406.276 265.993 405.853 cv
265.424 405.429 265.531 404.324 266.232 403.384 cv
266.932 402.443 267.961 402.025 268.529 402.448 cv
269.098 402.872 268.991 403.977 268.29 404.917 cv
cp
f
264.124 370.872 mo
265.13 371.474 265.651 372.455 265.287 373.064 cv
264.923 373.672 263.812 373.677 262.806 373.075 cv
261.8 372.473 261.279 371.491 261.644 370.883 cv
262.008 370.275 263.118 370.27 264.124 370.872 cv
cp
f
269.03 385.37 mo
268.398 386.358 267.402 386.849 266.805 386.467 cv
266.207 386.085 266.235 384.975 266.867 383.987 cv
267.498 383 268.495 382.508 269.092 382.89 cv
269.689 383.272 269.661 384.383 269.03 385.37 cv
cp
f
266.14 378.893 mo
266.409 380.034 266.068 381.091 265.378 381.254 cv
264.688 381.417 263.911 380.624 263.641 379.483 cv
263.372 378.342 263.712 377.285 264.402 377.122 cv
265.092 376.959 265.87 377.752 266.14 378.893 cv
cp
f
266.022 394.175 mo
265.313 393.241 265.195 392.136 265.76 391.708 cv
266.325 391.279 267.357 391.688 268.066 392.622 cv
268.775 393.556 268.892 394.66 268.328 395.089 cv
267.763 395.518 266.731 395.108 266.022 394.175 cv
cp
f
265.661 399.726 mo
264.723 400.43 263.618 400.541 263.192 399.974 cv
262.767 399.407 263.182 398.377 264.12 397.673 cv
265.058 396.969 266.163 396.859 266.588 397.426 cv
267.014 397.993 266.598 399.023 265.661 399.726 cv
cp
f
263.353 412.554 mo
262.32 411.999 261.754 411.043 262.089 410.419 cv
262.425 409.794 263.534 409.738 264.567 410.292 cv
265.6 410.847 266.165 411.803 265.83 412.427 cv
265.495 413.052 264.386 413.109 263.353 412.554 cv
cp
f
263.704 385.759 mo
262.753 386.445 261.646 386.535 261.231 385.96 cv
260.816 385.385 261.251 384.363 262.202 383.677 cv
263.152 382.991 264.26 382.901 264.674 383.476 cv
265.089 384.051 264.654 385.073 263.704 385.759 cv
cp
f
264.178 391.504 mo
263.828 392.623 262.995 393.359 262.319 393.147 cv
261.642 392.935 261.377 391.857 261.728 390.738 cv
262.078 389.619 262.91 388.883 263.587 389.095 cv
264.263 389.307 264.528 390.385 264.178 391.504 cv
cp
f
270.607 411.257 mo
270.256 412.376 269.424 413.111 268.748 412.899 cv
268.071 412.688 267.806 411.609 268.156 410.49 cv
268.507 409.371 269.339 408.636 270.015 408.847 cv
270.692 409.059 270.957 410.138 270.607 411.257 cv
cp
f
251.492 415.338 mo
232.72 415.338 li
232.72 367.285 li
251.492 367.285 li
251.492 415.338 li
cp
.913725 .305882 .105882 rgb
f
248.804 415.338 mo
235.408 415.338 li
235.408 367.285 li
248.804 367.285 li
248.804 415.338 li
cp
.690196 .223529 .172549 rgb
f
248.804 412.278 mo
248.804 412.278 li
248.061 402.799 247.92 398.071 247.77 391.538 cv
247.617 384.892 247.798 380.858 248.804 370.345 cv
248.804 412.278 li
cp
.976471 .796078 .470588 rgb
f
246.319 373.706 mo
245.918 374.807 245.053 375.504 244.386 375.261 cv
243.72 375.018 243.506 373.928 243.907 372.827 cv
244.308 371.725 245.174 371.029 245.84 371.272 cv
246.506 371.514 246.721 372.604 246.319 373.706 cv
cp
.639216 .203922 .160784 rgb
f
239.232 403.483 mo
239.842 404.484 239.845 405.595 239.24 405.964 cv
238.634 406.332 237.649 405.819 237.039 404.818 cv
236.429 403.817 236.426 402.706 237.031 402.337 cv
237.637 401.969 238.622 402.481 239.232 403.483 cv
cp
f
244.022 404.917 mo
243.321 405.858 242.293 406.276 241.724 405.853 cv
241.156 405.429 241.263 404.324 241.963 403.384 cv
242.664 402.443 243.693 402.025 244.261 402.448 cv
244.83 402.872 244.723 403.977 244.022 404.917 cv
cp
f
239.856 370.872 mo
240.862 371.474 241.382 372.455 241.018 373.064 cv
240.654 373.672 239.544 373.677 238.538 373.075 cv
237.531 372.473 237.011 371.491 237.375 370.883 cv
237.739 370.275 238.85 370.27 239.856 370.872 cv
cp
f
244.761 385.37 mo
244.13 386.358 243.134 386.849 242.536 386.467 cv
241.939 386.085 241.967 384.975 242.598 383.987 cv
243.23 383 244.226 382.508 244.824 382.89 cv
245.421 383.272 245.393 384.383 244.761 385.37 cv
cp
f
240.941 378.331 mo
241.21 379.472 240.869 380.529 240.179 380.692 cv
239.489 380.855 238.712 380.062 238.442 378.921 cv
238.173 377.78 238.514 376.723 239.204 376.56 cv
239.894 376.397 240.671 377.19 240.941 378.331 cv
cp
f
243.394 391.696 mo
242.685 390.762 242.568 389.657 243.133 389.229 cv
243.698 388.8 244.73 389.209 245.439 390.143 cv
246.148 391.077 246.265 392.181 245.701 392.61 cv
245.136 393.039 244.104 392.629 243.394 391.696 cv
cp
f
243.994 397.424 mo
244.219 396.273 244.965 395.45 245.66 395.586 cv
246.356 395.722 246.738 396.765 246.514 397.915 cv
246.289 399.066 245.543 399.889 244.847 399.753 cv
244.152 399.617 243.77 398.574 243.994 397.424 cv
cp
f
241.333 398.09 mo
240.396 398.794 239.29 398.904 238.865 398.337 cv
238.44 397.77 238.855 396.74 239.793 396.037 cv
240.731 395.333 241.836 395.222 242.261 395.789 cv
242.687 396.356 242.271 397.386 241.333 398.09 cv
cp
f
239.084 412.554 mo
238.051 411.999 237.486 411.043 237.821 410.419 cv
238.156 409.794 239.266 409.738 240.299 410.292 cv
241.332 410.847 241.897 411.803 241.562 412.427 cv
241.226 413.052 240.117 413.109 239.084 412.554 cv
cp
f
239.435 385.759 mo
238.484 386.445 237.377 386.535 236.963 385.96 cv
236.548 385.385 236.982 384.363 237.933 383.677 cv
238.884 382.991 239.991 382.901 240.406 383.476 cv
240.821 384.051 240.386 385.073 239.435 385.759 cv
cp
f
239.575 392.504 mo
239.225 393.623 238.393 394.359 237.716 394.147 cv
237.039 393.935 236.775 392.857 237.125 391.738 cv
237.475 390.619 238.307 389.883 238.984 390.095 cv
239.66 390.307 239.925 391.385 239.575 392.504 cv
cp
f
244.6 380.61 mo
243.525 380.141 242.884 379.234 243.167 378.584 cv
243.451 377.935 244.552 377.788 245.627 378.257 cv
246.701 378.726 247.342 379.633 247.059 380.283 cv
246.775 380.932 245.674 381.079 244.6 380.61 cv
cp
f
246.338 411.257 mo
245.988 412.376 245.156 413.111 244.479 412.899 cv
243.803 412.688 243.538 411.609 243.888 410.49 cv
244.238 409.371 245.071 408.636 245.747 408.847 cv
246.424 409.059 246.688 410.138 246.338 411.257 cv
cp
f
173.546 30.7424 mo
173.546 33.1509 171.593 35.1035 169.185 35.1035 cv
166.776 35.1035 164.824 33.1509 164.824 30.7424 cv
164.824 28.3338 166.776 26.3812 169.185 26.3812 cv
171.593 26.3812 173.546 28.3338 173.546 30.7424 cv
.831373 .278431 .0980392 rgb
f
166.311 32.9411 mo
166.173 32.9411 166.034 32.8747 165.957 32.7249 cv
165.667 32.1653 165.51 31.539 165.51 30.8983 cv
165.51 30.4155 165.598 29.9246 165.786 29.4478 cv
166.222 28.338 167.102 27.5366 168.143 27.1645 cv
168.191 27.1474 168.237 27.1396 168.282 27.1396 cv
168.513 27.1396 168.69 27.3483 168.69 27.563 cv
168.69 27.6641 168.65 27.7666 168.558 27.8492 cv
167.951 28.3943 167.442 29.1137 167.106 29.9671 cv
166.834 30.6604 166.705 31.3671 166.706 32.0435 cv
166.706 32.1996 166.713 32.354 166.727 32.5064 cv
166.728 32.5189 166.729 32.5312 166.729 32.5432 cv
166.73 32.7888 166.521 32.9411 166.311 32.9411 cv
.917647 .639216 .54902 rgb
f
197.979 35.8318 mo
143.732 35.8318 li
143.732 44.5017 li
197.979 44.1226 li
197.979 35.8318 li
.858824 .576471 .152941 rgb
f
197.979 44.1226 mo
143.732 44.5017 li
143.732 46.7684 li
197.979 47.3543 li
197.979 44.1226 li
.917647 .803922 .501961 rgb
f
197.982 47.3561 mo
197.982 54.6829 li
176.986 55.1885 li
171.238 55.3304 li
166.324 55.4458 li
143.732 55.9957 li
143.732 46.7707 li
145.834 46.7974 li
165.783 47.0102 li
170.759 47.0634 li
176.986 47.1255 li
193.094 47.3029 li
197.982 47.3561 li
.858824 .576471 .152941 rgb
f
197.982 54.6829 mo
197.982 57.885 li
176.986 58.4172 li
143.732 59.251 li
143.732 55.9957 li
166.324 55.4458 li
171.238 55.3304 li
176.986 55.1885 li
197.982 54.6829 li
.917647 .803922 .501961 rgb
f
197.982 57.885 mo
197.982 66.7463 li
143.732 66.7463 li
143.732 59.251 li
176.986 58.4172 li
197.982 57.885 li
.858824 .576471 .152941 rgb
f
198.807 38.894 mo
198.78 41.6083 198.762 44.3225 198.745 47.028 cv
198.736 48.1457 198.638 49.4317 197.982 50.2656 cv
197.822 50.4696 197.627 50.6382 197.396 50.78 cv
196.155 51.5163 194.46 50.709 193.742 49.4583 cv
193.36 48.7931 193.174 48.0657 193.094 47.3029 cv
193.006 46.6199 192.997 45.9281 192.997 45.2451 cv
192.997 44.8814 192.988 44.5177 192.97 44.1541 cv
192.917 43.063 192.748 41.9809 192.172 41.0583 cv
191.4 39.8343 189.644 39.1158 188.473 39.9585 cv
187.666 40.5261 187.4 41.5639 187.089 42.4865 cv
186.876 43.1162 186.548 43.7904 186.051 44.1984 cv
185.821 44.4023 185.555 44.5443 185.244 44.5975 cv
184.703 44.6951 184.215 44.5088 183.736 44.2162 cv
182.698 43.6041 181.74 42.5042 180.578 42.7437 cv
179.825 42.9033 179.337 43.5686 178.911 44.2516 cv
178.813 44.3935 178.725 44.5443 178.636 44.6862 cv
178.246 45.316 177.651 45.9546 176.986 46.0789 cv
176.791 46.1143 176.596 46.1143 176.392 46.0522 cv
175.647 45.8305 175.416 45.0943 175.23 44.2782 cv
175.043 43.4711 174.893 42.6018 174.316 42.0783 cv
173.403 41.2534 171.824 41.8389 171.203 42.9033 cv
170.945 43.338 170.804 43.817 170.733 44.3137 cv
170.635 45.0233 170.679 45.7772 170.724 46.4958 cv
170.733 46.682 170.75 46.8772 170.759 47.0634 cv
170.91 49.3874 171.052 51.7025 171.203 54.0354 cv
171.229 54.4611 171.256 54.9046 171.238 55.3304 cv
171.238 55.7739 171.185 56.2086 171.061 56.6343 cv
170.804 57.4681 170.174 58.2487 169.313 58.4172 cv
168.293 58.6212 167.273 57.8939 166.794 56.9803 cv
166.537 56.5013 166.404 55.9779 166.324 55.4458 cv
166.244 54.9491 166.209 54.4434 166.182 53.9466 cv
166.049 51.6316 165.925 49.3164 165.783 47.0102 cv
165.774 46.8772 li
165.73 46.0256 165.668 45.1475 165.393 44.3492 cv
165.295 44.0565 165.171 43.7814 165.003 43.5154 cv
164.373 42.5397 163.007 41.9276 162.004 42.5307 cv
161.366 42.9122 161.073 43.6395 160.834 44.3758 cv
160.771 44.562 160.718 44.7483 160.656 44.9258 cv
160.363 45.8127 159.805 46.8062 158.873 46.8772 cv
157.96 46.9481 157.232 46.0878 156.984 45.2096 cv
156.913 44.9435 156.86 44.6773 156.824 44.4113 cv
156.736 43.7814 156.709 43.134 156.532 42.5219 cv
156.274 41.6526 155.547 40.7834 154.642 40.8632 cv
153.4 40.9696 152.744 42.7082 151.493 42.7259 cv
149.799 42.7437 149.506 39.7811 147.83 39.5238 cv
146.65 39.3463 145.79 40.739 145.799 41.9364 cv
145.816 42.797 146.082 43.6395 146.215 44.4822 cv
146.26 44.8193 146.287 45.1564 146.269 45.4935 cv
146.251 45.9458 146.091 46.416 145.834 46.7974 cv
145.408 47.4448 144.725 47.8617 144.016 47.6223 cv
143.909 47.5867 143.821 47.5425 143.732 47.4893 cv
142.942 47.0013 142.809 45.7949 142.818 44.8015 cv
142.845 42.9211 142.863 41.0318 142.88 39.1424 cv
142.898 37.8474 142.934 36.4636 143.67 35.3903 cv
144.876 33.6341 147.351 33.4567 149.489 33.4478 cv
158.651 33.4301 167.814 33.4123 176.986 33.3946 cv
182.237 33.3856 187.488 33.368 192.739 33.359 cv
194.638 33.359 196.82 33.4921 197.964 35.0001 cv
198.789 36.0734 198.816 37.5369 198.807 38.894 cv
.439216 .258824 .117647 rgb
f
193.094 47.3029 mo
186.501 47.2303 li
193.094 47.3015 li
193.094 47.302 193.094 47.3025 193.094 47.3029 cv
.661422 .592526 .525598 rgb
f
178.908 44.2559 mo
178.909 44.2544 178.91 44.253 178.911 44.2516 cv
179.337 43.5686 179.825 42.9033 180.578 42.7437 cv
180.69 42.7208 180.799 42.7101 180.906 42.7101 cv
181.924 42.7101 182.798 43.6627 183.736 44.2162 cv
183.739 44.2181 183.743 44.2201 183.746 44.222 cv
178.908 44.2559 li
186.043 44.206 mo
186.046 44.2035 186.049 44.2009 186.051 44.1984 cv
186.548 43.7904 186.876 43.1162 187.089 42.4865 cv
187.4 41.5639 187.666 40.5261 188.473 39.9585 cv
188.825 39.7053 189.229 39.5931 189.644 39.5931 cv
190.61 39.5931 191.632 40.202 192.172 41.0583 cv
192.748 41.9809 192.917 43.063 192.97 44.1541 cv
192.97 44.1552 192.97 44.1564 192.97 44.1576 cv
186.043 44.206 li
.568627 .341176 .0784314 rgb
f
193.094 47.3015 mo
186.501 47.2303 li
176.986 47.1255 li
176.986 46.0789 li
177.651 45.9546 178.246 45.316 178.636 44.6862 cv
178.724 44.5458 178.812 44.3965 178.908 44.2559 cv
183.746 44.222 li
184.134 44.4582 184.529 44.6237 184.953 44.6237 cv
185.049 44.6237 185.146 44.6153 185.244 44.5975 cv
185.551 44.545 185.814 44.4058 186.043 44.206 cv
192.97 44.1576 li
192.988 44.52 192.997 44.8826 192.997 45.2451 cv
192.997 45.9276 193.006 46.6189 193.094 47.3015 cv
.607843 .478431 .262745 rgb
f
176.986 55.1885 mo
176.986 47.1255 li
186.501 47.2303 li
193.094 47.3029 li
193.094 47.3029 li
193.174 48.0657 193.36 48.7931 193.742 49.4583 cv
194.271 50.3799 195.33 51.0606 196.348 51.0606 cv
196.711 51.0606 197.07 50.9738 197.396 50.78 cv
197.627 50.6382 197.822 50.4696 197.982 50.2656 cv
197.982 54.6829 li
176.986 55.1885 li
.568627 .341176 .0784314 rgb
f
176.986 58.4172 mo
176.986 55.1885 li
197.982 54.6829 li
197.982 57.885 li
176.986 58.4172 li
.607843 .478431 .262745 rgb
f
197.982 66.7463 mo
176.986 66.7463 li
176.986 58.4172 li
197.982 57.885 li
197.982 66.7463 li
.568627 .341176 .0784314 rgb
f
196.348 51.0606 mo
195.33 51.0606 194.271 50.3799 193.742 49.4583 cv
193.36 48.7931 193.174 48.0657 193.094 47.3029 cv
193.094 47.3029 li
193.094 47.3025 193.094 47.302 193.094 47.3015 cv
193.006 46.6189 192.997 45.9276 192.997 45.2451 cv
192.997 44.8826 192.988 44.52 192.97 44.1576 cv
192.97 44.1576 li
192.97 44.1564 192.97 44.1552 192.97 44.1541 cv
192.917 43.063 192.748 41.9809 192.172 41.0583 cv
191.632 40.202 190.61 39.5931 189.644 39.5931 cv
189.229 39.5931 188.825 39.7053 188.473 39.9585 cv
187.666 40.5261 187.4 41.5639 187.089 42.4865 cv
186.876 43.1162 186.548 43.7904 186.051 44.1984 cv
186.049 44.2009 186.046 44.2035 186.043 44.206 cv
186.043 44.206 li
185.814 44.4058 185.551 44.545 185.244 44.5975 cv
185.146 44.6153 185.049 44.6237 184.953 44.6237 cv
184.529 44.6237 184.134 44.4582 183.746 44.222 cv
183.746 44.222 li
183.743 44.2201 183.739 44.2181 183.736 44.2162 cv
182.798 43.6627 181.924 42.7101 180.906 42.7101 cv
180.799 42.7101 180.69 42.7208 180.578 42.7437 cv
179.825 42.9033 179.337 43.5686 178.911 44.2516 cv
178.91 44.253 178.909 44.2544 178.908 44.2559 cv
178.908 44.2559 li
178.812 44.3965 178.724 44.5458 178.636 44.6862 cv
178.246 45.316 177.651 45.9546 176.986 46.0789 cv
176.986 33.3946 li
182.237 33.3856 187.488 33.368 192.739 33.359 cv
194.638 33.359 196.82 33.4921 197.964 35.0001 cv
198.731 35.9979 198.808 37.333 198.808 38.6064 cv
198.808 38.7027 198.807 38.7986 198.807 38.894 cv
198.78 41.6083 198.762 44.3225 198.745 47.028 cv
198.736 48.1457 198.638 49.4317 197.982 50.2656 cv
197.982 50.2656 li
197.822 50.4696 197.627 50.6382 197.396 50.78 cv
197.07 50.9738 196.711 51.0606 196.348 51.0606 cv
.290196 .152941 .0627451 rgb
f
155.751 81.241 mo
110.614 81.241 li
109.857 81.241 109.244 80.6279 109.244 79.8718 cv
109.244 75.4574 li
109.244 74.7012 109.857 74.0881 110.614 74.0881 cv
155.751 74.0881 li
156.507 74.0881 157.12 74.7012 157.12 75.4574 cv
157.12 79.8718 li
157.12 80.6279 156.507 81.241 155.751 81.241 cv
cp
.878431 .580392 .133333 rgb
f
152.51 64.882 mo
113.82 64.882 li
112.427 64.882 111.298 63.7527 111.298 62.3595 cv
111.298 62.3085 li
111.298 60.9153 112.427 59.786 113.82 59.786 cv
152.51 59.786 li
153.903 59.786 155.032 60.9153 155.032 62.3085 cv
155.032 62.3595 li
155.032 63.7527 153.903 64.882 152.51 64.882 cv
cp
.407843 .235294 .0666667 rgb
f
157.119 65.4141 mo
157.119 68.4612 li
157.119 69.2212 156.509 69.8306 155.749 69.8306 cv
110.616 69.8306 li
109.857 69.8306 109.247 69.2212 109.247 68.4612 cv
109.247 65.4141 li
109.247 64.6613 109.857 64.0447 110.616 64.0447 cv
155.749 64.0447 li
156.509 64.0447 157.119 64.6613 157.119 65.4141 cv
cp
.941176 .631373 .168627 rgb
f
155.792 60.1947 mo
110.573 60.1947 li
109.319 60.1947 108.38 58.9543 108.795 57.7713 cv
109.412 56.0147 110.774 54.3872 112.717 52.9749 cv
117.169 49.7198 124.676 47.5833 133.179 47.5833 cv
141.252 47.5833 148.415 49.5047 152.932 52.4801 cv
155.247 54.0072 156.875 55.8068 157.563 57.7713 cv
157.986 58.9543 157.047 60.1947 155.792 60.1947 cv
cp
1 .701961 .258824 rgb
f
152.932 52.4801 mo
151.498 53.6488 149.82 54.7242 148.056 54.3227 cv
146.422 53.9427 145.095 52.3223 143.425 52.5375 cv
141.826 52.7454 140.937 54.5235 139.51 55.2834 cv
138.141 56.0076 136.463 55.6921 134.993 55.2046 cv
133.523 54.717 132.046 54.0502 130.505 54.1219 cv
129.15 54.1865 127.895 54.7959 126.633 55.2834 cv
125.372 55.7638 123.959 56.1223 122.683 55.6706 cv
121.407 55.2189 120.468 53.6488 121.12 52.4658 cv
119.421 52.9605 117.729 53.448 116.03 53.9427 cv
115.054 54.2295 113.857 54.4661 113.126 53.7491 cv
112.911 53.5341 112.775 53.2687 112.717 52.9749 cv
117.169 49.7198 124.676 47.5833 133.179 47.5833 cv
141.252 47.5833 148.415 49.5047 152.932 52.4801 cv
cp
1 .878431 .54902 rgb
f
129.486 48.9137 mo
129.655 48.971 129.824 49.0283 129.993 49.0856 cv
130.047 49.2507 130.101 49.4157 130.155 49.5807 cv
130.524 49.4449 130.969 49.55 131.239 49.8364 cv
131.297 49.727 131.355 49.6177 131.413 49.5082 cv
131.493 49.6724 131.764 49.6578 131.866 49.5067 cv
131.968 49.3556 131.924 49.1413 131.81 48.9983 cv
131.697 48.8553 131.529 48.7678 131.366 48.6862 cv
131.218 48.4398 131.022 48.164 130.734 48.1559 cv
130.577 48.1515 130.431 48.2323 130.295 48.3106 cv
130.001 48.4789 129.701 48.6527 129.486 48.9137 cv
cp
.678431 .447059 .0941176 rgb
f
133.645 47.9891 mo
133.722 48.1382 133.799 48.2873 133.876 48.4364 cv
133.804 48.5834 133.733 48.7305 133.662 48.8776 cv
134.001 49.0266 134.234 49.3887 134.229 49.7587 cv
134.34 49.7226 134.451 49.6865 134.561 49.6504 cv
134.508 49.8136 134.701 49.9804 134.869 49.9449 cv
135.037 49.9093 135.147 49.7352 135.163 49.5644 cv
135.18 49.3935 135.124 49.2248 135.066 49.063 cv
135.127 48.7994 135.174 48.4846 134.985 48.2915 cv
134.881 48.1857 134.73 48.1452 134.586 48.1089 cv
134.278 48.0313 133.961 47.9528 133.645 47.9891 cv
cp
f
133.178 46.6909 mo
133.098 46.8076 133.017 46.9244 132.936 47.0412 cv
132.798 47.0466 132.66 47.052 132.522 47.0575 cv
132.546 47.3695 132.368 47.6876 132.09 47.8314 cv
132.303 48.0363 li
132.16 48.0616 132.113 48.2718 132.206 48.383 cv
132.299 48.4942 132.473 48.5069 132.607 48.4512 cv
132.741 48.3956 132.845 48.2865 132.943 48.1793 cv
133.163 48.1196 133.417 48.0296 133.486 47.8114 cv
133.524 47.6919 133.494 47.5628 133.463 47.4412 cv
133.399 47.1799 133.331 46.9123 133.178 46.6909 cv
cp
f
127.36 48.1809 mo
127.178 48.1807 126.997 48.1804 126.815 48.1802 cv
126.709 48.0385 126.603 47.8969 126.497 47.7554 cv
126.186 48.0067 125.721 48.0504 125.368 47.8619 cv
125.348 47.9863 125.327 48.1108 125.307 48.2352 cv
125.176 48.1029 124.92 48.205 124.871 48.3841 cv
124.821 48.5633 124.934 48.7555 125.09 48.8565 cv
125.246 48.9575 125.436 48.9875 125.62 49.0129 cv
125.843 49.2023 126.122 49.4046 126.402 49.3187 cv
126.556 49.2716 126.67 49.1463 126.776 49.0263 cv
127.004 48.7684 127.237 48.5029 127.36 48.1809 cv
cp
f
127.645 47.2096 mo
127.734 47.3017 127.823 47.3939 127.912 47.486 cv
127.892 47.6092 127.873 47.7324 127.853 47.8556 cv
128.133 47.8901 128.383 48.1037 128.461 48.3752 cv
128.68 48.2229 li
128.677 48.354 128.855 48.4336 128.97 48.3707 cv
129.085 48.3077 129.127 48.1563 129.102 48.0277 cv
129.076 47.8991 128.998 47.7882 128.921 47.6824 cv
128.907 47.4764 128.872 47.2357 128.691 47.1361 cv
128.592 47.0815 128.473 47.0852 128.36 47.0903 cv
128.117 47.1013 127.868 47.1137 127.645 47.2096 cv
cp
f
127.071 50.2482 mo
127.179 50.3822 127.287 50.5161 127.395 50.65 cv
127.354 50.8122 127.312 50.9745 127.271 51.1368 cv
127.642 51.2169 127.95 51.5325 128.021 51.9049 cv
128.125 51.8458 128.229 51.7868 128.333 51.7278 cv
128.313 51.9026 128.541 52.0305 128.702 51.9603 cv
128.863 51.8902 128.938 51.6928 128.92 51.5178 cv
128.901 51.3429 128.81 51.1851 128.719 51.0345 cv
128.726 50.7573 128.709 50.4315 128.479 50.2765 cv
128.353 50.1916 128.193 50.182 128.041 50.1752 cv
127.715 50.1606 127.381 50.147 127.071 50.2482 cv
cp
f
135.301 50.9039 mo
135.267 51.0218 135.234 51.1396 135.201 51.2574 cv
135.09 51.3004 134.978 51.3434 134.867 51.3864 cv
134.974 51.6345 134.918 51.9437 134.731 52.1387 cv
134.962 52.2464 li
134.853 52.3069 134.872 52.4919 134.98 52.5565 cv
135.087 52.6212 135.232 52.5831 135.326 52.5003 cv
135.42 52.4174 135.474 52.2994 135.524 52.1846 cv
135.688 52.0741 135.87 51.9298 135.865 51.7325 cv
135.862 51.6244 135.801 51.5275 135.743 51.4366 cv
135.617 51.2415 135.487 51.042 135.301 50.9039 cv
cp
f
132.4 50.4446 mo
132.378 50.5981 132.356 50.7516 132.335 50.905 cv
132.202 50.9778 132.07 51.0506 131.938 51.1234 cv
132.114 51.4166 132.096 51.8138 131.895 52.0901 cv
131.998 52.1221 132.1 52.1541 132.203 52.1861 cv
132.076 52.2807 132.132 52.5092 132.277 52.5722 cv
132.423 52.6352 132.599 52.5627 132.702 52.4428 cv
132.806 52.3229 132.854 52.1658 132.897 52.0132 cv
133.084 51.847 133.288 51.6351 133.248 51.3884 cv
133.226 51.2533 133.134 51.1419 133.045 51.0378 cv
132.854 50.8144 132.657 50.5862 132.4 50.4446 cv
cp
f
137.623 50.4633 mo
137.759 50.487 137.895 50.5107 138.03 50.5344 cv
138.091 50.6538 138.152 50.7734 138.213 50.8929 cv
138.478 50.7455 138.831 50.7727 139.07 50.9592 cv
139.102 50.8689 139.133 50.7786 139.164 50.6882 cv
139.245 50.804 139.449 50.7608 139.509 50.6333 cv
139.57 50.5059 139.51 50.3477 139.407 50.2521 cv
139.303 50.1565 139.165 50.1096 139.031 50.0667 cv
138.889 49.8964 138.706 49.7092 138.486 49.7372 cv
138.365 49.7525 138.264 49.8313 138.169 49.9073 cv
137.965 50.0705 137.757 50.2387 137.623 50.4633 cv
cp
f
135.916 48.5924 mo
136.09 48.6216 136.264 48.6508 136.438 48.6801 cv
136.516 48.8326 136.595 48.9852 136.674 49.1377 cv
137.013 48.9467 137.465 48.9788 137.773 49.2158 cv
137.812 49.0998 137.852 48.9838 137.891 48.868 cv
137.995 49.0154 138.257 48.9585 138.333 48.7948 cv
138.409 48.6311 138.331 48.4289 138.198 48.3073 cv
138.065 48.1857 137.888 48.1267 137.715 48.0729 cv
137.532 47.8559 137.297 47.6176 137.015 47.6552 cv
136.86 47.6758 136.731 47.7777 136.61 47.8758 cv
136.35 48.0864 136.084 48.3036 135.916 48.5924 cv
cp
f
140.03 46.5638 mo
140.006 46.7599 139.983 46.9561 139.96 47.1523 cv
139.794 47.2488 139.627 47.3453 139.461 47.442 cv
139.693 47.8106 139.682 48.3174 139.433 48.6753 cv
139.565 48.7131 139.697 48.7509 139.829 48.7887 cv
139.669 48.9129 139.747 49.2027 139.935 49.2787 cv
140.122 49.3548 140.344 49.2574 140.473 49.1017 cv
140.601 48.946 140.658 48.7443 140.708 48.5487 cv
140.941 48.3314 141.195 48.0556 141.138 47.7423 cv
141.106 47.5707 140.985 47.4314 140.869 47.3014 cv
140.619 47.0221 140.362 46.7368 140.03 46.5638 cv
cp
f
141.732 49.9578 mo
141.873 50.0569 142.014 50.156 142.156 50.2551 cv
142.161 50.4229 142.166 50.5908 142.172 50.7587 cv
142.551 50.733 142.936 50.9515 143.108 51.2906 cv
143.359 51.0335 li
143.388 51.2075 143.643 51.2676 143.779 51.1552 cv
143.915 51.0427 143.932 50.8318 143.866 50.6683 cv
143.8 50.5048 143.668 50.378 143.539 50.258 cv
143.468 49.9891 143.361 49.6799 143.097 49.5943 cv
142.952 49.5473 142.795 49.5827 142.647 49.6182 cv
142.329 49.6944 142.003 49.7741 141.732 49.9578 cv
cp
f
144.701 47.7681 mo
144.611 47.8906 144.521 48.0131 144.431 48.1356 cv
144.283 48.1372 144.135 48.1388 143.988 48.1404 cv
144.003 48.4748 143.804 48.8097 143.502 48.9551 cv
143.724 49.1808 li
143.57 49.2035 143.513 49.4268 143.609 49.5486 cv
143.706 49.6704 143.891 49.6893 144.036 49.6339 cv
144.181 49.5785 144.295 49.4649 144.403 49.3533 cv
144.641 49.2961 144.916 49.2076 144.996 48.9762 cv
145.04 48.8495 145.012 48.7105 144.983 48.5795 cv
144.922 48.2981 144.858 48.0098 144.701 47.7681 cv
cp
f
122.53 48.9643 mo
122.569 49.0645 122.609 49.1648 122.649 49.265 cv
122.484 49.5333 li
122.691 49.6501 122.817 49.8964 122.79 50.1326 cv
123.01 50.0846 li
122.965 50.1855 123.078 50.3043 123.187 50.2923 cv
123.297 50.2803 123.378 50.1761 123.4 50.068 cv
123.421 49.9598 123.396 49.8484 123.37 49.7414 cv
123.425 49.5768 123.476 49.3786 123.367 49.2431 cv
123.124 49.101 li
122.931 49.0317 122.734 48.9613 122.53 48.9643 cv
cp
f
123.132 47.8119 mo
123.189 47.911 123.246 48.0101 123.302 48.1093 cv
123.258 48.2113 123.214 48.3134 123.17 48.4154 cv
123.405 48.5069 123.574 48.7462 123.581 48.9978 cv
123.804 48.9144 li
123.773 49.0269 123.909 49.1347 124.022 49.1056 cv
124.135 49.0766 124.204 48.955 124.211 48.8385 cv
124.217 48.7218 124.174 48.6087 124.13 48.5004 cv
124.164 48.3195 124.187 48.104 124.052 47.9783 cv
123.979 47.9095 123.875 47.8863 123.776 47.8659 cv
123.564 47.8221 123.346 47.778 123.132 47.8119 cv
cp
f
126.369 50.553 mo
126.195 50.6014 126.021 50.6497 125.848 50.698 cv
125.709 50.591 125.569 50.484 125.43 50.377 cv
125.2 50.7006 124.768 50.8666 124.38 50.781 cv
124.394 50.9054 124.407 51.0297 124.421 51.1541 cv
124.261 51.0626 124.044 51.2288 124.044 51.4131 cv
124.045 51.5975 124.204 51.7511 124.38 51.8059 cv
124.556 51.8607 124.746 51.8384 124.928 51.8135 cv
125.192 51.9347 125.513 52.0534 125.758 51.8964 cv
125.892 51.8105 125.967 51.6601 126.037 51.5169 cv
126.186 51.2094 126.338 50.8934 126.369 50.553 cv
cp
f
153.933 74.0881 mo
112.397 74.0881 li
111.79 74.0881 111.298 73.5958 111.298 72.9885 cv
111.298 72.9663 li
111.298 72.359 111.79 71.8668 112.397 71.8668 cv
153.933 71.8668 li
154.54 71.8668 155.032 72.359 155.032 72.9663 cv
155.032 72.9885 li
155.032 73.5958 154.54 74.0881 153.933 74.0881 cv
cp
.901961 .2 .164706 rgb
f
153.576 71.8668 mo
146.737 72.5019 140.512 74.4979 135.145 78.3929 cv
133.926 79.2777 132.281 79.2241 131.039 78.3717 cv
125.832 74.7984 119.776 72.6928 112.982 71.8668 cv
112.425 71.8668 111.974 71.4156 111.974 70.8589 cv
111.974 70.8385 li
111.974 70.2819 112.425 69.8307 112.982 69.8307 cv
153.576 69.8307 li
154.133 69.8307 154.584 70.2819 154.584 70.8385 cv
154.584 70.8589 li
154.584 71.4156 154.133 71.8668 153.576 71.8668 cv
cp
1 .901961 .639216 rgb
f
131.891 76.3605 mo
131.222 76.3605 130.68 75.8186 130.68 75.1501 cv
130.68 74.4816 131.222 73.9396 131.891 73.9396 cv
132.559 73.9396 133.101 74.4816 133.101 75.1501 cv
133.101 75.2654 133.08 75.3746 133.05 75.4801 cv
133.134 75.2877 133.182 75.076 133.182 74.8525 cv
133.182 73.9861 132.48 73.2837 131.613 73.2837 cv
130.747 73.2837 130.045 73.9861 130.045 74.8525 cv
130.045 75.719 130.747 76.4214 131.613 76.4214 cv
131.779 76.4214 131.936 76.3886 132.087 76.3407 cv
131.891 76.3605 li
cp
1 .643137 .247059 rgb
f
138.63 70.4493 mo
139.429 70.4494 140.077 71.0971 140.077 71.896 cv
140.077 72.6948 139.429 73.3424 138.63 73.3423 cv
137.831 73.3422 137.183 72.6945 137.184 71.8956 cv
137.184 71.7579 137.209 71.6274 137.245 71.5013 cv
137.144 71.7312 137.087 71.9841 137.087 72.2512 cv
137.086 73.2866 137.926 74.1261 138.961 74.1261 cv
139.997 74.1263 140.836 73.287 140.836 72.2516 cv
140.836 71.2162 139.997 70.3768 138.962 70.3766 cv
138.763 70.3766 138.576 70.4157 138.396 70.4729 cv
138.63 70.4493 li
cp
f
123.988 73.299 mo
123.353 73.299 122.839 72.7842 122.839 72.1493 cv
122.839 71.5145 123.353 70.9997 123.988 70.9997 cv
124.623 70.9997 125.138 71.5145 125.138 72.1493 cv
125.138 72.2588 125.118 72.3626 125.089 72.4628 cv
125.169 72.2801 125.215 72.079 125.215 71.8668 cv
125.215 71.0438 124.548 70.3768 123.725 70.3768 cv
122.902 70.3768 122.235 71.0438 122.235 71.8668 cv
122.235 72.6897 122.902 73.3567 123.725 73.3567 cv
123.883 73.3567 124.032 73.3256 124.174 73.2802 cv
123.988 73.299 li
cp
f
147.956 70.9101 mo
147.956 71.3567 147.595 71.7186 147.148 71.7186 cv
146.702 71.7186 146.34 71.3567 146.34 70.9101 cv
146.34 70.4637 146.702 70.1016 147.148 70.1016 cv
147.368 70.136 li
147.24 70.0797 147.099 70.0475 146.949 70.0475 cv
146.371 70.0475 145.901 70.5166 145.901 71.0953 cv
145.901 71.674 146.371 72.1431 146.949 72.1431 cv
147.528 72.1431 147.997 71.674 147.997 71.0953 cv
147.997 70.9844 147.975 70.8796 147.943 70.7792 cv
147.956 70.9101 li
cp
f
130.259 64.0447 mo
130.275 64.6583 130.047 65.2953 129.685 65.8067 cv
129.292 66.373 128.765 66.8056 128.206 67.2067 cv
128.026 67.3404 127.837 67.4663 127.656 67.5921 cv
126.295 68.5282 124.942 69.4642 123.581 70.3924 cv
122.991 70.8013 122.394 71.2025 121.804 71.6116 cv
122.024 71.2104 122.244 70.8013 122.464 70.3924 cv
122.693 69.9755 122.921 69.5586 123.141 69.1417 cv
121.67 69.5586 120.199 69.9755 118.728 70.3924 cv
117.509 70.7384 116.29 71.0846 115.063 71.4306 cv
115.385 71.0846 115.716 70.7384 116.038 70.3924 cv
116.982 69.3934 117.918 68.3866 118.854 67.3877 cv
116.565 67.482 114.268 67.5764 111.972 67.6708 cv
114.457 66.5617 116.935 65.4527 119.42 64.3437 cv
119.184 64.2414 118.941 64.147 118.705 64.0447 cv
130.259 64.0447 li
cp
.501961 .65098 .105882 rgb
f
137.441 64.9887 mo
138.141 66.255 138.841 67.5214 139.541 68.7877 cv
139.093 68.717 138.636 68.6383 138.188 68.5596 cv
137.622 68.4653 137.063 68.3709 136.497 68.2765 cv
136.497 68.9843 136.497 69.6844 136.505 70.3924 cv
136.505 72.0756 136.505 73.7589 136.513 75.4422 cv
135.624 73.7589 134.735 72.0756 133.846 70.3924 cv
133.571 69.8732 133.303 69.3541 133.028 68.8349 cv
132.816 69.3541 132.611 69.8732 132.399 70.3924 cv
132.037 71.3048 131.667 72.2093 131.306 73.1217 cv
131.14 72.2093 130.975 71.3048 130.81 70.3924 cv
130.621 69.3383 130.425 68.2843 130.236 67.2382 cv
129.441 67.9697 128.655 68.7012 127.868 69.4327 cv
127.963 68.6933 128.065 67.9461 128.206 67.2067 cv
128.403 66.1056 128.678 65.0358 129.127 64.0447 cv
139.517 64.0447 li
139.816 64.32 140.099 64.6031 140.39 64.8864 cv
139.407 64.9178 138.424 64.9493 137.441 64.9887 cv
cp
.584314 .756863 .121569 rgb
f
150.844 74.6319 mo
148.539 73.2949 146.227 71.9576 143.922 70.6126 cv
144.245 71.997 144.567 73.3735 144.89 74.7579 cv
143.458 73.2949 142.019 71.8475 140.587 70.3924 cv
140.257 70.062 139.934 69.7237 139.604 69.3934 cv
139.604 69.7237 139.612 70.062 139.612 70.3924 cv
139.612 71.0137 139.612 71.6272 139.62 72.2487 cv
139.384 71.6272 139.14 71.0059 138.896 70.3924 cv
138.66 69.7789 138.424 69.1653 138.188 68.5596 cv
137.85 67.6944 137.519 66.8292 137.181 65.964 cv
136.945 65.3583 136.709 64.6897 136.67 64.0447 cv
146.958 64.0447 li
147.422 64.2099 147.879 64.3751 148.343 64.5403 cv
147.43 64.6583 146.518 64.7763 145.605 64.8942 cv
147.761 66.6011 149.916 68.3079 152.063 70.0148 cv
150.262 69.7789 148.469 69.5507 146.667 69.3147 cv
146.95 69.6766 147.234 70.0306 147.517 70.3924 cv
148.626 71.8082 149.735 73.224 150.844 74.6319 cv
cp
.501961 .65098 .105882 rgb
f
35.4264 387.312 mo
32.9627 387.657 li
27.3213 347.435 li
29.785 347.09 li
35.4264 387.312 li
cp
.913725 .305882 .105882 rgb
f
59.5022 380.942 mo
57.8259 392.548 li
57.4293 395.35 li
55.8553 406.278 li
55.4459 409.08 li
53.0657 425.587 li
29.4317 425.587 li
27.0516 409.08 li
26.6421 406.278 li
25.0681 395.35 li
24.6715 392.548 li
22.9952 380.942 li
59.5022 380.942 li
cp
f
54.763 373.248 mo
27.7403 373.248 li
26.1694 373.248 24.7936 374.301 24.3836 375.818 cv
22.999 380.94 li
59.5044 380.94 li
58.1196 375.818 li
57.7097 374.301 56.3339 373.248 54.763 373.248 cv
cp
.964706 .964706 .964706 rgb
f
60.3256 377.593 mo
22.1777 377.593 li
21.4093 377.593 20.7864 378.216 20.7864 378.985 cv
20.7864 380.94 li
61.7169 380.94 li
61.7169 378.985 li
61.7169 378.216 61.0941 377.593 60.3256 377.593 cv
cp
.929412 .929412 .929412 rgb
f
57.8259 392.548 mo
57.4293 395.35 li
55.8553 406.278 li
55.4459 409.08 li
27.0516 409.08 li
26.6421 406.278 li
25.0681 395.35 li
24.6715 392.548 li
57.8259 392.548 li
cp
1 1 1 rgb
f
57.4293 395.35 mo
55.8553 406.278 li
26.6421 406.278 li
25.0681 395.35 li
57.4293 395.35 li
cp
.976471 .698039 .2 rgb
f
52.5384 400.814 mo
52.5384 407.047 47.4852 412.1 41.2517 412.1 cv
35.0182 412.1 29.9649 407.047 29.9649 400.814 cv
29.9649 394.58 35.0182 389.527 41.2517 389.527 cv
47.4852 389.527 52.5384 394.58 52.5384 400.814 cv
cp
1 1 1 rgb
f
49.8713 400.814 mo
49.8713 405.574 46.0121 409.433 41.2517 409.433 cv
36.4912 409.433 32.6321 405.574 32.6321 400.814 cv
32.6321 396.053 36.4912 392.194 41.2517 392.194 cv
46.0121 392.194 49.8713 396.053 49.8713 400.814 cv
cp
.976471 .698039 .2 rgb
f
46.6393 400.814 mo
46.6393 403.789 44.2272 406.201 41.2517 406.201 cv
38.2762 406.201 35.864 403.789 35.864 400.814 cv
35.864 397.838 38.2762 395.426 41.2517 395.426 cv
44.2272 395.426 46.6393 397.838 46.6393 400.814 cv
cp
.913725 .305882 .105882 rgb
f
167.308 154.516 mo
164.579 155.358 li
167.174 132.664 li
169.689 131.254 li
167.308 154.516 li
cp
.85098 .607843 .172549 rgb
f
164.579 155.358 mo
160.117 153.588 li
163.077 129.809 li
167.174 132.664 li
164.579 155.358 li
cp
.976471 .698039 .2 rgb
f
167.196 129.553 mo
163.077 129.809 li
167.174 132.664 li
169.689 131.254 li
167.196 129.553 li
cp
1 .737255 .270588 rgb
f
173.791 162.356 mo
170.939 162.518 li
178.905 141.11 li
181.685 140.345 li
173.791 162.356 li
cp
.85098 .607843 .172549 rgb
f
170.939 162.518 mo
167.033 159.729 li
175.612 137.355 li
178.905 141.11 li
170.939 162.518 li
cp
.976471 .698039 .2 rgb
f
179.672 138.095 mo
175.612 137.355 li
178.905 141.11 li
181.685 140.345 li
179.672 138.095 li
cp
1 .737255 .270588 rgb
f
168.405 161.827 mo
165.559 162.074 li
173.937 138.429 li
175.64 139.591 li
168.405 161.827 li
cp
.85098 .607843 .172549 rgb
f
165.559 162.074 mo
162.934 161.105 li
169.481 136.783 li
173.937 138.429 li
165.559 162.074 li
cp
.976471 .698039 .2 rgb
f
164.517 163.953 mo
161.769 164.73 li
164.903 142.104 li
167.451 140.754 li
164.517 163.953 li
cp
.85098 .607843 .172549 rgb
f
161.769 164.73 mo
157.35 162.853 li
160.875 139.152 li
164.903 142.104 li
161.769 164.73 li
cp
.976471 .698039 .2 rgb
f
164.999 138.994 mo
160.875 139.152 li
164.903 142.104 li
167.451 140.754 li
164.999 138.994 li
cp
1 .737255 .270588 rgb
f
159.974 156.213 mo
157.313 157.12 li
158.739 134.324 li
160.698 134.932 li
159.974 156.213 li
cp
.85098 .607843 .172549 rgb
f
157.313 157.12 mo
154.523 156.904 li
154.003 133.958 li
158.739 134.324 li
157.313 157.12 li
cp
.976471 .698039 .2 rgb
f
150.847 153.448 mo
148.229 154.588 li
148.284 131.746 li
150.627 130.065 li
150.847 153.448 li
cp
.85098 .607843 .172549 rgb
f
148.229 154.588 mo
143.598 153.325 li
143.895 129.365 li
148.284 131.746 li
148.229 154.588 li
cp
.976471 .698039 .2 rgb
f
147.96 128.652 mo
143.895 129.365 li
148.284 131.746 li
150.627 130.065 li
147.96 128.652 li
cp
1 .737255 .270588 rgb
f
144.15 154.648 mo
141.567 155.866 li
141.233 130.783 li
143.233 131.283 li
144.15 154.648 li
cp
.85098 .607843 .172549 rgb
f
141.567 155.866 mo
138.768 155.866 li
136.483 130.783 li
141.233 130.783 li
141.567 155.866 li
cp
.976471 .698039 .2 rgb
f
153.67 155.113 mo
150.922 155.893 li
152.449 131.696 li
155.835 133.143 li
153.67 155.113 li
cp
.85098 .607843 .172549 rgb
f
150.922 155.893 mo
148.161 155.436 li
149.852 132.408 li
152.449 131.696 li
150.922 155.893 li
cp
.976471 .698039 .2 rgb
f
158.918 160.317 mo
156.737 161.783 li
162.471 140.555 li
165.169 139.54 li
158.918 160.317 li
cp
.85098 .607843 .172549 rgb
f
156.737 161.783 mo
153.344 160.762 li
159.291 138.978 li
162.471 140.555 li
156.737 161.783 li
cp
.976471 .698039 .2 rgb
f
162.96 137.483 mo
159.291 138.978 li
162.471 140.555 li
165.169 139.54 li
162.96 137.483 li
cp
1 .737255 .270588 rgb
f
142.702 158.159 mo
140.393 159.84 li
135.495 137.529 li
137.417 135.38 li
142.702 158.159 li
cp
.85098 .607843 .172549 rgb
f
140.393 159.84 mo
135.598 159.61 li
130.693 136.156 li
135.495 137.529 li
140.393 159.84 li
cp
.976471 .698039 .2 rgb
f
134.507 134.579 mo
130.693 136.156 li
135.495 137.529 li
137.417 135.38 li
134.507 134.579 li
cp
1 .737255 .270588 rgb
f
137.213 162.898 mo
134.859 164.515 li
130.507 139.809 li
132.561 139.982 li
137.213 162.898 li
cp
.85098 .607843 .172549 rgb
f
134.859 164.515 mo
132.097 164.963 li
125.819 140.571 li
130.507 139.809 li
134.859 164.515 li
cp
.976471 .698039 .2 rgb
f
144.618 161.217 mo
141.87 161.997 li
143.398 137.8 li
146.783 139.247 li
144.618 161.217 li
cp
.85098 .607843 .172549 rgb
f
141.87 161.997 mo
139.11 161.54 li
140.8 138.512 li
143.398 137.8 li
141.87 161.997 li
cp
.976471 .698039 .2 rgb
f
150.119 165.486 mo
148.452 167.518 li
147.827 145.539 li
150.119 143.789 li
150.119 165.486 li
cp
.85098 .607843 .172549 rgb
f
148.452 167.518 mo
144.909 167.518 li
144.327 144.945 li
147.827 145.539 li
148.452 167.518 li
cp
.976471 .698039 .2 rgb
f
147.41 142.456 mo
144.327 144.945 li
147.827 145.539 li
150.119 143.789 li
147.41 142.456 li
cp
1 .737255 .270588 rgb
f
156.714 162.84 mo
155.047 164.872 li
154.422 142.893 li
156.714 141.143 li
156.714 162.84 li
cp
.85098 .607843 .172549 rgb
f
155.047 164.872 mo
151.504 164.872 li
150.922 142.298 li
154.422 142.893 li
155.047 164.872 li
cp
.976471 .698039 .2 rgb
f
154.005 139.809 mo
150.922 142.298 li
154.422 142.893 li
156.714 141.143 li
154.005 139.809 li
cp
1 .737255 .270588 rgb
f
153.845 170.627 mo
151.098 171.407 li
152.625 147.209 li
156.01 148.657 li
153.845 170.627 li
cp
.85098 .607843 .172549 rgb
f
151.098 171.407 mo
148.337 170.949 li
150.027 147.921 li
152.625 147.209 li
151.098 171.407 li
cp
.976471 .698039 .2 rgb
f
171.751 203.97 mo
144.716 203.97 li
139.418 157.304 li
177.05 157.304 li
171.751 203.97 li
cp
.8 .266667 .0941176 rgb
f
166.55 157.3 mo
165.17 169.47 li
164.81 172.64 li
163.14 187.37 li
162.78 190.54 li
161.25 203.97 li
134.22 203.97 li
132.69 190.54 li
132.33 187.37 li
130.66 172.64 li
130.3 169.47 li
128.92 157.3 li
166.55 157.3 li
cp
.913725 .305882 .105882 rgb
f
165.17 169.47 mo
164.81 172.64 li
163.14 187.37 li
162.78 190.54 li
132.69 190.54 li
132.33 187.37 li
130.66 172.64 li
130.3 169.47 li
165.17 169.47 li
cp
1 1 1 rgb
f
164.81 172.64 mo
163.14 187.37 li
132.33 187.37 li
130.66 172.64 li
164.81 172.64 li
cp
.976471 .698039 .2 rgb
f
407.153 49.0939 mo
387.791 60.4155 365.126 61.91 344.324 53.5229 cv
340.793 52.1016 338.374 48.8348 340.194 43.9322 cv
341.698 39.8808 345.332 38.7964 349.651 40.3006 cv
366.366 47.0396 385.29 45.657 400.848 36.56 cv
404.677 34.3433 408.871 34.7081 410.913 38.9357 cv
412.469 42.1556 412.012 46.0955 407.153 49.0939 cv
.807843 .486275 .537255 rgb
f
gsave
353.338 56.5129 mo
350.305 55.7178 347.295 54.7213 344.323 53.5229 cv
343.483 53.1848 342.706 52.7423 342.035 52.1982 cv
342.707 52.7422 343.484 53.1848 344.324 53.5229 cv
347.296 54.7213 350.305 55.7178 353.338 56.5129 cv
353.338 56.5129 li
342.03 52.194 mo
342.028 52.1926 342.026 52.1914 342.025 52.19 cv
342.026 52.1914 342.028 52.1926 342.03 52.194 cv
clp
342.025 52.19 mo
353.338 52.19 li
353.338 56.5129 li
342.025 56.5129 li
cp
.908435 .908435 .907636 rgb
f
grestore
353.338 56.5129 mo
350.305 55.7178 347.296 54.7213 344.324 53.5229 cv
343.484 53.1848 342.707 52.7422 342.035 52.1982 cv
342.033 52.1968 342.031 52.1953 342.03 52.194 cv
342.028 52.1926 342.026 52.1914 342.025 52.19 cv
340.221 50.7235 339.179 48.5219 339.716 45.6408 cv
339.992 48.4206 341.925 50.3549 344.424 51.3607 cv
350.329 53.7416 356.38 55.3257 362.467 56.1152 cv
361.632 56.1513 360.795 56.1695 359.956 56.1695 cv
358.854 56.1695 357.747 56.1381 356.641 56.075 cv
356.599 56.0746 356.557 56.0744 356.516 56.0744 cv
355.35 56.0744 354.283 56.2212 353.338 56.5129 cv
.737255 .447059 .490196 rgb
f
341.37 45.1221 mo
336.629 46.0154 li
338.501 40.0499 li
341.37 45.1221 li
cp
.807843 .486275 .537255 rgb
f
409.01 38.2362 mo
410.21 33.5635 li
414.82 37.7868 li
409.01 38.2362 li
cp
f
413.927 45.9734 mo
399.215 62.9036 378.225 71.5843 355.832 70.3073 cv
352.032 70.0926 348.694 67.7733 348.846 62.5461 cv
348.972 58.2266 352.067 56.0344 356.641 56.075 cv
374.633 57.101 392.116 49.7252 403.937 36.1217 cv
406.854 32.7948 410.944 31.7958 414.233 35.1459 cv
416.738 37.6974 417.569 41.5757 413.927 45.9734 cv
.952941 .572549 .635294 rgb
f
360.144 70.4308 mo
358.714 70.4308 357.275 70.3898 355.831 70.3075 cv
354.915 70.2557 354.025 70.0814 353.205 69.7732 cv
354.025 70.0812 354.915 70.2555 355.832 70.3073 cv
357.277 70.3897 358.713 70.4306 360.145 70.4306 cv
375.796 70.4306 390.594 65.5319 402.826 56.3344 cv
390.593 65.5327 375.796 70.4308 360.144 70.4308 cv
.908435 .908435 .907636 rgb
f
360.145 70.4306 mo
358.713 70.4306 357.277 70.3897 355.832 70.3073 cv
354.915 70.2555 354.025 70.0812 353.205 69.7732 cv
351.037 68.9586 349.355 67.2091 348.941 64.3179 cv
350.094 66.8624 352.545 68.075 355.234 68.2271 cv
356.679 68.3094 358.114 68.3503 359.546 68.3503 cv
380.306 68.3503 399.566 59.7311 413.329 43.893 cv
415.322 41.4862 415.969 39.2371 415.742 37.2738 cv
416.874 39.6506 416.666 42.6649 413.926 45.9736 cv
410.539 49.8714 406.819 53.332 402.826 56.3344 cv
390.594 65.5319 375.796 70.4306 360.145 70.4306 cv
.866667 .52549 .580392 rgb
f
350.342 63.2962 mo
346.138 65.662 li
345.999 59.4113 li
350.342 63.2962 li
cp
.952941 .572549 .635294 rgb
f
412.206 35.0933 mo
411.845 30.2826 li
417.565 32.8054 li
412.206 35.0933 li
cp
f
404.114 417.352 mo
407.988 400.28 407.978 382.337 404.081 365.27 cv
353.422 365.27 li
349.525 382.337 349.515 400.28 353.39 417.352 cv
404.114 417.352 li
1 .823529 .529412 rgb
f
400.608 417.352 mo
404.623 400.222 404.613 382.396 400.576 365.27 cv
356.927 365.27 li
352.89 382.396 352.881 400.222 356.895 417.352 cv
400.608 417.352 li
1 .972549 .929412 rgb
f
392.634 417.352 mo
395.184 400.222 395.178 382.396 392.614 365.27 cv
364.889 365.27 li
362.325 382.396 362.319 400.222 364.869 417.352 cv
392.634 417.352 li
.913725 .305882 .105882 rgb
f
360.848 380.333 mo
359.627 382.068 li
359.905 382.232 367.376 386.225 367.376 386.225 cv
367.376 386.225 361.096 380.54 360.848 380.333 cv
cp
.388235 .305882 .258824 rgb
f
357.607 386.008 mo
357.077 388.062 li
357.408 388.12 366.139 389.304 366.139 389.304 cv
366.139 389.304 357.924 386.117 357.607 386.008 cv
cp
f
357.108 392.445 mo
357.472 394.535 li
357.627 394.505 359.713 393.879 361.841 393.463 cv
362.905 393.286 363.969 393.082 364.771 393.009 cv
365.575 392.913 366.108 392.85 366.108 392.85 cv
366.108 392.85 365.575 392.784 364.77 392.685 cv
363.962 392.563 362.876 392.507 361.769 392.425 cv
359.559 392.32 357.276 392.439 357.108 392.445 cv
cp
f
359.147 398.964 mo
360.166 400.826 li
360.282 400.747 361.89 399.654 363.47 398.58 cv
365.138 397.614 366.776 396.665 366.776 396.665 cv
366.776 396.665 364.926 397.144 363.042 397.631 cv
361.194 398.242 359.287 398.913 359.147 398.964 cv
cp
f
397.905 403.879 mo
399.366 402.341 li
399.075 402.101 391.226 396.07 391.226 396.07 cv
391.226 396.07 397.65 403.6 397.905 403.879 cv
cp
f
400.186 397.235 mo
400.877 395.229 li
400.572 395.152 392.476 393.459 392.476 393.459 cv
392.476 393.459 399.898 397.108 400.186 397.235 cv
cp
f
401.344 389.911 mo
400.877 387.841 li
400.574 387.937 392.732 390.766 392.732 390.766 cv
392.732 390.766 401.03 389.955 401.344 389.911 cv
cp
f
399.791 382.488 mo
398.37 380.912 li
398.144 381.151 392.476 387.656 392.476 387.656 cv
392.476 387.656 399.53 382.687 399.791 382.488 cv
cp
f
390.177 389.914 mo
389.589 390.824 388.617 391.583 387.543 391.549 cv
385.956 391.494 384.882 389.825 383.342 389.448 cv
382.084 389.141 380.784 389.756 379.75 390.543 cv
378.724 391.323 377.821 392.295 376.665 392.883 cv
374.736 393.868 372.218 393.547 370.597 392.11 cv
369.652 391.275 369.05 390.092 368.859 388.853 cv
368.708 387.957 368.784 387.027 369.091 386.171 cv
369.687 384.55 371 383.318 372.054 381.943 cv
372.307 381.608 372.553 381.245 372.765 380.862 cv
372.765 365.27 li
384.738 365.27 li
384.738 379.2 li
384.902 379.439 385.066 379.679 385.258 379.898 cv
386.4 381.225 388.186 381.827 389.431 383.052 cv
390.362 383.982 390.895 385.261 390.984 386.575 cv
391.073 387.738 390.813 388.928 390.177 389.914 cv
1 .905882 .74902 rgb
f
373.988 392.891 mo
373.854 392.891 373.72 392.884 373.585 392.87 cv
372.562 392.766 371.624 392.262 370.767 391.694 cv
370.538 391.542 370.287 391.378 370.018 391.378 cv
369.989 391.378 369.96 391.38 369.931 391.384 cv
369.929 391.384 369.926 391.384 369.924 391.385 cv
369.364 390.649 369 389.766 368.859 388.853 cv
369.926 389.811 371.116 390.584 372.512 390.783 cv
372.781 390.822 373.034 390.84 373.273 390.84 cv
375.12 390.84 376.152 389.735 377.903 388.566 cv
378.717 388.019 379.566 387.444 380.065 386.596 cv
380.784 385.364 380.626 383.818 380.421 382.402 cv
379.881 378.707 380.359 374.657 381.741 371.188 cv
382.282 375.286 382.829 379.385 383.37 383.483 cv
383.541 384.762 383.739 386.103 384.533 387.122 cv
385.219 387.993 386.328 388.45 387.431 388.45 cv
388.285 388.45 389.135 388.176 389.78 387.608 cv
390.163 387.273 390.56 386.842 390.984 386.575 cv
390.996 386.72 391.001 386.866 391.001 387.012 cv
391.002 388.032 390.734 389.052 390.177 389.914 cv
389.653 390.723 388.826 391.414 387.893 391.532 cv
387.729 391.4 387.551 391.282 387.368 391.18 cv
386.801 390.862 386.177 390.656 385.604 390.347 cv
384.514 389.757 383.526 388.768 382.294 388.768 cv
382.276 388.768 382.259 388.769 382.241 388.769 cv
381.531 388.786 380.876 389.144 380.287 389.54 cv
379.227 390.254 378.274 391.122 377.195 391.808 cv
376.231 392.421 375.121 392.891 373.988 392.891 cv
.909804 .823529 .682353 rgb
f
370.329 393.574 mo
371.366 394.357 372.418 395.146 373.609 395.665 cv
374.801 396.185 376.163 396.419 377.41 396.052 cv
378.351 395.775 379.162 395.18 379.933 394.573 cv
380.705 393.967 381.471 393.33 382.373 392.945 cv
383.275 392.559 384.355 392.457 385.216 392.927 cv
385.685 393.183 386.054 393.587 386.49 393.896 cv
386.926 394.204 387.494 394.419 387.992 394.225 cv
388.598 393.989 388.85 393.203 388.657 392.582 cv
388.464 391.961 387.936 391.498 387.368 391.18 cv
386.801 390.862 386.177 390.656 385.604 390.347 cv
384.498 389.749 383.498 388.74 382.241 388.769 cv
381.531 388.786 380.876 389.144 380.287 389.54 cv
379.227 390.254 378.274 391.122 377.195 391.808 cv
376.116 392.493 374.857 393 373.585 392.87 cv
372.562 392.766 371.624 392.262 370.767 391.694 cv
370.514 391.525 370.232 391.342 369.931 391.384 cv
369.456 391.449 369.231 392.064 369.388 392.517 cv
369.545 392.969 369.947 393.285 370.329 393.574 cv
.643137 .541176 .482353 rgb
f
388.617 397.344 mo
388.33 398.028 387.789 398.644 387.235 399.15 cv
386.312 399.971 385.231 400.723 384.759 401.866 cv
384.738 401.927 li
384.738 417.348 li
372.765 417.348 li
372.765 402.365 li
372.327 401.921 371.787 401.551 371.315 401.141 cv
370.514 400.45 369.878 399.588 369.44 398.63 cv
368.948 397.576 368.695 396.413 368.729 395.25 cv
368.742 394.696 368.845 394.101 369.262 393.731 cv
369.721 393.328 370.432 393.341 371 393.567 cv
371.575 393.793 372.054 394.19 372.587 394.504 cv
374.455 395.606 376.959 395.531 378.765 394.32 cv
379.99 393.492 380.968 392.171 382.419 391.877 cv
383.986 391.556 385.484 392.541 386.777 393.485 cv
387.666 394.128 388.624 394.888 388.809 395.969 cv
388.891 396.441 388.809 396.906 388.617 397.344 cv
1 .905882 .74902 rgb
f
376.597 410.712 mo
375.44 409.392 375.057 407.565 374.941 405.807 cv
374.818 404.055 374.92 402.276 374.551 400.559 cv
374.245 399.177 373.314 397.647 371.926 397.647 cv
371.885 397.647 371.843 397.649 371.801 397.651 cv
370.952 397.706 370.213 398.329 369.44 398.63 cv
369.44 398.63 li
368.979 397.642 368.727 396.558 368.726 395.468 cv
368.726 395.395 368.727 395.323 368.729 395.25 cv
368.742 394.696 368.845 394.101 369.262 393.731 cv
369.52 393.505 369.856 393.41 370.203 393.41 cv
370.474 393.41 370.751 393.468 371 393.567 cv
371.575 393.793 372.054 394.19 372.587 394.504 cv
373.469 395.024 374.492 395.282 375.517 395.282 cv
376.663 395.282 377.811 394.959 378.765 394.32 cv
379.99 393.492 380.968 392.171 382.419 391.877 cv
382.626 391.835 382.831 391.815 383.035 391.815 cv
384.378 391.815 385.654 392.665 386.777 393.485 cv
387.666 394.128 388.624 394.888 388.809 395.969 cv
388.83 396.09 388.84 396.211 388.84 396.332 cv
388.841 396.679 388.759 397.019 388.617 397.344 cv
388.617 397.344 li
388.152 397.337 387.673 397.2 387.249 397.008 cv
386.448 396.646 385.73 396.092 384.882 395.839 cv
384.511 395.731 384.134 395.686 383.754 395.686 cv
382.78 395.686 381.79 395.981 380.845 396.276 cv
379.757 396.612 378.601 397.002 377.924 397.911 cv
377.301 398.753 377.219 399.861 377.158 400.901 cv
376.973 404.172 376.788 407.442 376.597 410.712 cv
.909804 .823529 .682353 rgb
f
387.58 192.642 mo
386.842 194.371 384.874 195.221 383.092 194.61 cv
376.993 192.53 371.089 192.306 365.431 194.423 cv
363.649 195.094 361.636 194.229 360.89 192.47 cv
355.5 179.796 353.711 166.482 355.858 154.516 cv
356.141 152.928 357.334 148.977 358.058 146.561 cv
390.42 146.561 li
391.292 149.402 392.44 153.182 392.679 154.516 cv
394.841 166.541 393.029 179.916 387.58 192.642 cv
.976471 .698039 .2 rgb
f
394.88 154.185 mo
394.125 154.185 393.368 154.185 392.613 154.185 cv
392.277 152.648 391.247 149.256 390.442 146.633 cv
391.288 146.633 392.133 146.633 392.979 146.633 cv
393.79 149.109 394.422 151.631 394.88 154.185 cv
355.923 154.185 mo
355.169 154.185 354.415 154.185 353.661 154.185 cv
354.119 151.631 354.751 149.109 355.562 146.633 cv
356.387 146.633 357.212 146.633 358.036 146.633 cv
357.358 148.898 356.287 152.45 355.923 154.185 cv
.890196 .890196 .890196 rgb
f
392.613 154.185 mo
392.332 154.185 392.053 154.185 391.773 154.185 cv
391.607 153.098 391.414 152.016 391.195 150.942 cv
390.933 149.699 389.441 148.702 387.915 148.702 cv
386.389 148.702 385.307 149.699 385.465 150.942 cv
385.61 152.016 385.737 153.098 385.847 154.185 cv
384.592 154.185 383.335 154.185 382.08 154.185 cv
382.006 153.098 381.92 152.016 381.822 150.942 cv
381.7 149.699 380.345 148.702 378.819 148.702 cv
377.293 148.702 376.074 149.699 376.092 150.942 cv
376.116 152.016 376.136 153.098 376.154 154.185 cv
374.898 154.185 373.643 154.185 372.387 154.185 cv
372.405 153.098 372.425 152.016 372.449 150.942 cv
372.467 149.699 371.248 148.702 369.722 148.702 cv
368.196 148.702 366.841 149.699 366.719 150.942 cv
366.621 152.016 366.535 153.098 366.461 154.185 cv
365.281 154.185 364.102 154.185 362.922 154.185 cv
363.034 153.676 363.152 153.168 363.277 152.664 cv
363.539 151.601 364.274 149.493 364.993 147.497 cv
359.768 147.497 li
359.632 147.933 359.479 148.424 359.318 148.942 cv
358.329 149.31 357.531 150.064 357.346 150.942 cv
357.127 152.016 356.934 153.098 356.768 154.185 cv
356.487 154.185 356.205 154.185 355.923 154.185 cv
356.287 152.45 357.358 148.898 358.036 146.633 cv
368.838 146.633 379.64 146.633 390.442 146.633 cv
391.247 149.256 392.277 152.648 392.613 154.185 cv
.976471 .662745 .101961 rgb
f
387.542 198.104 mo
378.695 198.104 369.847 198.104 360.999 198.104 cv
353.988 184.102 351.067 168.629 353.661 154.185 cv
354.415 154.185 355.169 154.185 355.923 154.185 cv
355.898 154.305 355.876 154.415 355.858 154.516 cv
353.711 166.482 355.5 179.796 360.89 192.47 cv
361.465 193.826 362.792 194.65 364.186 194.65 cv
364.601 194.65 365.022 194.577 365.431 194.423 cv
368.122 193.416 370.869 192.939 373.666 192.939 cv
376.749 192.939 379.895 193.519 383.092 194.61 cv
383.482 194.743 383.88 194.807 384.273 194.807 cv
385.675 194.807 387.003 193.993 387.58 192.642 cv
393.029 179.916 394.841 166.541 392.679 154.516 cv
392.662 154.418 392.639 154.308 392.613 154.185 cv
393.368 154.185 394.125 154.185 394.88 154.185 cv
397.474 168.629 394.554 184.102 387.542 198.104 cv
.921569 .921569 .921569 rgb
f
384.273 194.807 mo
383.88 194.807 383.482 194.743 383.092 194.61 cv
379.895 193.519 376.749 192.939 373.666 192.939 cv
370.869 192.939 368.122 193.416 365.431 194.423 cv
365.022 194.577 364.601 194.65 364.186 194.65 cv
362.792 194.65 361.465 193.826 360.89 192.47 cv
355.5 179.796 353.711 166.482 355.858 154.516 cv
355.876 154.415 355.898 154.305 355.923 154.185 cv
356.205 154.185 356.487 154.185 356.768 154.185 cv
354.963 166.024 356.304 178.553 360.124 190.397 cv
360.543 191.656 361.918 192.667 363.155 192.667 cv
363.825 192.667 364.36 192.37 364.669 191.897 cv
364.973 191.986 365.289 192.036 365.61 192.042 cv
365.483 191.821 365.371 191.588 365.29 191.334 cv
365.097 190.735 364.911 190.136 364.733 189.536 cv
362.487 178.639 361.632 167.194 362.506 156.263 cv
362.633 155.565 362.772 154.873 362.922 154.185 cv
364.102 154.185 365.281 154.185 366.461 154.185 cv
365.656 166.024 366.254 178.553 367.958 190.397 cv
368.153 191.656 369.329 192.667 370.565 192.667 cv
371.802 192.667 372.778 191.656 372.748 190.397 cv
372.337 178.553 372.193 166.024 372.387 154.185 cv
373.643 154.185 374.898 154.185 376.154 154.185 cv
376.349 166.024 376.204 178.553 375.793 190.397 cv
375.763 191.656 376.739 192.667 377.976 192.667 cv
379.213 192.667 380.388 191.656 380.583 190.397 cv
382.287 178.553 382.885 166.024 382.08 154.185 cv
383.335 154.185 384.592 154.185 385.847 154.185 cv
387.041 166.024 386.155 178.553 383.628 190.397 cv
383.373 191.656 384.149 192.667 385.387 192.667 cv
386.623 192.667 387.998 191.656 388.417 190.397 cv
392.238 178.553 393.578 166.024 391.773 154.185 cv
392.053 154.185 392.332 154.185 392.613 154.185 cv
392.639 154.308 392.662 154.418 392.679 154.516 cv
394.841 166.541 393.029 179.916 387.58 192.642 cv
387.003 193.993 385.675 194.807 384.273 194.807 cv
.976471 .67451 .133333 rgb
f
363.155 192.667 mo
361.918 192.667 360.543 191.656 360.124 190.397 cv
356.304 178.553 354.963 166.024 356.768 154.185 cv
356.768 154.185 li
356.934 153.098 357.127 152.016 357.346 150.942 cv
357.531 150.064 358.329 149.31 359.318 148.942 cv
358.655 151.079 357.867 153.682 357.647 154.866 cv
355.576 165.951 357.302 178.286 362.5 190.026 cv
362.912 190.96 363.726 191.621 364.669 191.897 cv
364.36 192.37 363.825 192.667 363.155 192.667 cv
364.733 189.536 mo
361.379 178.255 360.6 166.74 362.506 156.263 cv
361.632 167.194 362.487 178.639 364.733 189.536 cv
.972549 .615686 0 rgb
f
370.565 192.667 mo
369.329 192.667 368.153 191.656 367.958 190.397 cv
366.254 178.553 365.656 166.024 366.461 154.185 cv
366.461 154.185 li
366.535 153.098 366.621 152.016 366.719 150.942 cv
366.841 149.699 368.196 148.702 369.722 148.702 cv
371.248 148.702 372.467 149.699 372.449 150.942 cv
372.425 152.016 372.405 153.098 372.387 154.185 cv
372.387 154.185 li
372.193 166.024 372.337 178.553 372.748 190.397 cv
372.778 191.656 371.802 192.667 370.565 192.667 cv
f
377.976 192.667 mo
376.739 192.667 375.763 191.656 375.793 190.397 cv
376.204 178.553 376.349 166.024 376.154 154.185 cv
376.154 154.185 li
376.136 153.098 376.116 152.016 376.092 150.942 cv
376.074 149.699 377.293 148.702 378.819 148.702 cv
380.345 148.702 381.7 149.699 381.822 150.942 cv
381.92 152.016 382.006 153.098 382.08 154.185 cv
382.08 154.185 li
382.885 166.024 382.287 178.553 380.583 190.397 cv
380.388 191.656 379.213 192.667 377.976 192.667 cv
f
385.387 192.667 mo
384.149 192.667 383.373 191.656 383.628 190.397 cv
386.155 178.553 387.041 166.024 385.847 154.185 cv
385.847 154.185 li
385.737 153.098 385.61 152.016 385.465 150.942 cv
385.307 149.699 386.389 148.702 387.915 148.702 cv
389.441 148.702 390.933 149.699 391.195 150.942 cv
391.414 152.016 391.607 153.098 391.773 154.185 cv
391.773 154.185 li
393.578 166.024 392.238 178.553 388.417 190.397 cv
387.998 191.656 386.623 192.667 385.387 192.667 cv
f
362.922 154.185 mo
362.847 154.185 362.769 154.185 362.694 154.185 cv
362.804 153.098 362.931 152.016 363.076 150.942 cv
363.234 149.699 362.152 148.702 360.626 148.702 cv
360.177 148.702 359.731 148.788 359.318 148.942 cv
359.479 148.424 359.632 147.933 359.768 147.497 cv
364.993 147.497 li
364.274 149.493 363.539 151.601 363.277 152.664 cv
363.152 153.168 363.034 153.676 362.922 154.185 cv
.996078 .933333 .819608 rgb
f
365.61 192.042 mo
365.289 192.036 364.973 191.986 364.669 191.897 cv
364.93 191.498 365.03 190.974 364.913 190.397 cv
364.852 190.111 364.792 189.824 364.733 189.536 cv
364.911 190.136 365.097 190.735 365.29 191.334 cv
365.371 191.588 365.483 191.821 365.61 192.042 cv
362.506 156.263 mo
362.562 155.568 362.624 154.876 362.694 154.185 cv
362.769 154.185 362.847 154.185 362.922 154.185 cv
362.772 154.873 362.633 155.565 362.506 156.263 cv
.996078 .933333 .827451 rgb
f
364.669 191.897 mo
363.726 191.621 362.912 190.96 362.5 190.026 cv
357.302 178.286 355.576 165.951 357.647 154.866 cv
357.867 153.682 358.655 151.079 359.318 148.942 cv
359.731 148.788 360.177 148.702 360.626 148.702 cv
362.152 148.702 363.234 149.699 363.076 150.942 cv
362.931 152.016 362.804 153.098 362.694 154.185 cv
362.694 154.185 li
362.624 154.876 362.562 155.568 362.506 156.263 cv
360.6 166.74 361.379 178.255 364.733 189.536 cv
364.792 189.824 364.852 190.111 364.913 190.397 cv
365.03 190.974 364.93 191.498 364.669 191.897 cv
.996078 .921569 .8 rgb
f
358.859 145.934 mo
358.859 147.504 357.586 148.776 356.017 148.776 cv
354.447 148.776 353.174 147.504 353.174 145.934 cv
353.174 144.364 354.447 143.092 356.017 143.092 cv
357.586 143.092 358.859 144.364 358.859 145.934 cv
cp
.929412 .929412 .929412 rgb
f
365.106 144.545 mo
365.106 146.841 363.245 148.702 360.949 148.702 cv
358.654 148.702 356.793 146.841 356.793 144.545 cv
356.793 142.25 358.654 140.389 360.949 140.389 cv
363.245 140.389 365.106 142.25 365.106 144.545 cv
cp
f
373.676 143.185 mo
373.676 146.273 371.173 148.776 368.085 148.776 cv
364.996 148.776 362.493 146.273 362.493 143.185 cv
362.493 140.097 364.996 137.593 368.085 137.593 cv
371.173 137.593 373.676 140.097 373.676 143.185 cv
cp
f
362.055 141.507 mo
362.055 143.463 360.47 145.049 358.514 145.049 cv
356.558 145.049 354.973 143.463 354.973 141.507 cv
354.973 139.552 356.558 137.966 358.514 137.966 cv
360.47 137.966 362.055 139.552 362.055 141.507 cv
cp
f
365.967 139.597 mo
365.967 141.115 364.736 142.346 363.217 142.346 cv
361.699 142.346 360.468 141.115 360.468 139.597 cv
360.468 138.079 361.699 136.848 363.217 136.848 cv
364.736 136.848 365.967 138.079 365.967 139.597 cv
cp
f
366.649 146.623 mo
366.649 147.771 365.719 148.702 364.571 148.702 cv
363.424 148.702 362.493 147.771 362.493 146.623 cv
362.493 145.476 363.424 144.545 364.571 144.545 cv
365.719 144.545 366.649 145.476 366.649 146.623 cv
cp
f
380.013 145.421 mo
380.013 147.583 378.26 149.335 376.099 149.335 cv
373.937 149.335 372.185 147.583 372.185 145.421 cv
372.185 143.26 373.937 141.507 376.099 141.507 cv
378.26 141.507 380.013 143.26 380.013 145.421 cv
cp
f
378.391 140.464 mo
378.391 142.718 376.564 144.545 374.31 144.545 cv
372.055 144.545 370.228 142.718 370.228 140.464 cv
370.228 138.209 372.055 136.382 374.31 136.382 cv
376.564 136.382 378.391 138.209 378.391 140.464 cv
cp
f
385.903 140.878 mo
385.903 143.67 383.64 145.934 380.848 145.934 cv
378.056 145.934 375.792 143.67 375.792 140.878 cv
375.792 138.086 378.056 135.823 380.848 135.823 cv
383.64 135.823 385.903 138.086 385.903 140.878 cv
cp
f
383.579 146.13 mo
383.579 148.22 381.885 149.915 379.795 149.915 cv
377.705 149.915 376.011 148.22 376.011 146.13 cv
376.011 144.04 377.705 142.346 379.795 142.346 cv
381.885 142.346 383.579 144.04 383.579 146.13 cv
cp
f
388.631 145.399 mo
388.631 147.548 386.889 149.291 384.74 149.291 cv
382.59 149.291 380.848 147.548 380.848 145.399 cv
380.848 143.25 382.59 141.507 384.74 141.507 cv
386.889 141.507 388.631 143.25 388.631 145.399 cv
cp
f
390.823 140.396 mo
390.823 142.235 389.331 143.727 387.492 143.727 cv
385.652 143.727 384.161 142.235 384.161 140.396 cv
384.161 138.556 385.652 137.065 387.492 137.065 cv
389.331 137.065 390.823 138.556 390.823 140.396 cv
cp
f
394.88 145.773 mo
394.88 148.128 392.971 150.038 390.615 150.038 cv
388.259 150.038 386.35 148.128 386.35 145.773 cv
386.35 143.417 388.259 141.507 390.615 141.507 cv
392.971 141.507 394.88 143.417 394.88 145.773 cv
cp
f
373.676 138.551 mo
373.676 140.778 371.87 142.584 369.643 142.584 cv
367.416 142.584 365.61 140.778 365.61 138.551 cv
365.61 136.324 367.416 134.518 369.643 134.518 cv
371.87 134.518 373.676 136.324 373.676 138.551 cv
cp
f
367.214 148.352 mo
367.214 149.776 366.059 150.931 364.635 150.931 cv
363.21 150.931 362.055 149.776 362.055 148.352 cv
362.055 146.927 363.21 145.773 364.635 145.773 cv
366.059 145.773 367.214 146.927 367.214 148.352 cv
cp
f
371.533 150.767 mo
371.533 152.573 370.069 154.037 368.263 154.037 cv
366.457 154.037 364.993 152.573 364.993 150.767 cv
364.993 148.961 366.457 147.497 368.263 147.497 cv
370.069 147.497 371.533 148.961 371.533 150.767 cv
cp
f
374.31 146.75 mo
374.31 148.42 372.956 149.773 371.286 149.773 cv
369.616 149.773 368.263 148.42 368.263 146.75 cv
368.263 145.08 369.616 143.727 371.286 143.727 cv
372.956 143.727 374.31 145.08 374.31 146.75 cv
cp
f
399.34 188.043 mo
398.04 188.043 396.752 187.696 395.619 187.02 cv
393.894 185.991 392.691 184.278 392.317 182.319 cv
392.047 180.904 392.976 179.537 394.391 179.267 cv
395.811 178.998 397.174 179.927 397.443 181.342 cv
397.573 182.02 398.031 182.382 398.292 182.539 cv
398.793 182.837 399.406 182.906 399.974 182.726 cv
401.496 182.244 402.895 180.808 404.132 178.458 cv
406.267 174.402 407.118 169.666 406.529 165.12 cv
406.248 162.956 405.683 161.366 404.8 160.259 cv
403.926 159.161 402.587 158.548 401.541 158.761 cv
401.114 158.849 400.67 159.186 400.413 159.617 cv
400.334 159.75 400.159 160.09 400.245 160.374 cv
400.658 161.755 399.875 163.209 398.495 163.624 cv
397.113 164.036 395.66 163.254 395.246 161.874 cv
394.759 160.251 395.002 158.5 395.931 156.944 cv
396.933 155.264 398.637 154.032 400.487 153.65 cv
403.471 153.036 406.766 154.352 408.881 157.006 cv
410.374 158.879 411.297 161.314 411.704 164.449 cv
412.431 170.051 411.382 175.89 408.75 180.889 cv
406.85 184.499 404.427 186.791 401.549 187.701 cv
400.827 187.93 400.081 188.043 399.34 188.043 cv
cp
f
184.448 307.342 mo
159.085 307.342 li
155.485 307.342 152.568 304.424 152.568 300.824 cv
152.568 257.065 li
152.568 253.466 155.485 250.548 159.085 250.548 cv
184.448 250.548 li
188.047 250.548 190.965 253.466 190.965 257.065 cv
190.965 300.824 li
190.965 304.424 188.047 307.342 184.448 307.342 cv
f
171.172 262.546 mo
170.979 262.738 170.776 262.913 170.559 263.065 cv
168.681 264.406 166.063 264.232 164.377 262.546 cv
162.691 260.86 162.517 258.243 163.858 256.364 cv
164.011 256.147 164.185 255.944 164.377 255.752 cv
164.569 255.559 164.776 255.382 164.993 255.229 cv
166.871 253.895 169.489 254.062 171.175 255.748 cv
172.861 257.434 173.028 260.052 171.694 261.93 cv
171.541 262.148 171.364 262.354 171.172 262.546 cv
.823529 .521569 .572549 rgb
f
gsave
167.774 263.956 mo
167.742 263.956 167.711 263.955 167.679 263.955 cv
167.711 263.955 167.742 263.956 167.774 263.956 cv
167.774 263.956 li
167.929 263.953 mo
168.686 263.929 169.438 263.726 170.118 263.345 cv
169.438 263.726 168.686 263.929 167.929 263.953 cv
clp
167.679 263.345 mo
170.118 263.345 li
170.118 263.956 li
167.679 263.956 li
cp
.886274 .886274 .886274 rgb
f
grestore
167.774 263.956 mo
167.742 263.956 167.711 263.955 167.679 263.955 cv
166.482 263.931 165.292 263.462 164.377 262.546 cv
164.185 262.355 164.016 262.15 163.864 261.937 cv
164.697 262.533 165.676 262.832 166.655 262.832 cv
167.63 262.832 168.605 262.536 169.436 261.942 cv
169.654 261.79 169.857 261.616 170.049 261.424 cv
170.241 261.232 170.419 261.025 170.571 260.807 cv
171.754 259.143 171.755 256.898 170.566 255.235 cv
170.779 255.387 170.984 255.556 171.175 255.748 cv
172.114 256.686 172.581 257.914 172.582 259.141 cv
172.582 260.119 172.285 261.097 171.694 261.93 cv
171.541 262.148 171.364 262.354 171.172 262.546 cv
171.172 262.546 li
170.982 262.735 170.783 262.907 170.569 263.058 cv
170.566 263.06 170.562 263.062 170.559 263.065 cv
170.559 263.065 li
170.416 263.167 170.269 263.26 170.118 263.345 cv
169.438 263.726 168.686 263.929 167.929 263.953 cv
167.877 263.955 167.826 263.956 167.774 263.956 cv
.788235 .501961 .54902 rgb
f
185.673 262.546 mo
185.48 262.738 185.277 262.913 185.06 263.065 cv
183.182 264.406 180.564 264.232 178.878 262.546 cv
177.192 260.86 177.018 258.243 178.359 256.364 cv
178.511 256.147 178.685 255.944 178.878 255.752 cv
179.07 255.559 179.276 255.382 179.494 255.229 cv
181.372 253.895 183.99 254.062 185.676 255.748 cv
187.362 257.434 187.529 260.052 186.195 261.93 cv
186.042 262.148 185.865 262.354 185.673 262.546 cv
.823529 .521569 .572549 rgb
f
182.275 263.956 mo
182.273 263.956 182.272 263.956 182.271 263.956 cv
182.272 263.956 182.273 263.956 182.275 263.956 cv
182.275 263.956 li
182.279 263.956 mo
183.25 263.955 184.22 263.661 185.049 263.073 cv
184.22 263.661 183.25 263.955 182.279 263.956 cv
.886274 .886274 .886274 rgb
f
182.275 263.956 mo
182.273 263.956 182.272 263.956 182.271 263.956 cv
181.044 263.955 179.816 263.485 178.878 262.546 cv
178.878 262.546 li
178.878 262.546 li
178.686 262.355 178.517 262.15 178.364 261.937 cv
179.198 262.533 180.177 262.832 181.156 262.832 cv
182.131 262.832 183.106 262.536 183.937 261.942 cv
184.155 261.79 184.358 261.616 184.55 261.424 cv
184.742 261.232 184.92 261.025 185.072 260.807 cv
186.255 259.143 186.255 256.898 185.067 255.235 cv
185.28 255.387 185.485 255.556 185.676 255.748 cv
186.615 256.686 187.082 257.914 187.083 259.141 cv
187.083 260.119 186.786 261.097 186.195 261.93 cv
186.042 262.148 185.865 262.354 185.673 262.546 cv
185.673 262.546 li
185.48 262.738 185.277 262.913 185.06 263.065 cv
185.06 263.065 li
185.06 263.065 li
185.056 263.067 185.052 263.07 185.049 263.073 cv
184.22 263.661 183.25 263.955 182.279 263.956 cv
182.277 263.956 182.276 263.956 182.275 263.956 cv
.788235 .501961 .54902 rgb
f
171.172 275.744 mo
170.979 275.936 170.776 276.11 170.559 276.262 cv
168.681 277.604 166.063 277.43 164.377 275.744 cv
162.691 274.058 162.517 271.44 163.858 269.562 cv
164.011 269.344 164.185 269.141 164.377 268.949 cv
164.569 268.757 164.776 268.579 164.993 268.427 cv
166.871 267.093 169.489 267.259 171.175 268.945 cv
172.861 270.631 173.028 273.249 171.694 275.127 cv
171.541 275.345 171.364 275.552 171.172 275.744 cv
.823529 .521569 .572549 rgb
f
168.726 277.058 mo
168.731 277.057 168.736 277.056 168.741 277.055 cv
168.736 277.056 168.731 277.057 168.726 277.058 cv
168.741 277.055 mo
169.232 276.954 169.711 276.776 170.157 276.52 cv
169.711 276.776 169.232 276.954 168.741 277.055 cv
171.175 268.945 mo
171.172 268.942 171.169 268.939 171.166 268.936 cv
171.169 268.939 171.172 268.942 171.175 268.945 cv
.886274 .886274 .886274 rgb
f
167.774 277.153 mo
166.545 277.153 165.316 276.683 164.377 275.744 cv
164.185 275.552 164.016 275.348 163.864 275.135 cv
164.697 275.731 165.676 276.029 166.655 276.029 cv
167.63 276.029 168.605 275.733 169.436 275.14 cv
169.654 274.987 169.857 274.813 170.049 274.621 cv
170.241 274.429 170.419 274.222 170.571 274.005 cv
171.754 272.34 171.755 270.095 170.566 268.432 cv
170.775 268.582 170.977 268.748 171.166 268.936 cv
171.169 268.939 171.172 268.942 171.175 268.945 cv
171.175 268.945 li
172.114 269.884 172.581 271.111 172.582 272.339 cv
172.582 273.317 172.285 274.295 171.694 275.127 cv
171.541 275.345 171.364 275.552 171.172 275.744 cv
170.979 275.936 170.776 276.11 170.559 276.262 cv
170.559 276.262 li
170.428 276.355 170.294 276.441 170.157 276.52 cv
169.711 276.776 169.232 276.954 168.741 277.055 cv
168.741 277.055 li
168.736 277.056 168.731 277.057 168.726 277.058 cv
168.412 277.121 168.093 277.153 167.774 277.153 cv
.788235 .501961 .54902 rgb
f
185.673 275.744 mo
185.48 275.936 185.277 276.11 185.06 276.262 cv
183.182 277.604 180.564 277.43 178.878 275.744 cv
177.192 274.058 177.018 271.44 178.359 269.562 cv
178.511 269.344 178.685 269.141 178.878 268.949 cv
179.07 268.757 179.276 268.579 179.494 268.427 cv
181.372 267.093 183.99 267.259 185.676 268.945 cv
187.362 270.631 187.529 273.249 186.195 275.127 cv
186.042 275.345 185.865 275.552 185.673 275.744 cv
.823529 .521569 .572549 rgb
f
183.056 277.089 mo
183.751 276.975 184.426 276.707 185.027 276.285 cv
184.426 276.707 183.751 276.975 183.056 277.089 cv
185.042 276.275 mo
185.048 276.27 185.054 276.266 185.06 276.262 cv
185.06 276.262 li
185.06 276.262 li
185.054 276.266 185.048 276.27 185.042 276.275 cv
185.676 268.945 mo
185.673 268.942 185.67 268.939 185.667 268.936 cv
185.67 268.939 185.673 268.942 185.676 268.945 cv
.886274 .886274 .886274 rgb
f
182.275 277.153 mo
181.046 277.153 179.817 276.683 178.878 275.744 cv
178.878 275.744 li
178.878 275.744 li
178.686 275.552 178.517 275.348 178.364 275.135 cv
179.198 275.731 180.177 276.029 181.156 276.029 cv
182.131 276.029 183.106 275.733 183.937 275.14 cv
184.155 274.987 184.358 274.813 184.55 274.621 cv
184.742 274.429 184.92 274.222 185.072 274.005 cv
186.255 272.34 186.255 270.095 185.067 268.432 cv
185.276 268.582 185.478 268.748 185.667 268.936 cv
185.67 268.939 185.673 268.942 185.676 268.945 cv
185.676 268.945 li
186.615 269.884 187.082 271.111 187.083 272.339 cv
187.083 273.317 186.786 274.295 186.195 275.127 cv
186.042 275.345 185.865 275.552 185.673 275.744 cv
185.667 275.75 185.661 275.756 185.655 275.762 cv
185.468 275.947 185.27 276.115 185.06 276.262 cv
185.06 276.262 li
185.054 276.266 185.048 276.27 185.042 276.275 cv
185.037 276.278 185.032 276.282 185.027 276.285 cv
184.426 276.707 183.751 276.975 183.056 277.089 cv
182.798 277.132 182.536 277.153 182.275 277.153 cv
.788235 .501961 .54902 rgb
f
171.172 288.941 mo
170.979 289.133 170.776 289.307 170.559 289.46 cv
168.681 290.801 166.063 290.627 164.377 288.941 cv
162.691 287.255 162.517 284.637 163.858 282.759 cv
164.011 282.542 164.185 282.339 164.377 282.146 cv
164.569 281.954 164.776 281.777 164.993 281.624 cv
166.871 280.29 169.489 280.457 171.175 282.143 cv
172.861 283.829 173.028 286.447 171.694 288.325 cv
171.541 288.542 171.364 288.749 171.172 288.941 cv
.823529 .521569 .572549 rgb
f
167.774 290.351 mo
167.41 290.351 167.047 290.31 166.691 290.227 cv
167.047 290.31 167.41 290.351 167.774 290.351 cv
168.75 290.351 169.727 290.054 170.559 289.46 cv
170.562 289.457 170.566 289.455 170.569 289.453 cv
170.566 289.455 170.562 289.457 170.559 289.46 cv
169.727 290.054 168.75 290.351 167.774 290.351 cv
171.175 282.143 mo
171.172 282.14 171.169 282.137 171.166 282.133 cv
171.169 282.137 171.172 282.14 171.175 282.143 cv
.886274 .886274 .886274 rgb
f
167.774 290.351 mo
167.41 290.351 167.047 290.31 166.691 290.227 cv
165.844 290.032 165.038 289.603 164.377 288.941 cv
164.185 288.75 164.016 288.545 163.864 288.332 cv
164.697 288.928 165.676 289.227 166.655 289.227 cv
167.63 289.227 168.605 288.931 169.436 288.337 cv
169.654 288.185 169.857 288.011 170.049 287.819 cv
170.241 287.626 170.419 287.42 170.571 287.202 cv
171.754 285.537 171.755 283.293 170.566 281.63 cv
170.775 281.78 170.977 281.946 171.166 282.133 cv
171.169 282.137 171.172 282.14 171.175 282.143 cv
171.175 282.143 li
172.114 283.081 172.581 284.309 172.582 285.536 cv
172.582 286.514 172.285 287.492 171.694 288.325 cv
171.541 288.542 171.364 288.749 171.172 288.941 cv
171.172 288.941 li
170.982 289.13 170.783 289.302 170.569 289.453 cv
170.566 289.455 170.562 289.457 170.559 289.46 cv
169.727 290.054 168.75 290.351 167.774 290.351 cv
.788235 .501961 .54902 rgb
f
185.673 288.941 mo
185.48 289.133 185.277 289.307 185.06 289.46 cv
183.182 290.801 180.564 290.627 178.878 288.941 cv
177.192 287.255 177.018 284.637 178.359 282.759 cv
178.511 282.542 178.685 282.339 178.878 282.146 cv
179.07 281.954 179.276 281.777 179.494 281.624 cv
181.372 280.29 183.99 280.457 185.676 282.143 cv
187.362 283.829 187.529 286.447 186.195 288.325 cv
186.042 288.542 185.865 288.749 185.673 288.941 cv
.823529 .521569 .572549 rgb
f
182.275 290.351 mo
181.919 290.351 181.564 290.311 181.216 290.233 cv
181.564 290.311 181.919 290.351 182.275 290.351 cv
183.251 290.351 184.228 290.054 185.06 289.46 cv
185.06 289.46 li
185.06 289.46 li
184.228 290.054 183.251 290.351 182.275 290.351 cv
185.676 282.143 mo
185.673 282.14 185.67 282.137 185.667 282.133 cv
185.67 282.137 185.673 282.14 185.676 282.143 cv
.886274 .886274 .886274 rgb
f
182.275 290.351 mo
181.919 290.351 181.564 290.311 181.216 290.233 cv
180.36 290.04 179.545 289.609 178.878 288.941 cv
178.878 288.941 li
178.878 288.941 li
178.686 288.75 178.517 288.545 178.364 288.332 cv
179.198 288.928 180.177 289.227 181.156 289.227 cv
182.131 289.227 183.106 288.931 183.937 288.337 cv
184.155 288.185 184.358 288.011 184.55 287.819 cv
184.742 287.626 184.92 287.42 185.072 287.202 cv
186.255 285.537 186.255 283.293 185.067 281.63 cv
185.276 281.78 185.478 281.946 185.667 282.133 cv
185.67 282.137 185.673 282.14 185.676 282.143 cv
185.676 282.143 li
186.615 283.081 187.082 284.309 187.083 285.536 cv
187.083 286.514 186.786 287.492 186.195 288.325 cv
186.042 288.542 185.865 288.749 185.673 288.941 cv
185.673 288.941 li
185.48 289.133 185.277 289.307 185.06 289.46 cv
185.06 289.46 li
184.228 290.054 183.251 290.351 182.275 290.351 cv
.788235 .501961 .54902 rgb
f
171.172 302.139 mo
170.979 302.331 170.776 302.505 170.559 302.657 cv
168.681 303.999 166.063 303.825 164.377 302.139 cv
162.691 300.453 162.517 297.835 163.858 295.957 cv
164.011 295.739 164.185 295.536 164.377 295.344 cv
164.569 295.152 164.776 294.974 164.993 294.822 cv
166.871 293.487 169.489 293.654 171.175 295.34 cv
172.861 297.026 173.028 299.644 171.694 301.522 cv
171.541 301.74 171.364 301.946 171.172 302.139 cv
.823529 .521569 .572549 rgb
f
168.714 303.455 mo
169.204 303.358 169.682 303.183 170.128 302.931 cv
169.682 303.183 169.204 303.358 168.714 303.455 cv
170.131 302.93 mo
170.137 302.926 170.143 302.923 170.148 302.92 cv
170.143 302.923 170.137 302.926 170.131 302.93 cv
171.175 295.34 mo
171.172 295.337 171.169 295.334 171.166 295.331 cv
171.169 295.334 171.172 295.337 171.175 295.34 cv
.886274 .886274 .886274 rgb
f
167.774 303.548 mo
166.545 303.548 165.316 303.078 164.377 302.139 cv
164.185 301.947 164.016 301.742 163.864 301.529 cv
164.697 302.126 165.676 302.424 166.655 302.424 cv
167.63 302.424 168.605 302.128 169.436 301.535 cv
169.654 301.382 169.857 301.208 170.049 301.016 cv
170.241 300.824 170.419 300.617 170.571 300.4 cv
171.754 298.735 171.755 296.49 170.566 294.827 cv
170.776 294.977 170.977 295.143 171.166 295.331 cv
171.169 295.334 171.172 295.337 171.175 295.34 cv
171.175 295.34 li
172.114 296.279 172.581 297.506 172.582 298.734 cv
172.582 299.711 172.285 300.69 171.694 301.522 cv
171.541 301.74 171.364 301.946 171.172 302.139 cv
170.979 302.331 170.776 302.505 170.559 302.657 cv
170.559 302.657 li
170.426 302.752 170.288 302.84 170.148 302.92 cv
170.143 302.923 170.137 302.926 170.131 302.93 cv
170.13 302.93 170.129 302.931 170.128 302.931 cv
169.682 303.183 169.204 303.358 168.714 303.455 cv
168.404 303.517 168.089 303.548 167.774 303.548 cv
.788235 .501961 .54902 rgb
f
185.673 302.139 mo
185.48 302.331 185.277 302.505 185.06 302.657 cv
183.182 303.999 180.564 303.825 178.878 302.139 cv
177.192 300.453 177.018 297.835 178.359 295.957 cv
178.511 295.739 178.685 295.536 178.878 295.344 cv
179.07 295.152 179.276 294.974 179.494 294.822 cv
181.372 293.487 183.99 293.654 185.676 295.34 cv
187.362 297.026 187.529 299.644 186.195 301.522 cv
186.042 301.74 185.865 301.946 185.673 302.139 cv
.823529 .521569 .572549 rgb
f
183.05 303.485 mo
183.756 303.37 184.441 303.097 185.049 302.665 cv
184.441 303.097 183.756 303.37 183.05 303.485 cv
178.878 302.139 mo
178.878 302.139 li
178.874 302.135 178.871 302.132 178.868 302.129 cv
178.871 302.132 178.874 302.135 178.878 302.139 cv
178.878 302.139 li
178.865 302.126 mo
178.863 302.124 178.861 302.122 178.859 302.12 cv
178.861 302.122 178.863 302.124 178.865 302.126 cv
185.676 295.34 mo
185.673 295.337 185.67 295.334 185.667 295.331 cv
185.67 295.334 185.673 295.337 185.676 295.34 cv
.886274 .886274 .886274 rgb
f
182.275 303.548 mo
181.046 303.548 179.817 303.078 178.878 302.139 cv
178.878 302.139 li
178.874 302.135 178.871 302.132 178.868 302.129 cv
178.867 302.128 178.866 302.127 178.865 302.126 cv
178.863 302.124 178.861 302.122 178.859 302.12 cv
178.675 301.934 178.512 301.736 178.364 301.529 cv
179.198 302.126 180.177 302.424 181.156 302.424 cv
182.131 302.424 183.106 302.128 183.937 301.535 cv
184.155 301.382 184.358 301.208 184.55 301.016 cv
184.742 300.824 184.92 300.617 185.072 300.4 cv
186.255 298.735 186.255 296.49 185.067 294.827 cv
185.276 294.977 185.478 295.143 185.667 295.331 cv
185.67 295.334 185.673 295.337 185.676 295.34 cv
185.676 295.34 li
186.615 296.279 187.082 297.506 187.083 298.734 cv
187.083 299.711 186.786 300.69 186.195 301.522 cv
186.042 301.74 185.865 301.946 185.673 302.139 cv
185.667 302.145 185.661 302.151 185.655 302.157 cv
185.468 302.342 185.27 302.51 185.06 302.657 cv
185.06 302.657 li
185.06 302.657 li
185.056 302.66 185.052 302.662 185.049 302.665 cv
184.441 303.097 183.756 303.37 183.05 303.485 cv
182.794 303.527 182.534 303.548 182.275 303.548 cv
.788235 .501961 .54902 rgb
f
175.025 254.485 mo
174.755 254.485 174.536 254.266 174.536 253.996 cv
174.536 253.018 li
174.536 252.748 174.755 252.53 175.025 252.53 cv
175.295 252.53 175.514 252.748 175.514 253.018 cv
175.514 253.996 li
175.514 254.266 175.295 254.485 175.025 254.485 cv
cp
.698039 .698039 .698039 rgb
f
175.025 259.669 mo
174.755 259.669 174.536 259.45 174.536 259.18 cv
174.536 257.236 li
174.536 256.966 174.755 256.747 175.025 256.747 cv
175.295 256.747 175.514 256.966 175.514 257.236 cv
175.514 259.18 li
175.514 259.45 175.295 259.669 175.025 259.669 cv
cp
175.025 264.853 mo
174.755 264.853 174.536 264.634 174.536 264.364 cv
174.536 262.42 li
174.536 262.15 174.755 261.932 175.025 261.932 cv
175.295 261.932 175.514 262.15 175.514 262.42 cv
175.514 264.364 li
175.514 264.634 175.295 264.853 175.025 264.853 cv
cp
175.025 270.037 mo
174.755 270.037 174.536 269.818 174.536 269.549 cv
174.536 267.604 li
174.536 267.335 174.755 267.116 175.025 267.116 cv
175.295 267.116 175.514 267.335 175.514 267.604 cv
175.514 269.549 li
175.514 269.818 175.295 270.037 175.025 270.037 cv
cp
175.025 275.222 mo
174.755 275.222 174.536 275.003 174.536 274.733 cv
174.536 272.789 li
174.536 272.519 174.755 272.3 175.025 272.3 cv
175.295 272.3 175.514 272.519 175.514 272.789 cv
175.514 274.733 li
175.514 275.003 175.295 275.222 175.025 275.222 cv
cp
175.025 280.405 mo
174.755 280.405 174.536 280.187 174.536 279.917 cv
174.536 277.973 li
174.536 277.703 174.755 277.484 175.025 277.484 cv
175.295 277.484 175.514 277.703 175.514 277.973 cv
175.514 279.917 li
175.514 280.187 175.295 280.405 175.025 280.405 cv
cp
175.025 285.59 mo
174.755 285.59 174.536 285.371 174.536 285.101 cv
174.536 283.157 li
174.536 282.887 174.755 282.668 175.025 282.668 cv
175.295 282.668 175.514 282.887 175.514 283.157 cv
175.514 285.101 li
175.514 285.371 175.295 285.59 175.025 285.59 cv
cp
175.025 290.774 mo
174.755 290.774 174.536 290.555 174.536 290.285 cv
174.536 288.341 li
174.536 288.071 174.755 287.852 175.025 287.852 cv
175.295 287.852 175.514 288.071 175.514 288.341 cv
175.514 290.285 li
175.514 290.555 175.295 290.774 175.025 290.774 cv
cp
175.025 295.958 mo
174.755 295.958 174.536 295.739 174.536 295.469 cv
174.536 293.525 li
174.536 293.255 174.755 293.036 175.025 293.036 cv
175.295 293.036 175.514 293.255 175.514 293.525 cv
175.514 295.469 li
175.514 295.739 175.295 295.958 175.025 295.958 cv
cp
175.025 301.142 mo
174.755 301.142 174.536 300.923 174.536 300.654 cv
174.536 298.709 li
174.536 298.44 174.755 298.221 175.025 298.221 cv
175.295 298.221 175.514 298.44 175.514 298.709 cv
175.514 300.654 li
175.514 300.923 175.295 301.142 175.025 301.142 cv
cp
f
175.025 305.36 mo
174.755 305.36 174.536 305.141 174.536 304.871 cv
174.536 303.894 li
174.536 303.624 174.755 303.405 175.025 303.405 cv
175.295 303.405 175.514 303.624 175.514 303.894 cv
175.514 304.871 li
175.514 305.141 175.295 305.36 175.025 305.36 cv
cp
f
166.644 250.281 mo
166.644 307.342 li
116.538 307.342 li
116.538 250.281 li
166.644 250.281 li
cp
.976471 .796078 .478431 rgb
f
150.058 250.277 mo
116.538 250.277 li
116.538 307.345 li
151.779 307.345 li
158.699 284.962 144.859 275.607 150.058 250.277 cv
cp
.913725 .305882 .105882 rgb
f
156.12 278.893 mo
154.244 270.897 152.307 262.634 154.757 250.691 cv
154.839 250.281 li
152.747 250.281 li
147.55 275.613 161.39 284.962 154.47 307.342 cv
156.612 307.342 li
160.067 295.696 158.15 287.525 156.12 278.893 cv
cp
f
163.498 271.891 mo
160.947 271.891 li
160.947 254.848 li
163.498 254.848 li
163.498 271.891 li
cp
1 1 1 rgb
f
159.27 267.022 mo
157.447 267.022 li
157.447 254.848 li
159.27 254.848 li
159.27 267.022 li
cp
f
144.79 288.935 mo
144.79 294.259 140.474 298.575 135.149 298.575 cv
129.825 298.575 125.509 294.259 125.509 288.935 cv
125.509 283.61 129.825 279.294 135.149 279.294 cv
140.474 279.294 144.79 283.61 144.79 288.935 cv
cp
f
142.227 288.935 mo
142.227 292.844 139.058 296.013 135.149 296.013 cv
131.24 296.013 128.072 292.844 128.072 288.935 cv
128.072 285.026 131.24 281.857 135.149 281.857 cv
139.058 281.857 142.227 285.026 142.227 288.935 cv
cp
.976471 .796078 .478431 rgb
f
143.168 275.095 mo
139.63 275.095 li
139.63 255.235 li
143.168 255.235 li
143.168 275.095 li
cp
1 1 1 rgb
f
137.136 265.484 mo
135.149 265.484 li
135.149 255.235 li
137.136 255.235 li
137.136 265.484 li
cp
f
132.68 270.097 mo
130.694 270.097 li
130.694 255.235 li
132.68 255.235 li
132.68 270.097 li
cp
f
128.225 267.022 mo
126.239 267.022 li
126.239 255.235 li
128.225 255.235 li
128.225 267.022 li
cp
f
34.0841 142.14 mo
31.5823 143.817 29.8161 146.171 28.2783 148.849 cv
27.3675 145.113 26.5896 140.828 26.5762 139.023 cv
26.5681 136.921 li
24.389 138.027 22.1419 139.018 19.8412 139.919 cv
19.9761 143.423 21.6029 150.766 23.4768 155.92 cv
22.9056 156.472 22.284 156.969 21.5905 157.388 cv
17.7672 159.701 12.4516 159.256 9.32842 162.452 cv
8.19214 163.614 7.57214 165.192 7.46049 166.809 cv
4.59462 168.419 2.23524 170.96 1.0111 174.004 cv
-.816962 178.551 -.128567 184.036 2.77144 187.974 cv
2.82796 187.94 li
8.23318 183.968 li
6.70988 181.903 6.33739 178.912 7.29655 176.531 cv
7.748 175.403 8.51523 174.387 9.47443 173.586 cv
10.0613 174.241 10.7383 174.85 11.4605 175.414 cv
18.976 181.305 31.1858 182.399 40.36 178.676 cv
49.5343 174.952 54.8611 166.887 56.3615 158.657 cv
58.4023 147.462 47.9228 132.86 34.0841 142.14 cv
cp
.976471 .796078 .478431 rgb
f
38.0321 174.888 mo
28.4347 177.322 16.4894 174.568 9.8503 167.704 cv
9.21211 167.047 8.62481 166.35 8.13299 165.622 cv
8.04107 165.679 7.8797 165.754 7.66976 165.838 cv
7.60564 166.159 7.5567 166.482 7.53413 166.809 cv
4.66826 168.419 2.30888 170.96 1.08474 174.004 cv
-.743326 178.551 -.0549301 184.036 2.84507 187.974 cv
2.9016 187.94 li
8.30682 183.968 li
6.78351 181.903 6.41103 178.912 7.37019 176.531 cv
7.82164 175.403 8.58887 174.387 9.54807 173.586 cv
10.1349 174.241 10.8119 174.85 11.5341 175.414 cv
19.0496 181.305 31.2594 182.399 40.4336 178.676 cv
49.608 174.952 54.9348 166.887 56.4351 158.657 cv
56.5189 158.197 56.5739 157.731 56.6161 157.261 cv
54.001 165.203 47.6236 172.456 38.0321 174.888 cv
cp
.980392 .709804 .4 rgb
f
76.4963 143.505 mo
68.8305 147.737 li
70.265 148.953 li
64.8726 151.455 li
66.8011 152.694 li
58.957 157.164 li
72.9172 154.755 li
70.4232 153.051 li
75.9039 151.137 li
73.6392 149.692 li
80.8903 147.093 li
76.4963 143.505 li
cp
.87451 .286275 .215686 rgb
f
80.6039 160.442 mo
71.8547 160.09 li
72.4515 161.873 li
66.543 161.219 li
67.5508 163.278 li
58.5255 163.037 li
71.7139 168.21 li
70.4636 165.46 li
76.143 166.663 li
74.9549 164.253 li
82.5033 165.787 li
80.6039 160.442 li
cp
f
76.2566 178.908 mo
69.4567 173.391 li
68.8679 175.177 li
64.5247 171.118 li
64.1007 173.371 li
57.0127 167.778 li
64.4856 179.814 li
65.1289 176.862 li
68.9604 181.224 li
69.45 178.582 li
74.5806 184.327 li
76.2566 178.908 li
cp
f
65.711 191.647 mo
62.1834 183.632 li
60.8435 184.952 li
58.835 179.357 li
57.4286 181.167 li
53.6794 172.953 li
54.8269 187.073 li
56.7477 184.742 li
58.1628 190.372 li
59.8054 188.246 li
61.7436 195.701 li
65.711 191.647 li
cp
f
295.089 90.5834 mo
237.415 90.5834 li
235.037 90.5834 233.045 88.652 232.966 86.2593 cv
232.33 67.0794 231.669 47.1519 230.981 26.4329 cv
230.908 24.2198 232.247 22.2869 234.238 21.6952 cv
255.125 15.4867 277.379 15.4867 298.265 21.6952 cv
300.256 22.2869 301.595 24.2198 301.522 26.4329 cv
299.538 86.2593 li
299.458 88.652 297.467 90.5834 295.089 90.5834 cv
1 .905882 .74902 rgb
f
237.795 85.74 mo
235.823 26.2771 li
245.704 23.361 255.942 21.8828 266.252 21.8828 cv
276.557 21.8828 286.789 23.3598 296.668 26.2736 cv
294.709 85.74 li
237.795 85.74 li
.796078 .733333 .627451 rgb
f
277.484 26.9482 mo
277.183 33.4132 li
277.093 35.3707 li
277.053 36.214 276.37 36.8665 275.537 36.8665 cv
256.955 36.8665 li
256.122 36.8665 255.429 36.214 255.399 35.3707 cv
255.309 33.4132 li
255.008 26.9683 li
254.977 26.1953 255.5 25.5027 256.252 25.3521 cv
263.169 23.9467 269.865 23.9969 276.26 25.342 cv
277.002 25.5027 277.514 26.1853 277.484 26.9482 cv
cp
1 1 1 rgb
f
277.183 30.1395 mo
273.878 26.7649 268.001 25.3817 262.768 26.592 cv
264.917 37.0816 li
276.689 36.6205 li
277.183 30.1395 li
cp
1 .458824 .278431 rgb
f
277.183 33.4132 mo
277.093 35.3707 li
277.053 36.214 276.37 36.8665 275.537 36.8665 cv
256.955 36.8665 li
256.122 36.8665 255.429 36.214 255.399 35.3707 cv
255.309 33.4132 li
256.252 32.3089 257.367 31.3552 258.612 30.5923 cv
258.862 30.4317 259.124 30.2811 259.384 30.1406 cv
261.302 29.1066 263.48 28.4942 265.799 28.4239 cv
265.94 28.4139 266.09 28.4139 266.251 28.4139 cv
266.402 28.4139 266.552 28.4139 266.693 28.4239 cv
269.012 28.4942 271.18 29.1066 273.097 30.1406 cv
273.368 30.2811 273.629 30.4216 273.88 30.5923 cv
275.125 31.3552 276.24 32.3089 277.183 33.4132 cv
cp
.72549 .909804 .929412 rgb
f
260.802 32.5966 mo
260.542 32.7312 260.282 32.8836 260.031 33.0451 cv
258.614 30.5878 li
258.865 30.4353 259.125 30.2829 259.385 30.1395 cv
260.802 32.5966 li
cp
.0196078 .576471 .631373 rgb
f
273.878 30.5878 mo
272.461 33.0451 li
272.201 32.8836 271.95 32.7312 271.681 32.5966 cv
273.098 30.1395 li
273.367 30.2829 273.627 30.4264 273.878 30.5878 cv
cp
f
266.694 28.4264 mo
266.694 31.2693 li
266.542 31.2604 266.398 31.2425 266.246 31.2425 cv
266.094 31.2425 265.95 31.2604 265.798 31.2693 cv
265.798 28.4264 li
265.941 28.4175 266.094 28.4175 266.246 28.4175 cv
266.398 28.4175 266.551 28.4175 266.694 28.4264 cv
cp
f
266.254 27.5932 mo
265.484 24.613 li
267.008 24.613 li
266.254 27.5932 li
cp
.235294 .235294 .231373 rgb
f
266.377 24.8179 mo
263.076 24.8179 259.703 25.163 256.353 25.8443 cv
255.851 25.9443 255.488 26.4198 255.509 26.9491 cv
255.9 35.3467 li
255.921 35.9203 256.384 36.3644 256.956 36.3644 cv
275.537 36.3644 li
276.101 36.3644 276.564 35.9173 276.592 35.3467 cv
276.983 26.9246 li
277.004 26.4021 276.655 25.9414 276.154 25.8325 cv
272.951 25.159 269.661 24.8179 266.377 24.8179 cv
cp
275.537 37.3682 mo
256.956 37.3682 li
255.841 37.3682 254.937 36.4987 254.897 35.3879 cv
254.507 26.9923 li
254.465 25.9551 255.158 25.0601 256.154 24.86 cv
262.97 23.4748 269.804 23.4718 276.362 24.8512 cv
277.345 25.064 278.026 25.9541 277.986 26.9678 cv
277.594 35.3938 li
277.542 36.5006 276.638 37.3682 275.537 37.3682 cv
cp
.341176 .341176 .337255 rgb
f
259.792 82.2684 mo
257.779 82.2684 256.007 80.8731 254.626 79.2124 cv
254.626 79.2124 246.009 69.6621 245.181 56.8909 cv
244.816 51.2617 250.99 48.2391 253.516 47.3507 cv
254.294 47.0771 255 46.9417 255.636 46.9417 cv
257.499 46.9417 258.772 48.0995 259.559 50.3376 cv
259.876 51.2384 259.941 53.42 260 53.42 cv
260.008 53.42 260.017 53.3736 260.026 53.2698 cv
260.692 70.8166 263.216 66.9506 264.604 75.1189 cv
265.104 78.0587 264.116 81.0147 261.302 82.0041 cv
260.786 82.1857 260.282 82.2684 259.792 82.2684 cv
.658823 .607843 .521569 rgb
f
255.639 46.5174 mo
254.459 46.5173 253.296 45.086 252.971 43.1621 cv
252.623 41.107 253.361 39.2683 254.62 39.0551 cv
254.7 39.0415 254.781 39.0349 254.861 39.0349 cv
256.041 39.0349 257.203 40.4664 257.529 42.3902 cv
257.877 44.4453 257.139 46.2841 255.88 46.4971 cv
255.799 46.5107 255.719 46.5174 255.639 46.5174 cv
f
251.489 47.3576 mo
250.728 47.3576 249.856 46.5639 249.407 45.3899 cv
248.884 44.0229 249.131 42.6581 249.958 42.3414 cv
250.075 42.2967 250.197 42.2753 250.322 42.2753 cv
251.083 42.2753 251.955 43.069 252.404 44.243 cv
252.927 45.6099 252.68 46.9747 251.853 47.2915 cv
251.736 47.3362 251.614 47.3576 251.489 47.3576 cv
f
248.415 48.7814 mo
247.794 48.7813 247.065 48.0919 246.679 47.0816 cv
246.233 45.916 246.41 44.7645 247.076 44.5097 cv
247.165 44.4758 247.257 44.4595 247.353 44.4595 cv
247.973 44.4595 248.702 45.149 249.089 46.1594 cv
249.535 47.3251 249.357 48.4766 248.691 48.7312 cv
248.603 48.7651 248.51 48.7814 248.415 48.7814 cv
f
246.011 51.2807 mo
245.39 51.2807 244.662 50.5912 244.275 49.5809 cv
243.829 48.4152 244.007 47.2637 244.672 47.0091 cv
244.761 46.9751 244.854 46.9588 244.949 46.9588 cv
245.57 46.9588 246.299 47.6483 246.685 48.6586 cv
247.131 49.8243 246.953 50.9757 246.288 51.2304 cv
246.199 51.2644 246.106 51.2807 246.011 51.2807 cv
f
244.12 53.9394 mo
243.606 53.9393 243.002 53.3678 242.681 52.5304 cv
242.311 51.564 242.459 50.6095 243.01 50.3984 cv
243.084 50.3702 243.161 50.3567 243.24 50.3567 cv
243.755 50.3567 244.358 50.9282 244.679 51.7657 cv
245.049 52.7321 244.901 53.6866 244.35 53.8977 cv
244.276 53.9259 244.199 53.9394 244.12 53.9394 cv
f
272.699 82.2684 mo
272.209 82.2683 271.705 82.1857 271.189 82.0041 cv
268.376 81.0147 267.387 78.0587 267.887 75.1189 cv
269.275 66.9506 271.799 70.8166 272.465 53.2698 cv
272.474 53.3736 272.483 53.4201 272.492 53.42 cv
272.55 53.4198 272.615 51.2384 272.932 50.3376 cv
273.719 48.0995 274.992 46.9417 276.855 46.9417 cv
277.491 46.9417 278.197 47.0771 278.975 47.3507 cv
281.501 48.2391 287.675 51.2617 287.31 56.8909 cv
286.482 69.6621 277.865 79.2124 277.865 79.2124 cv
276.484 80.8731 274.712 82.2686 272.699 82.2684 cv
f
276.853 46.5174 mo
276.772 46.5174 276.692 46.5107 276.611 46.4971 cv
275.353 46.2841 274.614 44.4453 274.962 42.3902 cv
275.288 40.4664 276.45 39.0349 277.63 39.0349 cv
277.711 39.0349 277.791 39.0415 277.871 39.0551 cv
279.13 39.2683 279.869 41.107 279.521 43.1621 cv
279.195 45.086 278.032 46.5174 276.853 46.5174 cv
f
281.002 47.3576 mo
280.877 47.3576 280.755 47.3362 280.638 47.2915 cv
279.811 46.9747 279.564 45.6099 280.087 44.243 cv
280.537 43.069 281.408 42.2753 282.169 42.2753 cv
282.294 42.2753 282.416 42.2967 282.533 42.3414 cv
283.36 42.6581 283.607 44.0229 283.084 45.3899 cv
282.635 46.5639 281.764 47.3576 281.002 47.3576 cv
f
284.077 48.7814 mo
283.981 48.7814 283.888 48.7651 283.8 48.7312 cv
283.134 48.4766 282.956 47.3251 283.402 46.1594 cv
283.789 45.149 284.518 44.4595 285.138 44.4595 cv
285.234 44.4595 285.327 44.4758 285.415 44.5097 cv
286.081 44.7645 286.259 45.916 285.812 47.0816 cv
285.426 48.0919 284.697 48.7814 284.077 48.7814 cv
f
286.48 51.2807 mo
286.385 51.2807 286.292 51.2644 286.203 51.2304 cv
285.538 50.9757 285.36 49.8243 285.806 48.6586 cv
286.193 47.6483 286.921 46.9588 287.542 46.9588 cv
287.637 46.9588 287.73 46.9751 287.819 47.0091 cv
288.484 47.2637 288.662 48.4152 288.216 49.5809 cv
287.829 50.5912 287.101 51.2807 286.48 51.2807 cv
f
288.371 53.9394 mo
288.292 53.9394 288.215 53.9259 288.142 53.8977 cv
287.59 53.6866 287.443 52.7321 287.812 51.7657 cv
288.133 50.9282 288.737 50.3567 289.251 50.3567 cv
289.33 50.3567 289.407 50.3702 289.481 50.3984 cv
290.032 50.6095 290.18 51.564 289.81 52.5304 cv
289.489 53.3678 288.886 53.9394 288.371 53.9394 cv
f
271.793 298.428 mo
271.793 298.37 li
271.793 296.775 270.5 295.482 268.906 295.482 cv
245.432 295.482 li
243.837 295.482 242.544 296.775 242.544 298.37 cv
242.544 298.428 li
242.544 300.023 243.837 301.316 245.432 301.316 cv
268.906 301.316 li
270.5 301.316 271.793 300.023 271.793 298.428 cv
cp
1 .811765 .623529 rgb
f
272.915 292.752 mo
272.916 292.694 li
272.961 291.1 271.705 289.772 270.11 289.727 cv
246.646 289.072 li
245.052 289.027 243.723 290.283 243.679 291.877 cv
243.677 291.935 li
243.632 293.53 244.889 294.858 246.483 294.903 cv
269.948 295.558 li
271.542 295.603 272.87 294.347 272.915 292.752 cv
cp
f
271.81 304.024 mo
271.808 303.966 li
271.751 302.372 270.413 301.126 268.819 301.183 cv
247.567 301.939 li
245.973 301.995 244.727 303.333 244.784 304.927 cv
244.786 304.985 li
244.842 306.579 246.18 307.825 247.774 307.768 cv
269.027 307.013 li
270.62 306.956 271.867 305.618 271.81 304.024 cv
cp
f
271.773 309.148 mo
271.767 309.096 li
271.595 307.69 270.316 306.69 268.91 306.861 cv
253.625 308.729 li
252.219 308.9 251.219 310.179 251.391 311.586 cv
251.397 311.637 li
251.569 313.043 252.847 314.043 254.253 313.872 cv
269.539 312.004 li
270.945 311.832 271.945 310.554 271.773 309.148 cv
cp
f
300.655 292.672 mo
285.538 292.874 li
284.505 290.012 282.253 287.813 279.458 287.098 cv
278.822 286.939 278.159 286.846 277.484 286.846 cv
273.492 286.846 li
272.723 289.496 li
264.585 289.573 li
263.059 295.559 264.28 306.452 267.702 312.189 cv
275.203 312.189 li
280.596 312.189 283.563 311.396 285.152 309.343 cv
300.655 309.624 li
300.655 292.672 li
cp
.960784 .752941 .54902 rgb
f
300.655 288.937 mo
284.951 289.07 li
283.873 286.39 278.437 284.55 274.593 284.097 cv
271.235 283.702 268.059 283.462 266.088 281.869 cv
261.582 278.229 259.327 284.279 263.937 287.298 cv
265.665 288.43 268.847 289.887 272.917 289.887 cv
270.094 294.681 272.829 300.809 280.582 300.703 cv
280.658 300.706 292.823 300.642 300.655 300.542 cv
300.655 288.937 li
cp
1 .811765 .623529 rgb
f
300.655 309.624 mo
300.655 299.535 li
285.152 299.535 li
286.76 302.938 287.164 306.241 285.152 309.343 cv
300.655 309.624 li
cp
f
253.665 291.217 mo
253.665 291.823 252.47 292.315 250.996 292.315 cv
249.522 292.315 248.327 291.823 248.327 291.217 cv
248.327 290.61 249.522 290.119 250.996 290.119 cv
252.47 290.119 253.665 290.61 253.665 291.217 cv
cp
.913725 .305882 .105882 rgb
f
248.963 290.721 mo
250.538 290.721 li
251.156 280.023 li
248.345 280.023 li
248.963 290.721 li
cp
.698039 .698039 .698039 rgb
f
239.576 273.733 mo
239.576 249.425 li
239.576 246.28 242.124 243.731 245.269 243.731 cv
254.232 243.731 li
257.377 243.731 259.925 246.28 259.925 249.425 cv
259.925 273.733 li
259.925 276.877 257.377 279.426 254.232 279.426 cv
245.269 279.426 li
242.124 279.426 239.576 276.877 239.576 273.733 cv
cp
.929412 .929412 .929412 rgb
f
259.925 261.578 mo
259.925 249.425 li
259.925 246.28 257.377 243.731 254.232 243.731 cv
245.269 243.731 li
242.124 243.731 239.576 246.28 239.576 249.425 cv
239.576 261.578 li
259.925 261.578 li
cp
.854902 .854902 .854902 rgb
f
242.217 262.322 mo
257.283 262.322 li
257.283 273.133 li
257.283 275.305 255.523 277.065 253.351 277.065 cv
246.15 277.065 li
243.978 277.065 242.217 275.305 242.217 273.133 cv
242.217 262.322 li
cp
.788235 .941176 .933333 rgb
f
256.799 262.806 mo
242.702 262.806 li
242.702 273.133 li
242.702 275.034 244.249 276.581 246.15 276.581 cv
253.351 276.581 li
255.252 276.581 256.799 275.034 256.799 273.133 cv
256.799 262.806 li
cp
241.733 261.837 mo
257.768 261.837 li
257.768 273.133 li
257.768 275.569 255.787 277.55 253.351 277.55 cv
246.15 277.55 li
243.714 277.55 241.733 275.569 241.733 273.133 cv
241.733 261.837 li
cp
0 .690196 .658824 rgb
f
238.849 259.478 mo
260.652 259.478 li
260.652 262.806 li
238.849 262.806 li
238.849 259.478 li
cp
.913725 .305882 .105882 rgb
f
245.836 252.574 mo
245.836 244.095 li
245.836 243.974 245.84 243.853 245.85 243.731 cv
253.651 243.731 li
253.66 243.853 253.665 243.974 253.665 244.095 cv
253.665 252.574 li
253.665 253.654 253.224 254.633 252.517 255.341 cv
251.81 256.048 250.831 256.489 249.75 256.489 cv
247.589 256.489 245.836 254.735 245.836 252.574 cv
cp
0 .631373 .6 rgb
f
239.576 249.87 mo
239.576 249.425 li
239.576 246.28 242.124 243.731 245.269 243.731 cv
254.232 243.731 li
257.377 243.731 259.925 246.28 259.925 249.425 cv
259.925 249.87 li
239.576 249.87 li
cp
f
247.358 247.657 mo
247.358 246.336 248.429 245.265 249.75 245.265 cv
251.072 245.265 252.143 246.336 252.143 247.657 cv
252.143 252.563 li
252.143 253.884 251.072 254.955 249.75 254.955 cv
248.429 254.955 247.358 253.884 247.358 252.563 cv
247.358 247.657 li
cp
.964706 .964706 .964706 rgb
f
249.75 246.234 mo
250.535 246.234 251.174 246.872 251.174 247.657 cv
251.174 252.563 li
251.174 253.348 250.535 253.986 249.75 253.986 cv
248.965 253.986 248.327 253.348 248.327 252.563 cv
248.327 247.657 li
248.327 246.872 248.965 246.234 249.75 246.234 cv
cp
.913725 .305882 .105882 rgb
f
247.02 281.766 mo
252.481 281.766 li
252.481 279.426 li
247.02 279.426 li
247.02 281.766 li
cp
.854902 .854902 .854902 rgb
f
244.813 266.535 mo
244.476 267.141 li
244.316 267.253 li
244.16 267.169 li
244.097 266.983 li
244.139 266.834 li
244.223 266.703 li
244.915 265.622 li
244.999 265.524 li
245.125 265.482 li
245.294 265.543 li
245.37 265.715 li
245.37 272.062 li
245.281 272.244 li
245.092 272.304 li
244.898 272.244 li
244.813 272.062 li
244.813 266.535 li
cp
.341176 .341176 .337255 rgb
f
248.38 270.701 mo
246.238 270.701 li
246.073 270.627 li
246.019 270.449 li
246.053 270.291 li
248.169 265.678 li
248.283 265.533 li
248.43 265.492 li
248.607 265.562 li
248.7 265.743 li
248.674 265.865 li
246.727 270.114 li
248.38 270.114 li
248.38 268.316 li
248.464 268.139 li
248.658 268.082 li
248.848 268.139 li
248.936 268.316 li
248.936 270.114 li
249.4 270.114 li
249.56 270.207 li
249.61 270.403 li
249.551 270.608 li
249.4 270.701 li
248.936 270.701 li
248.936 272.062 li
248.848 272.244 li
248.658 272.304 li
248.464 272.244 li
248.38 272.062 li
248.38 270.701 li
cp
f
250.42 271.493 mo
250.521 271.493 250.61 271.535 250.686 271.619 cv
250.762 271.703 250.799 271.807 250.799 271.931 cv
250.799 272.043 250.762 272.143 250.686 272.229 cv
250.61 272.317 250.521 272.36 250.42 272.36 cv
250.308 272.36 250.215 272.317 250.142 272.229 cv
250.069 272.143 250.032 272.043 250.032 271.931 cv
250.032 271.807 250.069 271.703 250.142 271.619 cv
250.215 271.535 250.308 271.493 250.42 271.493 cv
cp
f
254.492 270.366 mo
254.492 270.857 254.386 271.217 254.176 271.447 cv
253.965 271.677 253.671 271.792 253.295 271.792 cv
252.918 271.792 252.624 271.677 252.414 271.447 cv
252.203 271.217 252.097 270.857 252.097 270.366 cv
252.097 267.477 li
252.097 266.992 252.203 266.635 252.414 266.405 cv
252.624 266.175 252.918 266.06 253.295 266.06 cv
253.671 266.06 253.965 266.175 254.176 266.405 cv
254.386 266.635 254.492 266.992 254.492 267.477 cv
254.492 270.366 li
cp
254.914 266.559 mo
254.824 266.307 254.7 266.102 254.543 265.944 cv
254.385 265.785 254.2 265.67 253.986 265.599 cv
253.772 265.528 253.542 265.492 253.295 265.492 cv
253.047 265.492 252.817 265.528 252.604 265.599 cv
252.39 265.67 252.204 265.785 252.047 265.944 cv
251.89 266.102 251.766 266.307 251.676 266.559 cv
251.586 266.81 251.541 267.117 251.541 267.477 cv
251.541 270.366 li
251.541 270.732 251.586 271.041 251.676 271.293 cv
251.766 271.545 251.89 271.75 252.047 271.908 cv
252.204 272.067 252.39 272.182 252.604 272.253 cv
252.817 272.324 253.047 272.36 253.295 272.36 cv
253.542 272.36 253.772 272.324 253.986 272.253 cv
254.2 272.182 254.385 272.067 254.543 271.908 cv
254.7 271.75 254.824 271.545 254.914 271.293 cv
255.003 271.041 255.048 270.732 255.048 270.366 cv
255.048 267.477 li
255.048 267.117 255.003 266.81 254.914 266.559 cv
cp
f
266.371 114.603 mo
265.612 114.614 258.099 114.738 257.292 123.936 cv
256.183 131.487 255.254 135.669 260.346 136.682 cv
261.462 137.017 263.401 137.119 263.457 137.188 cv
269.277 137.189 li
269.333 137.12 271.272 137.019 272.388 136.684 cv
277.48 135.673 276.553 131.49 275.447 123.94 cv
274.643 114.741 267.13 114.615 266.371 114.603 cv
cp
.439216 .258824 .117647 rgb
f
277.867 143.709 mo
279.976 148.188 li
277.961 149.667 275.907 150.921 273.698 151.953 cv
270.599 146.903 li
267.744 142.296 274.437 136.589 277.867 143.709 cv
.913725 .305882 .105882 rgb
f
284.237 157.235 mo
278.352 159.537 li
273.698 151.953 li
275.907 150.921 277.961 149.667 279.976 148.188 cv
284.237 157.235 li
.94902 .760784 .552941 rgb
f
284.208 157.102 mo
290.754 168.528 li
287.954 170.566 li
279.115 160.786 li
275.401 156.533 281.001 152.195 284.208 157.102 cv
cp
f
294.652 172.242 mo
295.071 172.635 li
295.597 173.324 li
295.879 175.245 li
295.919 175.514 296.111 175.699 296.351 175.731 cv
296.443 176.354 li
296.495 176.713 296.819 176.921 297.165 176.819 cv
297.178 176.815 li
297.408 176.696 li
297.58 176.819 297.815 176.844 298.042 176.741 cv
298.056 176.735 li
298.419 176.569 298.624 176.135 298.512 175.766 cv
297.722 173.149 li
297.713 173.127 li
297.684 173.059 li
297.655 173.001 li
297.619 172.95 li
297.572 172.894 li
297.557 172.877 li
295.673 171.09 li
295.408 170.838 294.972 170.89 294.7 171.207 cv
294.69 171.218 li
294.418 171.535 294.387 171.99 294.652 172.242 cv
cp
.909804 .713726 .521569 rgb
f
287.954 170.566 mo
289.191 171.659 li
289.489 171.922 289.836 172.119 290.216 172.24 cv
291.212 172.558 li
291.335 172.597 291.448 172.659 291.547 172.74 cv
293.372 174.233 li
293.653 174.466 294.089 174.386 294.345 174.055 cv
294.354 174.043 li
294.61 173.712 294.589 173.255 294.308 173.023 cv
293.086 172.012 li
294.713 172.287 li
296.77 173.537 li
297.955 175.733 li
298.133 176.063 298.55 176.142 298.886 175.909 cv
298.898 175.901 li
299.234 175.667 299.362 175.211 299.183 174.88 cv
297.702 172.307 li
297.702 172.307 296.264 170.964 295.775 170.592 cv
295.683 170.522 295.538 170.451 295.397 170.368 cv
294.811 170.024 293.146 169.113 291.536 168.825 cv
289.514 168.057 li
287.954 170.566 li
cp
.94902 .760784 .552941 rgb
f
254.636 143.709 mo
252.527 148.188 li
254.542 149.667 256.596 150.921 258.805 151.953 cv
261.904 146.903 li
264.759 142.296 258.067 136.589 254.636 143.709 cv
.913725 .305882 .105882 rgb
f
248.266 157.235 mo
254.151 159.537 li
258.805 151.953 li
256.596 150.921 254.542 149.667 252.527 148.188 cv
248.266 157.235 li
.94902 .760784 .552941 rgb
f
248.295 157.102 mo
241.749 168.528 li
244.55 170.566 li
253.388 160.786 li
257.102 156.533 251.502 152.195 248.295 157.102 cv
cp
f
237.851 172.242 mo
237.433 172.635 li
236.907 173.324 li
236.624 175.245 li
236.585 175.514 236.392 175.699 236.152 175.731 cv
236.061 176.354 li
236.008 176.713 235.685 176.921 235.338 176.819 cv
235.326 176.815 li
235.095 176.696 li
234.923 176.819 234.688 176.844 234.461 176.741 cv
234.448 176.735 li
234.084 176.569 233.88 176.135 233.991 175.766 cv
234.781 173.149 li
234.79 173.127 li
234.819 173.059 li
234.849 173.001 li
234.884 172.95 li
234.932 172.894 li
234.946 172.877 li
236.83 171.09 li
237.096 170.838 237.531 170.89 237.804 171.207 cv
237.814 171.218 li
238.086 171.535 238.116 171.99 237.851 172.242 cv
cp
.909804 .713726 .521569 rgb
f
244.55 170.566 mo
243.312 171.659 li
243.015 171.922 242.667 172.119 242.287 172.24 cv
241.292 172.558 li
241.169 172.597 241.055 172.659 240.956 172.74 cv
239.131 174.233 li
238.85 174.466 238.415 174.386 238.159 174.055 cv
238.149 174.043 li
237.894 173.712 237.914 173.255 238.195 173.023 cv
239.417 172.012 li
237.79 172.287 li
235.733 173.537 li
234.548 175.733 li
234.37 176.063 233.953 176.142 233.617 175.909 cv
233.605 175.901 li
233.269 175.667 233.142 175.211 233.32 174.88 cv
234.802 172.307 li
234.802 172.307 236.24 170.964 236.729 170.592 cv
236.82 170.522 236.965 170.451 237.107 170.368 cv
237.692 170.024 239.357 169.113 240.967 168.825 cv
242.99 168.057 li
244.55 170.566 li
cp
.94902 .760784 .552941 rgb
f
266.63 216.88 mo
266.609 217.084 li
266.462 217.211 li
265.66 217.449 li
265.428 217.518 265.188 217.557 264.947 217.564 cv
262.994 217.625 li
262.845 217.634 li
258.407 217.997 li
257.854 218.042 257.283 218.019 256.735 217.928 cv
255.757 217.765 254.845 217.54 254.12 217.143 cv
254.014 217.086 253.956 216.959 253.977 216.832 cv
254.071 216.263 li
266.333 215.788 li
266.63 216.88 li
.439216 .258824 .117647 rgb
f
257.316 214.029 mo
258.541 213.577 260.206 213.958 261.398 212.409 cv
261.883 211.897 262.775 209.441 261.057 209.55 cv
260.869 209.562 261.047 210.089 260.721 210.721 cv
259.68 212.742 257.948 213.385 256.613 213.861 cv
256.613 213.861 li
256.621 213.868 li
256.809 214.056 257.075 214.118 257.316 214.029 cv
cp
.858824 .576471 .152941 rgb
f
265.664 211.947 mo
263.617 213.613 262.305 212.198 261.479 211.604 cv
261.297 211.472 261.056 211.504 260.907 211.679 cv
259.768 213.006 258.447 213.612 257.308 214.032 cv
257.069 214.12 256.807 214.055 256.62 213.868 cv
256.613 213.861 li
255.628 214.213 254.804 214.445 254.395 214.927 cv
254.042 215.225 253.893 216.228 254.132 216.318 cv
255.489 216.83 256.083 216.879 257.162 217.003 cv
258.058 217.107 258.962 217.072 259.849 216.897 cv
261.808 216.374 li
262.07 216.322 262.335 216.286 262.601 216.264 cv
266.366 215.96 li
266.539 214.844 266.336 213.201 265.664 211.947 cv
.976471 .698039 .2 rgb
f
266.091 212.978 mo
265.443 213.274 265.446 212.66 264.509 212.615 cv
264.628 212.433 264.853 212.394 264.977 211.847 cv
265.068 211.452 265.157 211.058 265.326 210.951 cv
265.381 210.928 li
265.584 210.944 li
265.703 211.125 li
265.777 211.562 265.925 212.369 266.091 212.978 cv
.929412 .929412 .929412 rgb
f
257.797 214.582 mo
257.793 214.585 li
257.684 214.644 257.548 214.586 257.489 214.455 cv
257.16 213.732 li
257.101 213.601 257.141 213.447 257.249 213.388 cv
257.253 213.385 li
257.362 213.326 257.498 213.384 257.557 213.515 cv
257.885 214.238 li
257.945 214.369 257.905 214.523 257.797 214.582 cv
cp
.439216 .258824 .117647 rgb
f
258.42 214.292 mo
258.416 214.294 li
258.308 214.354 258.172 214.296 258.112 214.165 cv
257.784 213.442 li
257.725 213.311 257.764 213.157 257.873 213.097 cv
257.877 213.095 li
257.985 213.036 258.121 213.094 258.181 213.225 cv
258.509 213.948 li
258.568 214.078 258.529 214.233 258.42 214.292 cv
cp
f
259.043 214.002 mo
259.04 214.004 li
258.931 214.063 258.795 214.005 258.736 213.874 cv
258.407 213.151 li
258.348 213.02 258.388 212.866 258.496 212.807 cv
258.5 212.805 li
258.609 212.745 258.745 212.803 258.804 212.934 cv
259.132 213.657 li
259.192 213.788 259.152 213.942 259.043 214.002 cv
cp
f
259.682 213.607 mo
259.678 213.609 li
259.576 213.68 259.433 213.633 259.358 213.504 cv
258.948 212.791 li
258.874 212.662 258.896 212.499 258.999 212.428 cv
259.003 212.426 li
259.105 212.355 259.248 212.402 259.323 212.531 cv
259.733 213.244 li
259.807 213.373 259.785 213.536 259.682 213.607 cv
cp
f
260.334 213.142 mo
260.33 213.145 li
260.237 213.23 260.088 213.202 259.996 213.081 cv
259.491 212.415 li
259.4 212.295 259.401 212.128 259.494 212.043 cv
259.498 212.04 li
259.591 211.955 259.74 211.983 259.832 212.104 cv
260.337 212.77 li
260.428 212.89 260.427 213.057 260.334 213.142 cv
cp
f
260.923 212.525 mo
260.92 212.529 li
260.833 212.621 260.681 212.604 260.581 212.491 cv
260.027 211.864 li
259.927 211.75 259.916 211.583 260.003 211.49 cv
260.006 211.487 li
260.093 211.395 260.245 211.411 260.345 211.525 cv
260.899 212.152 li
260.999 212.265 261.01 212.433 260.923 212.525 cv
cp
.854902 .854902 .854902 rgb
f
266.363 192.119 mo
265.678 197.464 259.777 198.417 256.613 190.939 cv
250.477 170.566 li
266.425 173.821 li
266.363 192.119 li
.0196078 .576471 .631373 rgb
f
266.429 214.826 mo
264.332 212.588 262.422 214.027 259.728 212.139 cv
256.613 190.939 li
256.487 186.04 266.196 186.483 266.64 191.72 cv
266.429 214.826 li
f
266.102 216.88 mo
266.122 217.084 li
266.27 217.211 li
267.071 217.449 li
267.303 217.518 267.543 217.557 267.784 217.564 cv
269.737 217.625 li
269.887 217.634 li
274.325 217.997 li
274.878 218.042 275.448 218.019 275.996 217.928 cv
276.975 217.765 277.886 217.54 278.611 217.143 cv
278.717 217.086 278.775 216.959 278.754 216.832 cv
278.66 216.263 li
266.398 215.788 li
266.102 216.88 li
.439216 .258824 .117647 rgb
f
275.415 214.029 mo
274.19 213.577 272.525 213.958 271.333 212.409 cv
270.848 211.897 269.956 209.441 271.674 209.55 cv
271.862 209.562 271.684 210.089 272.01 210.721 cv
273.052 212.742 274.783 213.385 276.118 213.861 cv
276.118 213.861 li
276.111 213.868 li
275.923 214.056 275.656 214.118 275.415 214.029 cv
cp
.858824 .576471 .152941 rgb
f
267.067 211.947 mo
269.114 213.613 270.427 212.198 271.252 211.604 cv
271.434 211.472 271.675 211.504 271.825 211.679 cv
272.964 213.006 274.284 213.612 275.423 214.032 cv
275.662 214.12 275.924 214.055 276.111 213.868 cv
276.118 213.861 li
277.103 214.213 277.927 214.445 278.337 214.927 cv
278.69 215.225 278.838 216.228 278.599 216.318 cv
277.242 216.83 276.648 216.879 275.569 217.003 cv
274.673 217.107 273.769 217.072 272.882 216.897 cv
270.924 216.374 li
270.661 216.322 270.396 216.286 270.13 216.264 cv
266.365 215.96 li
266.192 214.844 266.395 213.201 267.067 211.947 cv
.976471 .698039 .2 rgb
f
266.64 212.978 mo
267.288 213.274 267.285 212.66 268.222 212.615 cv
268.103 212.433 267.879 212.394 267.754 211.847 cv
267.664 211.452 267.575 211.058 267.405 210.951 cv
267.35 210.928 li
267.147 210.944 li
267.028 211.125 li
266.954 211.562 266.806 212.369 266.64 212.978 cv
.929412 .929412 .929412 rgb
f
274.935 214.582 mo
274.939 214.585 li
275.047 214.644 275.183 214.586 275.243 214.455 cv
275.571 213.732 li
275.63 213.601 275.59 213.447 275.482 213.388 cv
275.478 213.385 li
275.37 213.326 275.233 213.384 275.174 213.515 cv
274.846 214.238 li
274.786 214.369 274.826 214.523 274.935 214.582 cv
cp
.439216 .258824 .117647 rgb
f
274.311 214.292 mo
274.315 214.294 li
274.424 214.354 274.56 214.296 274.619 214.165 cv
274.947 213.442 li
275.007 213.311 274.967 213.157 274.858 213.097 cv
274.854 213.095 li
274.746 213.036 274.61 213.094 274.551 213.225 cv
274.222 213.948 li
274.163 214.078 274.203 214.233 274.311 214.292 cv
cp
f
273.688 214.002 mo
273.692 214.004 li
273.8 214.063 273.936 214.005 273.996 213.874 cv
274.324 213.151 li
274.383 213.02 274.343 212.866 274.235 212.807 cv
274.231 212.805 li
274.122 212.745 273.986 212.803 273.927 212.934 cv
273.599 213.657 li
273.539 213.788 273.579 213.942 273.688 214.002 cv
cp
f
273.049 213.607 mo
273.053 213.609 li
273.155 213.68 273.299 213.633 273.373 213.504 cv
273.783 212.791 li
273.858 212.662 273.835 212.499 273.732 212.428 cv
273.729 212.426 li
273.626 212.355 273.483 212.402 273.409 212.531 cv
272.998 213.244 li
272.924 213.373 272.947 213.536 273.049 213.607 cv
cp
f
272.397 213.142 mo
272.401 213.145 li
272.494 213.23 272.644 213.202 272.735 213.081 cv
273.24 212.415 li
273.332 212.295 273.33 212.128 273.237 212.043 cv
273.234 212.04 li
273.141 211.955 272.991 211.983 272.9 212.104 cv
272.394 212.77 li
272.303 212.89 272.304 213.057 272.397 213.142 cv
cp
f
271.808 212.525 mo
271.811 212.529 li
271.898 212.621 272.05 212.604 272.15 212.491 cv
272.704 211.864 li
272.804 211.75 272.815 211.583 272.728 211.49 cv
272.725 211.487 li
272.638 211.395 272.486 211.411 272.386 211.525 cv
271.832 212.152 li
271.732 212.265 271.721 212.433 271.808 212.525 cv
cp
.854902 .854902 .854902 rgb
f
266.093 192.029 mo
266.778 197.374 272.954 198.417 276.118 190.939 cv
281.958 171.344 li
266.306 173.821 li
266.093 192.029 li
.0196078 .576471 .631373 rgb
f
266.302 214.826 mo
268.4 212.588 270.309 214.027 273.003 212.139 cv
276.118 190.939 li
276.244 186.04 266.535 186.603 266.091 191.84 cv
266.302 214.826 li
f
266.368 132.671 mo
265.449 132.67 263.051 132.67 261.509 132.67 cv
261.49 138.033 li
261.428 138.051 259.729 139.406 257.885 140.372 cv
253.615 142.607 255.298 151.697 255.298 151.697 cv
277.439 151.697 li
277.439 151.697 279.117 142.613 274.848 140.376 cv
273.005 139.409 271.306 138.053 271.244 138.034 cv
271.227 132.671 li
269.685 132.671 267.288 132.671 266.368 132.671 cv
.913725 .305882 .105882 rgb
f
249.929 168.454 mo
251.36 176.284 258.172 179.866 266.366 179.866 cv
274.559 179.866 281.371 176.284 282.802 168.454 cv
249.929 168.454 li
.0196078 .576471 .631373 rgb
f
283.084 165.271 mo
283.084 155.22 275.599 143.468 266.366 143.468 cv
257.132 143.468 249.647 155.22 249.647 165.271 cv
249.647 166.403 249.747 167.461 249.929 168.454 cv
260.581 173.463 271.525 173.696 282.802 168.454 cv
282.984 167.461 283.084 166.403 283.084 165.271 cv
.913725 .305882 .105882 rgb
f
266.368 132.671 mo
265.449 132.67 263.051 132.67 261.509 132.67 cv
261.49 138.033 li
261.464 139.42 263.152 140.211 265.13 140.431 cv
265.561 140.479 265.926 145.666 266.369 145.661 cv
266.813 145.655 267.337 140.456 267.764 140.396 cv
269.673 140.131 271.27 139.336 271.244 138.034 cv
271.227 132.671 li
269.685 132.671 267.288 132.671 266.368 132.671 cv
cp
.94902 .760784 .552941 rgb
f
266.37 119.251 mo
263.815 118.975 261.388 120.122 260.417 122.409 cv
260.045 123.251 259.85 124.306 259.778 125.612 cv
259.572 125.441 259.35 125.351 259.13 125.387 cv
258.51 125.488 258.156 126.476 258.338 127.597 cv
258.484 128.505 258.938 129.217 259.432 129.403 cv
259.548 129.449 259.863 129.422 259.901 129.409 cv
259.2 133.405 262.146 136.481 266.544 136.481 cv
271.401 136.481 273.456 132.086 272.836 129.411 cv
272.874 129.425 273.189 129.451 273.305 129.406 cv
273.799 129.219 274.254 128.508 274.4 127.6 cv
274.582 126.48 274.229 125.49 273.608 125.389 cv
273.389 125.353 273.167 125.444 272.961 125.615 cv
272.889 124.308 272.695 123.253 272.322 122.411 cv
271.352 120.124 268.926 118.976 266.37 119.251 cv
cp
1 .823529 .631373 rgb
f
259.2 119.664 mo
259.2 122.787 li
263.981 117.223 268.759 128.354 273.54 122.79 cv
273.541 119.666 li
268.486 114.816 263.749 115.571 259.2 119.664 cv
cp
.439216 .258824 .117647 rgb
f
270.992 141.711 mo
268.378 141.711 266.697 144.632 266.369 147.821 cv
266.042 144.632 264.361 141.711 261.747 141.711 cv
258.837 141.711 255.483 146.09 255.115 149.734 cv
254.722 153.632 257.445 156.111 260.76 156.111 cv
263.765 156.111 265.989 153.37 266.369 149.982 cv
266.75 153.37 268.974 156.111 271.978 156.111 cv
275.294 156.111 278.017 153.632 277.624 149.734 cv
277.256 146.09 273.902 141.711 270.992 141.711 cv
.913725 .305882 .105882 rgb
f
277.624 149.734 mo
277.623 149.727 277.623 149.72 277.622 149.713 cv
277.623 149.72 277.623 149.727 277.624 149.734 cv
255.115 149.734 mo
255.116 149.727 255.116 149.72 255.117 149.713 cv
255.116 149.72 255.116 149.727 255.115 149.734 cv
.87451 .298039 .105882 rgb
f
271.978 156.111 mo
268.974 156.111 266.75 153.37 266.369 149.982 cv
265.989 153.37 263.765 156.111 260.76 156.111 cv
257.659 156.111 255.075 153.941 255.077 150.469 cv
255.077 150.23 255.09 149.985 255.115 149.734 cv
255.115 149.734 li
255.116 149.727 255.116 149.72 255.117 149.713 cv
255.203 148.889 255.449 148.026 255.799 147.186 cv
255.717 147.532 255.65 147.879 255.617 148.216 cv
255.246 152.007 257.85 154.416 261.015 154.416 cv
263.883 154.416 266.006 151.753 266.369 148.458 cv
266.733 151.753 268.856 154.416 271.724 154.416 cv
274.889 154.416 277.493 152.007 277.122 148.216 cv
277.089 147.879 277.022 147.533 276.94 147.186 cv
277.29 148.026 277.536 148.889 277.622 149.713 cv
277.623 149.72 277.623 149.727 277.624 149.734 cv
277.624 149.734 li
277.649 149.985 277.662 150.23 277.662 150.469 cv
277.664 153.941 275.08 156.111 271.978 156.111 cv
f
266.379 215.318 mo
266.362 214.763 li
266.374 214.751 266.386 214.739 266.398 214.726 cv
266.379 215.318 li
.890196 .639216 .192157 rgb
f
266.116 190.049 mo
265.959 189.78 265.772 189.532 265.559 189.305 cv
265.3 181.085 li
263.728 179.736 li
264.546 179.819 265.383 179.862 266.236 179.866 cv
266.116 190.049 li
.027451 .529412 .576471 rgb
f
266.277 212.061 mo
265.559 189.305 li
265.772 189.532 265.959 189.78 266.116 190.049 cv
266.096 191.79 li
266.094 191.807 266.093 191.824 266.091 191.84 cv
266.093 192.028 li
266.093 192.029 li
266.093 192.029 li
266.277 212.061 li
f
266.093 192.029 mo
266.093 192.029 li
266.093 192.028 li
266.093 192.03 li
266.096 191.79 mo
266.116 190.049 li
266.236 179.866 li
266.279 179.866 266.322 179.866 266.366 179.866 cv
267.42 179.866 268.452 179.807 269.452 179.687 cv
267.431 181.247 li
267.179 189.407 li
266.588 190.042 266.188 190.838 266.096 191.79 cv
f
266.362 214.763 mo
266.277 212.061 li
266.093 192.03 li
266.093 192.028 li
266.091 191.84 li
266.093 191.824 266.094 191.807 266.096 191.79 cv
266.188 190.838 266.588 190.042 267.179 189.407 cv
266.398 214.726 li
266.386 214.739 266.374 214.751 266.362 214.763 cv
f
266.366 179.866 mo
266.322 179.866 266.279 179.866 266.236 179.866 cv
265.383 179.862 264.546 179.819 263.728 179.736 cv
260.932 177.337 li
262.958 178.509 264.917 179.063 266.815 179.063 cv
268.713 179.063 270.549 178.509 272.327 177.466 cv
269.452 179.687 li
268.452 179.807 267.42 179.866 266.366 179.866 cv
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.1.0
%%For: (Agor) ()
%%Title: (1602.i105.020.P.m007.c23.obesity.eps)
%%CreationDate: 2/26/2016 8:52 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2Oede<S6>hAlYB-AE)3%_P(DBK5i@mWKp!b>YoYo@X9[c8Yi3?OjMr`5;[G2(ZZR3BU/j(Fr>",0p\.[=bZ<Dq/fXjoM@
%Ei!rl<rZqa_aJ*6pbF(A5I24)nXmA&Vj6):e^l,eL4PBp7FpKs6Yi9Yb#e('<qnt:cfOJhc<4+^mkj@,W7>(T=6n,^;J,l/Z'KZ4
%4GLTb1EW?+[JjfNX]d9H_DA_SGu1G=UI)Y><buDJeg$o=5S(VD_,J\]r_.E^Y]U/G]r9bATg@SgHu=.L/br#3dQd>qG,+(iX5,>8
%/+qV_He:0aV+fKf;57h(!1a.CnBX5p0p@ZYMOeM:]JJ#R"[BHaA[%'tR9'in[-/qB04OR7BE'^$YokC'Ihiq$J%+,,TC?KbnMA%p
%B4iTQn)1'onhNPKT=KB#SU1B8k%To*_>WT!;(]4$RR#/0<b<,lJ!.RV`\7YIE)H5.Jlu)?Aj_iGS:5#mraso.V`FTVM>gc&4H56[
%W+fm#f50nUrX6%Z,S&J5jP<QgC;-ZIg)r<&;.q<97D0[@J^*WCKkcaI2Sg^<gU>`f2NOUkBP>*5_0K/*"J5MFbKedanQ1BIa6ZH*
%258fRr@JJ#;2$4[UXk;&IaA/m"nn2+0[<cI#ig2?T#`TM3MGjUfH9hLhP5(nG!IK`2(Q_4g<sF1e#YO8qRY@]Pe631Y\3iOi[LoS
%%qumDIgECoHGC&W0b@9q*Ru.-N$#.981Y0&qdL(k[S\QYf?\EM>57D%/;Y:HQ>6BNrjDV2r=-@%1b>gu3-\S]#:_UtplGHf1k,lC
%G,cSXj(>XSBl)=[l@8_E5$+m/7[^__WEjFo#*^pI%_on7pG2?IBJ]P1@L;m]hr?WJ@\n'_7#/Qj1Wl*"_R&kbr:^KsS*"uud9p4j
%*>n'2m:TD#2\I.OP[^bbGunf?dWE3%/_5g(%/h@;Hb8h^r_`l]FaNT*;KWAIeGpc?6e&"%'c/\tr$g0sMX;'2a&/toML.:sp'oji
%dr`.plg1i^XgHC5%[3.PkEM`W8'TbgRMf_DdlPV;fB^ti+A;n7VsYfhgZFo\GtHe9cjScmPM>nZZ!+7L2iEZZ8nh-%"9'@VBZRNZ
%[&?Aj+8!S05K,9;s261ra!oD*\H9chaKiOac/,)3G3K.Rb@.a0X@+;a,#7T(V$<MOZe)1`U[EN[cPdYUAbJlV%4#H,6DA&#?[2V]
%,3](C(Iu%@k*\I%^"n@_Y)S"K_t`E=')_J&`V)soqXejC;F2a;D#P@CVrc/#?Y@n-r,E=%e>sX5g(@Gg"_a9=2N.NN8gfm=\J`qr
%"j]<d!b35M&c^D\KtP;FkF(MXh9.q9K2-4&]o@IVWu]s[,cViV["l#h(!fQ0(kHJ40[]7b=XggU;K-.#NJj2]XSe?8NP?g0KjQ92
%pbb5Nl4h;c1;_EY*RSo*J3O3U4fucDAT$fV=)FHA&(kRh.ch@L@AANu,G$`]f^:R,+_.R<U=$8#:Q:T.h"c1q@FgX;=ZJ%AU-^[4
%d/hPAXNA3Mj'n%0k,d,oHW=esIn".<A$YX7GcK<gg(am;7^L[?G)0P%iN9$N\<t1q24Cd^eEU#^KH..'8n0Ynbj;&YO1+i2r[=P(
%)"Y_0TAW;?e:t*6*n-1P`hct.Ul8cXhM@Uha>$T^dVV#tLA'o'AguFjBk3Y]8i8tG?S@Y"[4!n*Z!;b,-n+X)4b/=`kU<c"9B@L^
%SQRF$8M&(`\OfET`%708C).tYYJ.)>>1Y-i99GrEBeG`=@qW@-/=2jfEjK"gQHRNn\SI_YM<gGMV.+(0Ek+Vf%C3Nd9MB[p#FWk@
%oJ<N8SJ99?5A+2%cG<?RGI?jM;U^1t]:=q2<iA\L<R@7P4taPZX.<[jC5SeKc!mU$WYB5a_mu9'\2f8SQ.&jRnmlC[jYX->4@\4m
%DL"pgor9)S[A*?uX'pn;qCCQB.T^m16Xd(Y/(&X!5>R$s/NnRF=#CFFB\SM>k>IOiZoZI,@O^"]("4nedsPa?rXg)OS,TEDCu,"V
%HSD=&\eH%f>^*3ek/LbfH7c.n@I*h9@q.2UJ*Zc2X'N@PJ)*Vl1uVQ$SsMbI-9W;[?7Ii[4<K<R4r#%:9u4i!`u\aWe17s#Fuk:l
%iV*dkcS!ab)`LH%cuVc`@(%jFZ&ul;43!\[?&hL_!%H^?l*+8;3>pI_>cO'DLLC0R%hE-Dj2k4a%1iGKo8ptGS;u!L>f,Do]JhB"
%/+&P,W1@NrH)eO:Dqluf'DBqQA+2;;plC(mBtj6q8FNq8FM*Eu`t:pa.\iR,$gi8ca)<!;XNG0VjYMu=G+GX\A-uWi*S*o\?P<oa
%rbE!\XOldg[:U-O2oTt$Fg#:afbDK<S&KEEP@fPT_f8Cg\Uo%Q?-D$i\s/Y[i*gBoACJcC(#+f,(2qcnN>&t!085UY^bfS6`[9Q$
%>mKE_RuUlN.PEU<ofpS?Y!G3eWe58S^:[D2[nP-E*lBFdhmL7t\-hpJ*fNmk=d-SN]eg>]Pb.;=;4Ka1h/@S.Lsu<XBsO))EBG\;
%R23h!jVJU>X)CS4QF+[G`dBB^ND`K"!Qh`gSVJZDC3ls]$>(o#Xi@]HO^dorrM3Pr7Ff)M9&ITYZPRcPO`Bp#Rpq0Bo),&.AB`mW
%?YMBt`DVBH;0c#T9Voom.meG/[LT2Ze*2>S.!+fHf(7p8L?Z`8&ZKP*d2$`]I8gPID0gTZ(bQ['>rKuUNp@l61"l7PeQbfEl:?!I
%E[pPT8:c.^c`0dWb]PR73D*GOF&],>do@Mj`u%MZoDV>"0fi'@4`%`MZ')sb,aaHrrfT5Xa]r3MEA:Usf2APRYuL"YFY;=Nn)5hF
%G[,(,'P^`FF0gsB2(geU&`lV6-E(1Pi-,OW9MaGcJj&^&Z[S4[ekrcY.9VN:Yb!3AX,i<s@eJ(,Y7ulu!ekg&R51Ql/]Yh.[8Mp?
%.1X[gMU`>g1H,J5h54],/;gjX=XkB'n@M//%5)6s$tbbQ'9SrQY#?W=)J5iM^6hop9G0OY9!]jmX^CCT#,\r>CfZI'H(0UnPgX]S
%77kD@[()\VY=2"p>#%X@8h-[+r*#>#iB0cbW>6ch1UC8L=Y7er_V<:L;'mjG),Yp)4_mnm=i?0k;:hc_,n2ZZ&lDGO/P<%RR.SpK
%?#*;0f;TN3%5ZJ=lE>5pAf>H";U+;LXN!6_Ek3pM93'q.Ru-CAS76dkijXqWS0POEpD;u#%e=]hbeY#=7+:A7dNF"FRsrA+@G/'c
%q!o_LR@2a9bLe[0ZYM!X0XGON]/I!2;dn99RR!9pCY((AMf;R,<c)I!rnUUl(9CfB?u9N+Ale;+D:Oe263h#QhjuZeU_(@,h3+>/
%%D^XP])4>3ZXo@f"LDYr>=Lb:,JB%0;8?h3hG%"fQY8I`B^B*tBq_*??VtsD>5WLsL,4mSVT[6JX?Q:1Kk\03V,Ag68!Vft%r_0+
%FZ#n&4.kdJNC;N@Z$),pV&<h\B:%$TibSZKV.")&E-<bVR(0_^2kdSsGSeM9QN$;H.-"H!)7Ic&%$U1!0*D5YL7dG>bOC;2ml;.=
%^'s'X2nhshBQUr%l1[D5FN7=PS*EB$;cCW,Nh(Z0)?4ep;,$nEntCeQ>'H*,Y*_eic_^J@UY^UPoi5XlSbe-8Cn-5fh/PB=<ZhRu
%G<-.*8koRK)B43gJqmc]8j,:m0o!t&GSjK(eAHo'ffZ'M,,\rC+d\.H-f-3dS!E]h=k$4,ihspX?I#NDQ&ki;QS2YQ-TR/*&XT$B
%W@8%?Sb/E=s3C=f-Zf<3$l9FLRP)q[IqSYnZi/e7rpO\'GL-cCp4':=QS?Dq4lQr*pQe`IP-[=/#t;9L*&!`Iq9J\]B7%@Z%WbMN
%3L-A7:+KMOf>'c)dcf>o-cW!!^S5JNro[r1X-M_/2DeMei<>`#3:)-&Cf+qNbHR?(-MsCc@uD7'R.=#D#f><&D"T]YE8*>9T%5O_
%CZL^XF#68*@T[,pONe?BX3#]eptcl^2Q8C`m,Pc8Qtutj>tLWnI,'[Tg+l'Qd5(L"b&Mk*B;Jpog<7a>]Nf@jCI@j(BDC.>Y1uU"
%Ak#eq/LB8<BKJ+n*i._npts4sV`jBVK0:!s[2^trPHPN/Z&PHs=DLk+-ILJS1!`h!4W's[N2Xt9LPZ3W>)fH`0lQZmSK+#%Xg=O9
%r7-=&+r(Z9rfOH?R)6&:d9Zlg56&\4GaSRc1Z2gK]Zbnm)=TB`?=q!r85FpnMZI-8$:FU3%!\2u%!2]d>R#Ej?Z:"5l?jo_5h`ON
%cVu,[fBl,r[C^&1;BX-k1)d'%RdS?GdTd>;]51q3GaS-H-IVB;l'G,?01;:WYBXn;ReVl7neb<,hVK\^L>qSVk;^9^D<;fc,=n5E
%kBJ"b@_-)N138P@mnfn$2pQ;K\m@<L?".,Q[kH!D?Q,9"rbLpNg,gaLl[R2D;KLYhjeoV2C3D(V@R>[G5L,k[6]pIE?RhmAj&3!9
%4:Lf`4ZrX"l-!SrX]PJbW"l^[2)M(K8s;ASC]5(=pi"@Wrm'k:cX^G3B'-[R/:3\V?+UN)q;0n?%6]Qr<=ZtWa5uiY8Ai`FQ#`l[
%1tunQbUbN;JseI#e/1QPFA/J:C<%1?rnDCNfk&@Y%*)1#*+OkHR]4=^JnomHUu>a:@n^^94)Jb^L1AGHN(KM,)3-Gh0r>)oq"J<4
%m:*)QX6Z@L*ArbOG-UnL?:e(6DOqdrO1>(lYZ/3nC7arpb[sf/"`md^7>5@GUD)0MC%?egp>b-abq1WWcIj^Ebb(kp;C<EEMlBm.
%Y?bk/L>egh#Q_BgY>eHjf$eq]9.C+.2)VioV.&MtS,M#/6`CcBlk^,-Z1,*CGm87H!LNE%mcGBN4_)6r-WP\>e?#:=0n7\hI%7#-
%kY\s`->p#JO,M[s8SQaMcWs-&"+MqED:%_QIeGkJ_bLsEi\Z:>ZeJ91n1t"'CT5a8.=l4eGK=P(Pbu8NY#iG@.X%\bi%#6e'41*l
%L4rd8f48\DF9@YX@H[[j7EAAR<*2%qgBh3;]=q*hMX$]L&oW&b#UCIXfCc2uRH8JP4MWM7qk('\=Z/4^k%<<%/=W,?F6?^$2eI+[
%_Z&kmc!A6X0JApTC5"*2k>H7W9BTpOgao"cV/q'$bgO%)3d6##3I/<d\Q%oh8NO?%Y!GC@Nepn22]4(#]6_/<gao=BK@`8Y]5A]B
%8<NDc/n>h!Oc,G/kbmJtE)V7i`9_rsftA"sGd#%&RCbZ&lY8&n(_7HhKg<q2VgRa5=tH3sB+1cr.$c@M?V@Akh,aDS2%</pgPnkp
%;LXXSC=Z6SI\pZo'i=FtEY\PdHX^S0kG0_t=`c>eX4F#'*nRT^D4Bt^je]Kc_gYs6]j@K&H)JasqO\Uk_YnbClBlqKIMdJ&+tJge
%YlB8onX'([>C32UW\CTRoshM(;+]4$1lmNj-nSZ:c"@@L5@Pl1pNEIS0;\]#n21H`<JnDCU+6),&fsfT*LhoX;j`d.Ik,0&<;V5d
%bAm&>Y%J/eo),Z[.:8bc@6<<5o"si8#T821le86lR_/"Xc7C`<kfD[[*ugf?kTJ+RI#dfX^DccKPU]6cs2Y=U&T4h>8-7+%1(/tO
%6.'TZMInTjPn.EOY2Q>iMIm%7'9:mU.VtIU5r5bB2[2=@_qH@`!um4m]i"tXVo/6$H[$*cc,6d/@=!1f-_#lJY2j\`Sg6Je3Vd!d
%fW;GUcD":1.@;URGhn7=X-NBRYqe.iS2nUr2J=o03#P$)UcZUR4A<>-]OY%uF-)US:hIF]qL.B\,07*O%8LZbo6Y;ooZY?o*Q:um
%`&53FkB_PVr&S1=48[U`Zs?6[o(&A$NnL<-@\U1QFI2!UL8hE9/E>E5#5o677WV3eVHI6.iA@X;M0E-mn9!uJP-c[H&p0Z,`C4QZ
%ZH^>\MN4k*'d(3j7,0cRd+$s8Z'Z^^TD2&7(9bV-)8?\n)@JX1r^Z-[a1;&Epl^KK1He[@=*!\#ln/m"::s06XT[.`rG-Ztn8oHY
%>]+F+?I`/HcQ5kn4Ir"@'W288D&#cn5^hGspA:V`=f=0tLjr+P%(D.MBkDQ=cq0g#Z#N&<^J,)#p9YmI2(<W^V;8+-,M,N/Z9%#W
%Y.L->cI?[cC<!Ek0j>T4E<rC#GiX.b=ff#kdX4Vp!d4LjFnmiCA$Q3_WJI=/er;VOSj=HNAqs"8En0G+_tgq@3\.K54XHE/B`se#
%#gusqMg5OH[;u1",bdjU*PAK*G+]Y_@qa9<f:q:t/bt_trq!Gc\"<uOhf@!8*aVk&!_%B@X8c=thb[P>5J]UCYhm(o:G6/SUeH-#
%ZUQg0)gRiQpb,]uKE&S;,%VSiQ.<b7*5]at&ci@Ar.0VEpYgmXq9frG"(T(-ZKDHg"p*&_cXB&@VW[n2r9YC"oGqUpAsep1OnnXg
%bEW$W5OROl_5ka56E4B^!@K06U4a/lNY^>DYo:%)Ol:3@&D7@-(E1>q"0H78MM6TlBim:C6>8O2q+nWL6*&fe8/%eS>eL(i9!n='
%J,ErW"TM]l%OZ_ijX+mb3pi?>o/rKhIoBE6:[*pe^Wm>T<UB#N-2"a.3p[<!d.r!eEsBHu^=WWaR6,ZW#cLPoCQC?E47G!9GGAV)
%1VZtMU@NJLe:&>i3bY*=j9$GEDAJpcC`*1Rh-A?3L=rc@K+%Y(gqioZ>3k*ZZ.W;%l$T-YraB=m(QYHDqs2aiWWj>D)C\\PV:0,=
%4ZYD4fCUO-p[9n_=K18G]1/,X6<hg)]r:mm\4OMMZM@KM`BP0]Ke@iB+Iso1LgHl\)/3]/m##b-UTjAH]ii.ZPG.KeB;s?pf?YeZ
%r;BY2?"t*/8ja*slS-#Lr\)jIhWW+Rs7LW>f2?K,rAaoT4U%.a<NVLgNu8a=An@V:(G-//45G[-BdAO2f1l<u9P:2bHmF?D5%R@h
%l$gj"r9Q/#%3_,Zakb$a>;M!?iG)6b,3s6J8+JOC(n*qaCI7dtla'Wq?c:9!]a^).VQ6nhQ/g7g*Y%906PC,4OL6q/-%5E0185+p
%FqZTjZ`%.\6b%7BK*hSJ?uD5]U68.3'!7!9\_r#Z6Z+Eu'V"L-HEgVucs>fPSiQ/OC1Q)ZAe[%uV"Ed<`p@`*';HDt[M``6,7!"@
%b(_fq%?uqIg,<t"ep=UpZe4!4r:c_\aDEYtfkEpXW;/6llplQ51E5FJ]6IGW<nbj'H#\Vd3(Cn18F85hgVqldVg'1mG3Y&^U\fT-
%50Pj@NMr7Z<R*YUDEVR_Qsl1:mP-YX9g%&;'!IOnGs'Z!L=GtQJBEjDep1^t!b"&kprXKL7^64d+50l&FkTVA<\(;$$+1]EG#pD>
%>FA`o?-hjQ>OABB*Mh:3:oD!pdosG,>48hLWVRb%,hl@'FV%@P8e_jC15u0QKR#6:o8n5k.PADF>sq"$Ti&Unf%LqSQH;Tf%A,#D
%4-\Ij)=M:ieNo:Ks759pSDKC?Tt_puhX/&,]5f9cOA`2]Dpr7+?>T#70&Hu^FMH['@]$hggr1*`q.Jsk]NM?Y(9>&EUJl#PPpr8c
%5]LmrHsIj?k5.1F]m`QH$&KTMdf98O+mlB"EB9Gs;^n8,bq#E(/U>E)($H7"KFeG-WEd8]^YNt;9rldf)(tG\STY+dJQk(_3jTcV
%c?BmjJ]XL=?::oZ;3/qNH4cDmS[67A^*FO5A?uWIcIu,)X:e[MFs_bI-7u"<lua3UB[Y&9_iJtO?N#hONFjJ[9-Rf^Co@'Vf:=*h
%ccgS)1TCrKf?5/Q,66b#Xjj(=X50kLFp"[a>0n3cm7#R'`AXq(YE,,Vq%ipSE:amSh6**%<FiM8FgAtMJe.Wk-X0+A]PLJ!:30Wn
%::9?iqDN*J.YPPHY\bl+B!KpiA3_W`eprL-jO"05FO',*I]s(>fUQQVQXf%e`*0JL"):4H]:[ItplPXe>;uOrG9_rN40qD]D3(A.
%hA7'+T$DH0_tPk4,aD[5#nMXj#CBIH'Clqh6E+.&J1F-Kln@l'a1.R-4OS1t]C,<sMhh?DV0]HfPm8^:k2FL0]D(bh`nN3<S..$X
%nq4;h^r*FLIFudI*]B&)::"TPk%UlFFHeXS7,NZhCOV(\K$?BZ#ZQb[W"lN-`7D+ja(,_=q5Y*eZZeF%HW@+Pc'D(2,dc4t#(gDR
%5*21%1Kukl0W18"_#qOQD9%L3p4B`4neiis2:37G0GsUo,=t3)_n.e113@u-e=efOMS<2r^Qn%8V,ZK!?7aJF.*&r%mT!B1kutO]
%NDre4Xdc)?;!ODB4QmqjW,h%i=!lf-j3Sd?OSE3m:5AR-=q5-Um_eFe]'F9YDQ^_*%q2VEQ/c%'+s5<t3i)8X05U+GNYMK>-K,cT
%Qs/(%.b,qA_d_r9dQT0>/l[%2h(.a]N)Z;"Z`_Igetc9K_1]6OkeDoaC`46uqJc=#NLT$G]ibBFOd*9odZUWr7SF.G3s'VG;K)R/
%6>`A3+(nBt1icf0bT#8pc8m7u)`Y-(WDP8G9&&+H$VZFl<N<GZdUd7EL28_BR"fYg'36\C;M`4Kr-=E!7"5s%0OQAkC=^72QO=Oq
%RMcd.=;Vj]"c[G%g>+'>j`7:5#-3\+<RQU2*@c?m;2n2mH=KpD"rPramAN4K>r,?+2"J<spDk$=Xc"O12inm@2L8Q9PC/@)SFddM
%,+ukF;RGkP,XpbS8-Z2kUKT``Y)]`8VGX+6<3KS@qQO8+Eu;)PJ'`#>JDHgPB2Ff0$:^6r9mS<oMiN]4J7%(=_e)Tk7d(CA"P6Qk
%d9DlEJ&Rek_'TR/iht5"Aos0BYZ92mOM(kYlcN^FIsoT6+;aQL,MS\`FO@>,B$KJRm!;LWj7>tM2g"JMP19rmmP[f#EC1XRC.Ob$
%f7XZ]48?IHql2SI(Kh_md2Fb/HDB9++P;5\/W0t_QTQoXL!=YEe`S5Ji"^[D)A1Lrs$rV`kp"A-NGR/_CY.KG;VRdFs+5D_`-j9/
%he1&mCVI3g\X(q&=B@%QC6</^YXImf6GI&]3+s5'&S>-N/7us'>`N&MqfQ>+ennQ.T1$p3RUWL8@a]=u-AC(8aWHjZ!$9=9F7,Gi
%!eO#',dIegm8X(BW]O)L-n=mCYLG!!W3h"uXR3G;+>5\q'uaZd?>P[;eHC*DCdn-mjolEU9j=N\#)(d>dh1t@qG=;#W5mC!"I%nW
%</6M2f"bF9<^5Ak\0j:l/@cd!X*<Nk9Vk4?O$-;q!("O$#)(9B]`rL6kfNABZp5ur?:P!1h#^Eb6NJTMqoYXTHTe=(2lt\]f*N]G
%1MUFXh1onX<jpS?Q1_M4eW4dJ!Im%Op+@%IYJ@F9+Goj\Qsm%[nhQ1p$`phn&;cfE.7Iiqm$Cic`bskKfdrFD5KsmXAIH*DS$j@t
%h`S<+"3i^J;m^[,i[H[V'T_nsd6*_(N2$g8r26Z3[6rUOaR-"c6km[:^2U=.L67$i\B#I/2qU#P2K3ZN!o#aYoE#EcL9TPd2B&>o
%dJsP>?gFRe6O#emqfb1UC24Zee1U="Y&+3hpg&":[M&Q'QLk(^XNjME).gSiB.TR?JH^s%2HlM5:SM$i<W%];<NKbN2Xd'\_TjS7
%%@LZ5s-P=g&&I/b$h4^B2Y3e7*Q,Wrk..(DJ(6WK#-=Xp]p8]"Jq'J&Qqi^#@&tk9o3<W98.-;[ESNhhps6>5fMO*?<62uo1Y&4F
%mMG9p_]2Z,-*s/mlBG%_^g"3/iGm]!ba\"s5`[r[lM=A%5a>BI;`htI;;!*2m'Hh?/i>/=;/o4S'^guP.D'n:1+ubU.:sR$j9nXb
%;\*@i)(ghc^40QFm[EQo^YcU>RW)!qS!C>@L^0efQeVEU4tIY&-<+cuB]49B@1"b>Z0)soosq53e8+a*8[Ej]jZu+)iUqI@H\!=p
%]=#/Z=DRAm=<+I$:)t&#AaCY,%Ye<&K`+S,EJaFWOfm;OjW;on#ThP]YO@Xq],6nV-Y;"sjq_hUj::K?e''?\g[;Do/%+qn8([Xr
%Q0`o01qN38[>BPLPG:UPYhk(:qKWqS+Pr6'GpQ.p0mY;!fIDM/=,nbMJh[g>Mk(pVTbLlDJSG"fhE4MN&UPg8MZI'4bD02]!Q$mq
%@j9Hd+#6J</5NFuX</54gVmMs*#MpU86l=F0r'.IiZ+k1-MEsP8mu4Gl`F=sCi$k[8YM&pX#5Xqs+mrb/k7NRr,+uuC@?1aYr6@?
%4fNQk'm9lZH&7]U9DYX;QDIB4cK?5n_A3u,:R0rg&Iff@Kmn9MF,4m8YI/RO3iOGI?e%+((PVbudLtuPhmWbI4R+gc\Xt:\9HsPe
%iaP"'5O"[Yer#`-.tuI9;lkZ)L(&$#`R"c(N63a!V=4-m`"/-&2:I@YT/-V:>A&dLmUEM6&).'K4bF)k0qNVQ:,r+fm]T"#d>p@#
%=2lPlCDE3.k4[B8[K;kP`4&FL,KtulYO6daYk%50h<!YnKkLCU=,Ujpc-<SYV;p9hB8%94o68e:`GFkKHLl5Gh-+!1ZhaBMGd=^T
%q<j0kAuDF4)uN,Ya+UtaH*.#=r:,A_HZf."pAX@"6DLsBHHmVLCK?e2D_tb#BC3+eVm!R2=%'F)??u1QPg<t1*hRf2G526Q;!/4-
%9D[[\49,9&ReXD&O?9L][rP]"m?7d9eZDRi05eO/qd-u5%UP>`nt$j3m-V4kO7_2YT0DH3f<]CN^GX\^l-&A7C#R8#;Cd+f+MTV^
%.El^rO5Ml@YJN5;2>O"#n+9e+[JG@:B^MV/I\K'4*f59VP:s3.+0-nfm_1It_4Y#u?]VtQiMSb%nlt4X)f(AJpY36l`EP2UM"el/
%#@8'mT79\k.*:*4lR1\"GpPE4hg)I"EoGc*eb-Om$L:RPro:K6DOi>F9#Xa,WUaHWB`#`\RX#F%\llTBD5m+!=a@,1pZ1aOo>0Tb
%DL:it%qOVTlLM7p+'t_.hgS_QeOk&3*^"bRr(s#6IT4_k@I)"\2+q0?_<DSj].E'9[GHMro\E'Qo=a]mAc6$L-CMPl1r$O3X]>&>
%RGm,Bp>"s0f#k+=)[i@Xq^_5AT@C!`HG0=N_91O'V^6e:lO3C_\2FRC4]_;qiO!u1n'pYAMX'`ckrlFf(%c?ggLFT.]uWDhY1tJ]
%GjqtpY>P(MYLEq;J_,.%2n&qgo&+Lr`W!78DWA9A^V6rBc1K"?n1E#FpYLPCO#Ii!rlO[TgX3W'/'I&C0>GqO`Zp6;?EHfn)JHPP
%/0;ZpmL\%KUKq[N$)5N\C\\&F2e4U<K_hX]QZE!!mgntZ&"imS-l2:.?;lVt?EZK9+$@j9T9S'?S_KtW\UEn@$KUiG&%CJjo#Haa
%hk"q!.2h77dFPM!h;3`u[e\EIg4t"RBQ'Y>,)(K(pDuH2[J\=o'(ua;ff3@MhQD_0cO-_tk/eRIo]"[?R\`8MRL3Zrrka;qHMFmT
%R_>dM7INWU-5X:Gf.9.2e<quNX)-%--C<XtRpO'UoN3-b=-r[92fnlBg7@i`m$l7QkhYU?Dr*b552*@cfh/DS<1Vi!.a6dagfm!?
%],rsA]p8KjW7bGFU7FftnOSU,@W?4&jpmt;d^bX^DZsCOca3GLn%*27J=4qqn&O,QgoIVo0+.#8cN9.j5:dW%b@_p<Oq*k7c*aQt
%oWHrZC2Z?5\Ft%Eet]rF^h[<tdB!3-l!+A[HG+pM`qPLZhUTr5\%c2TITgE'2JsRjiIb_3Z;2gj>HRbLHDOV=A3(MkmI5J3[[q[<
%>)np:SACZN]n]5Rik_C&+.p*Q*e+B`k/1Qh[dS.C&'AOq]l26f%kE_'$`8QO]2)FEs$cm2p$M`ZZ*4hQILiVbH/NOeN[<-+=K'!q
%Kfa&64\U5NgaJ`m\DuF2$`.#`B)9fN]A$^D+5P3/<ZCdsm9UU$Jgn>_o^9j"D!q+S]c+O1@F8A5K@PBukLKG&O+#U>6LNaQ+6Dp>
%m;WHEKu1[>)^iQ0(uSR#91p?"rRIkI2E:*o4Gh,IK3R05D_17A*e>G@^Omj3rq:ubO-EFic0[*af%)@:f4AL\"ub/\5C`ZSZ*:MW
%n'PL!S)aB'dsh>9lJ,S9R?tngqUAfL3d=Q5036sO51DYi?gP)9YA\I\SK#$spq>Ehf@f<_p+$(6(c7dHntO$u-Z!4?rCK\0%'SoD
%a>>1]rjmh"Eh/et?e+!kIuSr+7$#B,=@_)6kpj0J=O;(C^WR-O2E%e]$<h+ZO-G%iXu1%gZJ1Le%DK'UO4ALMO5hURW<j&ILW2`7
%5]36iS/D`UC3[a,Tn)j![S4AW?UK869*khdkcOKX',l&)f.0[DBGphBN'->sdko(l)*ui6QX@d"fHZNuY?=G;e"+=q(X?saalo3#
%GYR(+R"nLEh9Lih&ll,'*YDc8?`C+$eXPA\^h\6Do^O'C]5UrtT]rAA0D!c_Y?'*VW^dEP^rG+`?X8*Ef3HMD:jG2Z][@.-&p`!g
%)B6F0,hKaV$a5E+po'8&==d+YI6?a7c?f4fqJ4tmh;!)g?p\dXVY5"2H)WM*,<'#P/B:-5M9UiR<Qe*fA4c`s'mF*u(Ffkc*E<)N
%)0c()O>S<Gi\c$BAY_>k6<f<(5bm+7!PA)`IPOh5o;^?qlk,WVn%Npt@BPpN4Z\$%!U'&DTE!""^O9E=X>4r+YM#H#492Y-H'O1f
%3j7^I$4#tsql@oscA`&JDr3d%^2<C`,0!/A$N4[<Z5kDOjp`Z9!O)DDOh@q1&t8!!l7U#.pHB$\\+K73m6])_^&<nqKO0rc;#10q
%$0oi!]s5(d,kB9Rr".!%X;s^>h:g_Tgg5?nCu`A*_ti0(<XYte>f5YC]D&o$R<c^$Vu7^J=6jW`'\V-;l`<T7OJZK/f#qhQ!n#2f
%2nM*Kq:TZb=nDX%5oo%Idk=q9kO2_e$uO&YB'scIodX_1QuH93JLgbjNDkc%`MphqGm/mA0"&LO[!qTmHCd?Ih:d3Xg%baoou<&8
%'9)hdk,4-DV4jk$]I'$uFVPXZ1Pto(goEd@qn%LRb'3Mtq<2Y_(dd-W%)h`3S(>453f\*_)`H@TGH^k>gD)3FmHo3G*pS1_*'DLg
%0A_%bhXK6Kr!`_;=*N7l*dh(>=F'gXaj*tkW-V@,;pbM[TpmX/9hWdLc;U/5GcQ<%;2/q_qc63#,8leggj*_c]t4btSlRT9kb\Tu
%\Ns]'iG%q3*EXdU.""+$*9K1EkTe1&2n6me`Ja_E?f/Bf\M&`CR^V0]r9\Y+kfn`SYhFdn^K98G99IY*F:"Wq@UE4)S.8b1](#C9
%rEFu8>3?is$dSmP!\4Yf++=Q=C&?T;l^_&6k/5kF$NtQ8biN0Ggj<8Hh^c<'FEP<Ha4$rW_]<[mq-g%f8b[iNr8T6Oc2,QF)bU\_
%D]TlXrVD\2C!8bJ4+6W!!rngdmc%M=<9EN#.=ZH7qhH"Bn<V40<=aN#9,.0A/hV`IiIJCEorDp0oeO(6)qigRT"HZSE,XC\X38gR
%gk6C5j@4(NYB"uZjmOl^O.(Ihc&IhIJL9@'I"t4jGXqB2ZtW<2=rj'rn26S8Gg4haoWd<-3,#P6e`A`6ZO'HfbNd@6UX%0Zh#<f&
%#C+-aeLQ#RojKgU(Lp\*%s9"d<\;g^L?T/*S*mn"SEqih1A6&[aGX-*a&VP&r_Q"0,F<CZ,e/eo;5"BlG,i`>]_ohm4T=j3rqS0F
%TE0mu[hHr0D>W7E7#H'W=?Z!2Zb,><eYSVi:Lg$)YAP+jlP<1t'jPSQW)rO#h_2/oOku'=SjZr#Th&C2FIW(ressI$,gl5T[Biqq
%dB3(p,;7$iX,d2l`4apZG]7"1-!XPRqbX!9m9;f,eYRIS.a(=X&!'eYhA;>\)>e8Kr9t8;B_::7$Qmksl9+%OD,Y?odeS%mk4%DO
%5&.aaVAM\Vg(q/Z`q.ON?ek"^?b`^\mt9eMEdQi^X*r)3mH5'(hH6_kkiCf>maFX>Vg>O"MR$pXn_>QqfC5YT4ad&`\%fV6lS2X,
%5Q$fBe`L>namJFYr3B;t)B?Sp^UoPJPDFODIsU_uoOdtaKIrhR'FpF)*qm@65Q5X,1OXX\ouE7oeGTKp=!ne(2NG-1l.ZA7K5&=b
%D?'<j`PR!c][um:G.>6)]7%UM(C0nZENOQL*J)Y/IT2Ap?@>p]DM7@=F1*+6%5cVOlh^RRXf0?>\U=24I$9VLGq])?\$-pQe(fDd
%aO[B-Xh`s)5:W^,Y?k:EdZVW4S1`4W`hUuZ:U#*7064]%X$=l[aK=$>jjB";l;D&nW1Ks^S*M`Zh`cn77cjQ-?E'/QjgRjo4)<gr
%DkENtYIAD"1\"cfk+=fi%\J2&Zu(>0-Sc(pp0916^R[I/+5co=oMQpG%RF"SI^^g@%Us?H;&sfJe&oAYEsJZ).iX6S5;mi*E\k.3
%s3C#F_SN?9HbeTmcPp6+[n?j.SepX'HfK)4r]Ii*l,<c);f7*bcA`m1H*S1Z]59hcWuKg5,eIDJ&(-Q<[gMH30+^4JDBV&Ca=lo'
%(hPVb%8V$aq`,\b*f&b0g)7-*jpc0ZI\DS.e@iiT_L<K56(YObp;uRab2W\D'<P8MhOO[q6u/]EgX"HhLRW4R55HhuVW-.GIm(Kh
%B0Xj\::FOrHEpCD/jQgJ8,r>m!E*<-qR7T"p_\2O=CT++Q\Bc.G1sLi+':Pnejn%nQLj4EE1ppb"3*507fV$'ERu*JP?e-2+qmU-
%hYT"hpVG&Lp\[n`XI;Ad?^V;2^GT("\SCLY@AnTHK.;BjJkIcK++DL"J%kL#`,PYIhI9oG*R,CdEk=9dXM1//8$N"i4Y#M6YGo'e
%b\n5sF6?4oFlsf:kK>Irenk?]ekH:YqGu%e6>,IK@F]-8^r4h7$TIK,0Z\=mi'SZC($'jsp%Te'o]tD,^Ln0U]s#2^mB>'N^+DGt
%LZQDNelaUfq>Bea+i!VXY;"Q>?t\=ba/f3n8'tV,2EHG^\oAO'"Qo@5Xn<\3n*0,[@eS[:f3kX@Rg:d!L/o8mq8IOC1ahG;hJCEF
%%_nZ2@K#cf=plEd&mtkrIMi'Q^$R\+mq@2Y+7/F%1+(SuF7k_upQMT,78&rR5>DP=>Q?Krs+tn1E5$S2\@;9ZF)LSB!(q=d8Mk='
%(VYD,XPTiLKXNojL/t?.o%@(l.gb<cX;:)TqtCj?6q:\r16'g6m9)&3@HjoMa&C=@,^E*n'i0'_H/W?ocTeUI8QXas*u3q1DhcB%
%-C'#Xq%it'RbKo?*1;JCX...FB/bJ3M#_;`C#_^r4M1TI?LuHL.I-$HYBFr5SN$JZK9=FVelegQIVeB[L0.H0D_L7iiDIFlV%j-E
%emFZND[i:Z(MEq[rF'F#Yl8`a7(`CZn%NTP^MVe34*tooiNm#g9>i)O?G;3ZXsE94qKbdc^iR/_K/kuCM0sXL#DD,A04QA(`q4WL
%meakl:*WpUSM`rl+<aOVmaU<64ofYmh5IK)s1Yh.h^ZBYkF^#F(N;T]bNq@QWl6cOQo<ZB[ViTV5Jum=!HIN#T]"Bj\BS5he@pXl
%lh^qF1J;@3Bq1f<g>:DYc'?"SiOFHCV6n#0o'9_^nEh_j6V[14^%m^\KmFH8-+j8]GU&&*n+7:gMYH`<UH=H>Wr9U/W,PSX54!\l
%jm0c<bXh'6?MaM+%sO6ZoZrMHYNA36+Gr1!pMN-)n")bf"e2VPefd;O[oIgjg:I%XB)_V400f$Tb1E-=8M_7#2Z[gnVu`4Fo0]p-
%q!(W.a77goZEL0%$O?&PMhT]nd=1PEStbmeNK)+#G/.=c/tN48_M-7ZO2:hYNPk_M]DSqH;sCW!Yn;'N.sB^fAD(\MT]s8W#MdI,
%5P_\WUQF55D(NA6Fm?YRU/F3X\=5.R(JjYs.h>:!`SZJ04s"QX`/l<'fn6]I=$U+mbQWpXRu!MLOp*X.g\IfB^HI!IaEM[3^%iS`
%OLpGH67qp54R2pZ[F=6&72r]-Fa4D8DQgBRmM:Elb@itcI</->.q"pm7X6G4S1pMB_>Z#:Be-nV\_[,U2tcsd^!gM$NFH5+]<],T
%n7Ctk4Nl'^O=nW_]^b.l$LRAEqp4hgn"X/jG)r85IQ2"g,D-jeUES'H-cdKiO2.8=(2g,6l_dN$+F4(nqtZ:1)H.'Do%3JMe>a8V
%AuGP<QL()p_Ao&#m/$DC6N5Yt,;7/kC#!+]m>n"^H&0>m[U/7b4Dp+H<k.bk\<]@ZIsF:Edm2jG>5ko0;<@c$::B[Mp\a'bTW8,r
%;K-iTe@GB4GkKSD&,h2pbCtS&[nH\T`#\5`eGEKrDb&^9O&$+,E=Y4r)0FY"6Z(uN5?\T&AE6bi9BF'nSuqIa.9LmsI/BWgJt?NM
%28mKf$?nGl$;]"-]Ep?lGIOpSB+Jn%jK#?KgDd!,Keeo>]]2d=q<[5aSG`NujApR\nh5<3q<MK;\%f'V+>YT:,5uPdR&fDE6?dOK
%(OnWX]Xn%&c'kePmBc_Wj"DBlJ\C@66e<9ENh%pV`6&GVg_6N%'^fdT2nGh\fc,.P[n8fa*39%W%j1VeNQ&;\-ae!bG'Nqf$%mY`
%=+%-Tou`7iGB)G$\6o)ppMMY8aQ:Salh;9m$thLB)0g54M/_c#oDe:L+7Y1_Nb:@.YNXn</!Hm#<-s]#oiL;Ce`)L%Zjm`SEdPDj
%P]k>rO"$JH5ePdFDVFb*kY-.ST\^PZEr1mq2N"p;&r'8=is(cM<beP_<]aNcGN-MIm]c"Xm50Hff,8U0H*@!!HI8_#.ue;.lT6a=
%MsiM![:cWGNUTiV>b_lGRtIn:)q\N#>2>+@Ahn@/iH`EU+'\%-bg.8X-jU"L8)e#G<;g\uh8JZHSlg_[FI;#bid\V"7,mq!+9.b,
%`Yne_B"LMfL7o'fKDj%q*b9.l+$aTd7.1,E^PQl3_f6aUVk*#j;t'baj$+R\J!S26gdeKP^*c@B11$:<J.);C'DHVt?rU:TQX&JC
%X>H83kl%^\"BOe`=$a%:,EnNahq)#g%s6sX;S@SuWaI=#&;b,YOJKpE6^$/$1fp*.I5FoSTdo#j8"&pb6PV(?,VHTTX_(bbZN9PE
%ghXeM'Ubtp9&U)P#$F`Q>`]X*`XI\Y*WV%.RIC;Oi_5^\rN$F(CD_Akl-[g,WEn8?*qqsNSoQ)f."Uh+$MQZ"3Xi@/'\Z@u"89";
%&EZCaTqs5H#>&)j9+eD2rK(TEoIV05#8ps*+j[0=fnT--1-bE;!LItS?K`V*A@8V*'ql_(k#mfU<"QPW&<%N^Jlu4a%Y#`:P?-6S
%58n.+eKI)UTL3't[a!laUq*1FTuS1]:IfruUL>Z]IZ\1fe(RTHA9D`@=+WlO>OT*BbH?O//I0dS:idt&nR\*m/`QOmi.W)!!/:&.
%r1[C,rstBc"O2p.7Fm)?,7TBQ@Y(9,!u4W@-WC1@7Ljl*$rNu+$0i*8M8NLq,.!<UidLSC4j.g4(b%fP,6AJgZ@U>13WkHTVZd*s
%:hjV76Y3h!\YX&f)JUZ_,)'X"+@ui:(LT7f^3LDnJlLG47X6i)0H9jX/,cP&N"Wt!KV8MLW!&.5:g$I$N)h.QQ]=\LJ0[op;TK!'
%A/J6ueIIo<Pnt:2U&]]D$*nIU6"YZ"938,-\AEr138m'6-_qj$&Bt;,"V3rt$6EN7986>pnafRO^bha=+k7]^@KZ[YLB0?6_<DV`
%L1B=r'uCh)b1I@3L.?8^%=pQ,,d>=4NarnQOGF>4X\j_$>>iP$AoOUu#m;!QkuGSsGnu3fVUtS?d#Gu#'j%.BCVZ1(%aPs.8KUrg
%B#n(N+Am@#Aob\G&(Ct%lVD3$$3V[1/&7AtA"'deL*WTlA7"26C*iCRBsWQ@2#0HUWh=MJ"N@HZOeFFf<JsH,(lT8]GCZRtS@p,q
%$*+_C3X_`D#qA?X@18\:Pr$`IjOR)K&.L^g?g7KNPQ<.!+GF_Qq(g<7C;%Em$3d:Gepl6&!Y'N\W^kMGao[%FNZ'l#Or"8+279.`
%]*VDHHfTa<XXO?:?mObecT"JSH$9!=@pRBZmeW2$Y;^t/-d9flbIi<@LE:rcpqk+g`\F7<TGc>U_D8LilGHL2ReW#hg,@&t8.JjX
%`di#1I@M82$]Mm4[h]k;-'Gdt^*S&U2U:/8*YR03Ic/(u0]^)'7@tGP#(]Wf&,iS*,c/_:ohZg=HPS_pU\_VBH8$#lTOmXekQ/"C
%*(cV@@<">kA8s/q9E9TK$Yeaf0hYEu1F*`>MO&h^*b?0r&KgcK',35RZ-\:,-7-_AOSmWYa?L,#EIfn5=mMb!(nNNRQ-)u&d)Adc
%1$`_!?k&h!H/)4',"]t`_!geq",DUR[#7Fu3t+L6>!7_),`unnkX/&0'.*-ils9"s&X@QgDB.Ua4.W%m>1aFA12]Wh&s^?E76&2G
%_4_\!@J^I>=>cBO[,6a2-o>X/$62X2Kc2)P;-k#CJ`M:6=XFpfZYB^Me*E_Ui7q1L54"BI5$18sIaKu_-,R0cDk*9YNXLl]bR/ps
%:4<7s)`R60apSp>bR%4.KII1`Nsk8!@9LOT"HG[CHEg;!^s"P.=I_Gk%^U-t9`p@m/@MspYlP,)!,/+E!9-E$+d:.@#=3ufS9n"4
%I7B@\3?_`%/4%,qV00DAE+Tlab)<6mSYZ<lWJ_Kfh2i=!kI!HE<\V<O_6/O>A#c$S\7O]7&]XFf")Fl'/rcn-)"S>2A*QF%&^F(&
%WK!b>CIcl?4AB5AXR/p01N"*T?1&VG1MA5>bCG\p:/_.]k>niSs'U-GQ*ULBkAtrS`+C1BU!*q,i`/bf7e",b3Zoe(dtH5$3N>ZC
%O9uSb't#e0n6ud#3+g8t@PW$P9*`n%!&@4q.VS'7TN*,*LGeF55I=/fEXstlYdg2R'g^WIVjtq!1MHY!g9)^BhEuUVLOl!RNY*1l
%4CRCYQFDYph&s(6?l6[^L1TRh'Zc;$$H*Vpc:Tm$P-dCbNg_0uDLEt_c]J8tPBNKa-=rMV;FBQE3cII[Umi!oUkp,&p%9$!#pT1#
%ZuU^+76)NA#I:Z=Ah[7bk%Qn)*dS>a;V'TXShP1.oRf]mU1E&S%8`0:@Pq&7I9M7))6!h3I2XrX$k`9=GmafF--%i@<ft`S<Xfel
%%QgRl/!J>1&$Qrb.V7&"4u$A+:Z,3G/"nRO:X!G:*/!n1bnH!KFpP5Q2e4#j65rN$-Ku:(T&]%8"Hag8ZLd-efO^oEo/PFDCs\%S
%OqoQ`Ta;kDP"i+sVBsC1]TY/t,<G6iW0k_:>lmZ4HZ\l?$"Z1$6fT,bEmMb5SB6#I3-V\F@X;FMp;51Z:sVn#B/'pSSMLA$3-(<-
%dMLctaW_^X"'HKG1&-HKN3^6k$P4gWN?%U2rX5<Q@J&b6&)(L@*c_[q?.'d59StjM6V><HL"7AFN^4d7<R_NW(6D?n_SkR[o7\?A
%#ZoZCJn+)^+l2cu>u;@Q?joS_JHmns#e>V`qNRI((oAWn^dj@k%#G?qSnP2R)@)EjpLR2H7ZeUAAJ5EOK:Ze43O3QdEBp+_OXISf
%;h-B&>:OkQ)@Ychd^015?p[U1'.[gR9L3'<,UVch?@]"RhuFop&IDQU&9D7;4Uber+%oIM8!Sl<OMEk#:_\Te\9^,<V\&CB!3n%2
%1`Z0MY[JRK(d[U6i/;[eC^nG'S3ocJQuCn8Y.W,C":WslZW]pnL%O'ZKO/=uU>U0cS`X7$\57lf`IZ%poQGt.mD/R#L2T+/@tRWO
%UE1J27,)=24VJTX#iJi2:I/08,QqVj*`U1D+:<"o0LY\n>H34f[gg:8R8a]Cj9Y,"*,BR,0VO%'%/^\UXGnBXb`qFu0=KRUaNsQK
%o"t<'6#^cLXOb2kB\G_r.74[eQSF+L<mjV7./en"F0JpL%jja+W-RG50nSOG70KWMA4!UnM57Pf,`Lgr2Ri/d.&KuPU7*CgA!!n=
%UQCKi9*u4C6<q^op9bh!+U^@t@VpGp,rAX\`)TMI=a4UkI6t&h7qoWO6sWq<bM_MR@P3koYV`1l#ZGG`"@p8K@hY+K-_-)T&rdKo
%#Y!`D$3`k!_W-FSfS6W)aC>Sg_8FXnW"]MDJ26uV]it4E-jVa,Q4XGpA3*[,Zl>_M)@c(QFXu47LUKg")#.em<3q()6s'fO9`RRT
%8<P%',QZR4ObB$$e/U'MI28?8h$Hr?9tRe5H&LL1nH(pse34oKD4;(2:._Ci$ugf<_LY+EBs7S)5q:^j")9U6Rg0/><TlD=O`@h:
%Fmp#"%fu5d$Z+lIEK^E?/Z+mfL$"J#)?Z#1MM#c2O)>2%6MMmP8"6I@;+P%G4;CJD2hYj!/`m3L("?'*SrFk+[GXRu*Hk;0&2H$t
%$kWi9,1.X6>p;,IRY2!/!U14qb&S(Z^4eq_<#JW2;,3no7tciV:gAbVK'bsh3droiC*Gp_L1,mJ4C=:Ye!Hp@8R#)rkc]:S6=Z``
%31*2W&6B3U#iMR%!>:&Si-#F./?ORpMLqf/j)"'%-)D+77r9S7#>qP1P(Cg_/PCU*\_Eh+kRg29A$p;7%n#KVQj7V?+p+YMJT=>K
%,RT4n%\LV*bg%p:Pf;1g'!i#3BqRjV&uggd6fDQ*j8"e1LkSW.KMrT2&0F*$KBIW4@WY27rThHk$#?XT7H]8=Pjf-$#@W2i$n8PK
%%;tckgcPt!`bth9,G@"b.U^iMaOn5G,_b*sRRWZ^mS&s%U#6]^1IVl%+TK;<CG^=j\(pfcUKF,jeghj\F1Zi1,iTp)"^sKVgn`4=
%DAGmW)iSg@)PYR5I]s0=_]TJ$-l@)\\@WG9$F`h4"V0<+=rqpn8_*@N^#o^^&j_*)-4[LH4hWoRq_oYs^&c74EhtAQ(r-J@1X=a]
%'.\(c^hffn>$H)BH5,^<9U76&-`#Qq`P!h]X>2DBg=!;(5!Yij6QdfmmkVdqF'Ira_f5rog'Qa-/hKe1d$NJuO^,IF_&(a_>]LS"
%+J*a<LB=5FA2aq,`=\n9fX#MC"%*]=q[[HKPg'iW5aZ2lB""C2[&`Q6]3H>j.*C>O&5?7K`$IDo`1c1-?nI>3oLf+_pEBNUS4N`Z
%i-+fVBtZ;8Pp72H*f2SkG"5G_9Z[6fU$p]h-Fa,rETTcGdTK)oL*U=4"p<<tD3K!U>6CK8+6GQrR$kaCCNbBp@niP4W4jK+iAuY5
%b5,G)*7/r+MOtZ8)0FdpA\gV]B:#D$mD+/*9s?_f'*p#A"fI-P/Pj1<9^QK<9CQ\Y;fY04@&49MA1iB>4[5f9l,F*caUMAIAr\kB
%ieH/@_#q^\k;p&q.Wj)P\1_`HKP.Bn3#3MGM*$k*3N`re+K^"]4B'")W*W.4IOnD@loGGmj+@Q3ICJ\2EAL6=1q=NN9s.`_Y6-`'
%:kuJLTX*5#,(*!.jcl#SOo]U9qMA[)7hj-M=?KI)<_jmh=)Q)a`k`Rn)j1?UEC3;3QS_59@M4NXYUW@)?adl!DR3hIP7^+E4,Of<
%E_pqWD$[1rNeJD:R*&p4JqXjjgpQ/C_kC=&chMBdlT*;q\C:g`GINMSki8O1"J.r\2]>\U8D91m<.P'J]]s4J38SkY7f[?(bY\K,
%!^/0kOG2%^f#kq\%+?t)!>Qo<[P4[K5a4>JE*kZ*8ek!an9sV4"&04$SnHZ-c`IJ[gIC55'kKJ6fJDq9#,1A/ZQ")O+17j%"O`EG
%;k6CVUt]LHh1UN@cn-t(*QLjb9Z8rI.`7q4$3A05B*QHHC:>B@"V[T:A&E>A1IH7b#HQFUL8:1m#Y`[p8+9G:[Q%E,g'>*93/drX
%n@-ir'7h$[[8\S&4qG+@%*@m,"^tfG5RP"!'R0g00iYXL9l%m#Oc="(MGn@[n(G`Im;:(jj#T&7V[19";GN-f,LMP[NO6tJJlA[G
%;.eN8^FS/m^]_e,l_m\9D!)sA3LV^mDjYRGG\:9$PNdF;])[IJholYqR!Y.pgp%q(:/$lW>'YFc9AY>"7_q7UWe;K<na2in2FqK'
%73Y"i<(rR^(;Xgt/M9VQ)F:0D[l6-2'L?!7j+T,?"Gc'H;Rm2Vc`4VSN'"F8'(PN-\>sm]L;/3C!i!XFUI,VC7R]r]-3g'`+rICp
%NgU&GM6Emh"`/al=X!_#C`b@Tbq0V<o&k`7)4mf3L!5YtEf<Z8Sj5Oe>Weh\0^eW;ZiRlafk7guko_S(D(-l3c%Z3G/HSClK?Cha
%!P%d#P_*>ATkPoK9c6=Q)OgNZ^dPKT.U[-!!4#fu3@I8&dY)#_Um#-0c1X1MHp=hEiUt2oF%qa\LS``lR:Maa!tp8TeDDhIO>br,
%Y88&<]JTt-5S\j[<M4GI7ZHUUm3d.eNYS'TBX\WdK="W!>'SKfkPM[j<aZ8*]**]5G$CL/Q:P0c=2.85\qV,jRVm$:2)J?0Rp#$E
%h[=Q=<Y8m#3rSb:DE96/!d9r,#A8,8[p'/l4'N`pNRU+N($miHoP!n/<_KhR3m15P4^oWu0O"j>%?mJU,!+1iZb/G20S.B#`H>SZ
%loV"UK-S]mNJo"Ed*1i:-a>grSI9WS@-M]k44%^'A[6cR2`b`i&_.5"(E??f0VI)t@B@1@P%@"_Q/#c0RQr=O8ra*I&@]"^@H%S=
%>dm^U<5l]VN!2Q\=1f3hK:3ZeFW&mk*S:pnp'e>l?P"-077^0P.H%b!)gt%!%XeFiG[+&G-0BKg"<GZNN!YO^+;Pq>TOeZCX>EAB
%QEXJ=P6''C)O3ZT<e<%sGO*jsYt9o1XCd)>U;u5R=G;ZUcC/c=/og42A$.4;`,p\`$u3!d(s>lM!h/,WbQ(5:RsC/rXFY.c@GLqZ
%AARUVQ:d#XZ8W%.c6d))=\+.(N<pJ>h^W%mEmICo+:0bbY9e(G?p2$h#p"V>%(A&ibRt@@6:,5,4fnIbG$\$JA'@#P]jQqWEq@\E
%feP$ZCrh=GTF4`7C-TTF(8.CMoaM[0\N)h@GneUJoW)YSd-hgm&oB:tHHL292R'FHQo7nik'U;2$5sC'%eYRtJZtLLU5lV./MYg$
%YGs>A#gCeQ\9\JJ'kV2J7'Z*M!MQgI4:?FS8D'6*!.h`!E_G_"ZlKUig2,L.J4qGOcO4Sm9:rF@"EkWRQ@\]'1A`[H4+Xg2*bkr"
%N4:[?%C2#/du6=Q?%\3ukcc@#;EU_5%S/jlJW<10.M4?Jgru>+W]o-g2QA5\M56\j/<6B+&e(=t&L))Ge$SmLf^>5,HP-I9U>3Un
%+VilJM5e;DARJ%GC4J#o:/m#g(I1lS[bJSo;_*FlqOXgU&$b]CNmEo4@u.c5OTZU&&(ZA3i?Rk.34$\?cOMh"iJ&Z_M`sk6T]F'[
%d#sFe+A(N`Kln>`E`+lJ<<tYZ-:7RWBWtC+JOp"i6]4PG9+ZkgG,pTPTn2i`>6IUE?A)oP!@>ehA_mh-Y#SPVp*cLD#d!p3:.^mW
%dKnZtZCAQG*oXJ71ni?aF$dBRl;MPW`;NW?/X"N?'0JD9PD[3q#Y"1mh(9[!QQpkY7h/CK;+/>lV4!\N%qqAP$W;&/2\qL+(&qi\
%4bU2K)H]BK(4`eb5$'Wd6uYNIBr+OTJL$0nE>JXIj:g/4Wn.q-d=qk7]BBCgUO&Xf,-:q^a(`OLGZacN[7!ol1fC_8W>rr7Cd>fG
%8tT63(a1A(fq"'p5daD5M@+-uF9gA`8@BTP&Pgf6r]W#Go0XQ@aj>,:$!2Z.g`4Mb^>Th<?Z8rnfI-M'%Fo#Ij=75FVMld!JQqg;
%#rQRiKYZjR>BWBq#\KW@ASdFs@g\:+FVp^`Z0M_^h,%CaB,c.ddl=m3o@?`bnZs:1;+Ten/r_&S8Q!.9!u>!#MQ^%21krSG),Chk
%'",0a\]+_*VO]lueB@-BY1@-lB9(6b@6I(I<=G4]FQHu*,V'@u*(.8RRmkI+CZH>l88Zg1oZ/@=_+`[kRkBMAPN3H"KCVa9Pp]/<
%'q31i'W4n/7ug\]f&?7%e$>.0S*7c9O7MIfYr(%:j#MqF8nuTfqHsY`(nTYoF>-Hu&qmhGE6mD,mS1S0n`H78/QS)98"XFTC4l`M
%EQu^I$X4h<ESlLk&g7Td)$Pku2Z1*jJc'I,iWKOQTGLJFM;UBp0?aiLq8F:DGSC>dO;]9](-_5%2]TRM(h!.I/l@[tr?T]ZpZ'Zk
%_%>"A":lnMGH_&MVeA(*DDV1,SKjp4Sg4US]#8KZe0otme^7J(WL/l\?b[Ci=I3U4#9::;@*>>$8]X%+GEQj-<?&!"\NQls>eDK+
%:8:(EQ8$8HUfi1>g?hTs;+6KT%u"LU:TN+=-m_/T5rf7lJ:sD9/)2F'R45pCZrC7;KiNGV1fP^\jI%J\B!N&/pmaJMfZ22AF;L"!
%J9OTp#B[+(F"nW@bQo(F4D]*Od\/]IEpfE6AJ9XCB`^Zkl.doR@mT;k'Z@Kj6A+Ia[@f&Q!Zp)6';hQJjP2pkor07(gP"9Y)-&3l
%=Ze'F8_Ptc/:kpB!j[?jHT&[V,st\V4ra:6Oef?0+WW!G%YOt>Ll+,"Gii/s-pHfP<O)o[<hT8k$kMo;gJ6^q/)#D1`Z7XBnXjpk
%b]JSdSMk$LE(e?de@43!0G_j"$5C[RT:?L^KSSBrb6'&Ph??lBN_<!;jg@?F5XgDuog<r-$>5P>Uk;a_90nEPOPGI'(GhE_'f?:&
%+)<n[M<JQEA@tRrq;gg4.%pqJ4m=XrBrZ[(UC0H;#X,d@"7mRm6)F#MBo.V%%*7E5##G:%ibGldX`4`Ipmk>4K0?>j>\hZ;Z9AIg
%<LZ++T`t3RD6n$r"LdA/r1>/*a`6BhiHD?LdK>&^c^9T2K^?6TXV);Lcr-9nDTIdcP/-92TXl_TBsQb,3/)BTN"B*7]hnKA8LQV#
%JC:1GNiL8J6]56t-5jqP<mO].+DnZVGqTp=\>.YXjNT6C-Er<^p;jX-_smF_*nS7d.V\:D6P%D@<<d<:7+(]Uit5aDBYZM']5g;.
%`@t7=D:sP@.EJ"qiQ+#g'%?.<Es0@bRYoH\f9q2(@@!q\W?%4l`VqQ;$dFcuhdn"=6`.a'`%5NHf&j6aE.TL<h_")u3s^$$R&l]%
%;5.i`J4$>i7M;75Z1]`ED0;QsXDV+Pnh!`6J[+F/:0/X]a88WQ'QRnLoIOrV780C\mg9)*>BD,I+W%N+iL.PqBegH7cl>S9-cHe.
%c\KK(I\&6-%.%;YoYWYn%dckYWe_%ZG\H0Wd1D';<0q4IiPn(?Bo"]gAk8$1`"p<nU"*M(B6Tn8Tt;M1)CgoD_Psl)p6fQZVan.]
%,^a<e_')fo7oc.(\tl_g8;ch?0YiS%,GHteUi0GH)<O%6:tI$!7j$fK3)>[Z[hdTUg@um-KU+n=fRkDs;B.\m^(Nc1hTV!ISUVPg
%@L[-iYU/^+Slm-V]4[*>rbN+C8rOg^LUK0,earTVP\TL7F?nPRLV3bYi,L4*J4dFh0K>W?7&n6t@f$[_qSKRs5uESu_&&XM1>[pl
%KZrit',<%,b[itMV,M6)dE0aQ1($sX^M^09VT8q?=E\7YiLZNYXU1\c#\=3p,ac8".&7b\,]VT[G@cbm[L#ccY]e1_kQehu9!*MW
%J"7gNF:SK<ZZGk'FHEh!7;kT3b\>h7--IFejh]0@U#X\!PK\1tV;"BI*(Ye(@!laK^nPVrU!UZbeUf[e#Z%i9>LP<>%!nk.Q.EM\
%nST5NAkZT4UfADN[A>Xi(*^+%?!5>m(_X>mCZFY[$>Y(q1^o$lWsgl(`2:cL_6ACFm0bVfXj.4-I+bsB^d'i#ONi#O?\W_5"O),B
%^/]/mOpkh/+]8/A^rfYYjpF5Z@)3E"X8tgV`#MU;BY^EL<4I$ab5i2-B$ScFTXtS?[OQY,01ugo8`3@Kq_gLD#JSq<fR5a-5;+!A
%ckMh3Ul3]</-4IU6'n<Uk;jhE(;IXm[%_TDN5V_Ue7qJRohoJ$:gY5;UFKbBL?h<mOUA_h=s*6__rar?erglFTi6LciuLZi%"grQ
%_FP'=+qb3(D%0A3r%h6TfT@Rmj%As6WF>jSC!m?]piKpL;:(gWKp!+F0P9VF,URE+2gU"%TL@st"qc]&-R9b#Pa3M5hLS#Vdg_##
%l6o4D8kTR[o$A"J(se4:Ts@>&f-G;Ln>DGp=iD*8:5,p>,@_(aCGLT@B]8p*'(N2d^sf'G\e#%G6NeS-p5NIe:%^0.*6er?S@-EN
%N)!'$PeQ)o7.,_A%h".>*O=\%J-?o-[kg>u7M,Y/%7+^SGE61/.1n_hpc)MM\2ssa/8*La-2-T>,bE'ID$<+5/8Hmr`2tb3\A;n"
%")FA'Z"ZVHMZQi>#2r?K!$LZW+Heu^Nor.%1fVm=%MBKPC4X_,FQj`BkgVC`+C.>_/Wl'@5Vou&"XtA]//U[/VufdP?Ai>$i\69Z
%'7ch`E5t^]+h5oN"E1R3JKrt3S$=ah'TSE63[U<\8N[X-ig)bkMS@INn?`^(!_9K6k?(7p>2]ag/#;P6FC%AOmDF!CT"'tcA1fQH
%`js!fMpQ'E^*]s#i&VKqXr%U*arC(4E?g_9fOK$!g&M6WDr!+RJqo6!(!s&2qD2b-"/IV%<?[7jKptj)\]J?K-4!g>mY3uYUl3ep
%OJ+6[#'n[gDarSI9mV=KJ_<'2iNS^h1r&u=+G.rPN1/c@EncE<5sU(?h5CBL7hB*$,cLc&<E[?9piPOA&p6J$?C6[%@lH`-@aS.P
%(.RFT)2Ls?la4_Ed0W^P3)[oP(,1RH:JqL7D-Xn**Sdn8/]?[^\=ZLY)Mj!TKYSNWCd5d#L*0o4+(I3?'Ni:e+7q8CQ(G+i,RWt4
%9@UNqE2M#J>%ehRN!<F<V5^P1'GN?u,^f6i<5ZP*R;&+pEuI'\VlF^f`qX(t<tsUq&r#7"6^1^#5SU\V.&E)+K't*imK6\qdCMgj
%,$3ul3Gto9Esia`qY'b_1:7t/Q,pR1mb-.Sj'=%\Sqn\n)<1<;5RA^8WeZ9ZnUmP*Hq9La1*[\gfgmAtC+\t/[rBU]82F-F@BD;%
%jOqUA3F[MN8IBfc#Z7gF(Fd),?%mhiP`@%J^@096#g+R#."t'FHmA!(:=,2KL'iugGuhBtfJ!O;KXhi<&d)_j*m[;K=T!j&qD^R.
%G0N@JB^KV??j/u7SQd;/n>R<V8BV02AY@-/pkWr%7H8D&<1p:^G>u"(Tip;e^?\EH`i\NXJ]D1%MRuoJ/9.>mm7R]Hek_7`!auOH
%>bR0Afs<S9j1-;.?pQDBE6IR[bc^`*#JpQiMFIk<$9KVW6]WPYcjnV@q9WO>ZlTtn8S?fn?E&Qh<@cgn7"F'scE-u`Z:0*UM9\q$
%FetDVN!IqSq<2-^Ah(%4QE-!5U@s9c)CuSYJoNkPYTPCMOb"!J1I`(TK^B3]EDnlY[tZ<s%_4$J`#qjp5mfM,'iBug9UsCdm>@fq
%G5lCrk$rjNU/.nCQtWB$r"e+^5bl<V'I\Qn$^tZN;1,LJ<oFoHQYAu<DAbKh%.NOB,;me&l?cR"4cEgK2T47=:mqhV,1.;UU@6if
%dC#Ml"N;>QE#:kX5Dp8HdZfQLc*ALN.D-u?ZjCPMF9dAR2*<Z>+nOO&"d1q8PLpVr#Y*=,]7A(@a:Qa?q#I!2W=i(L^iG-e#7+Qr
%bmR*)Z-(L7WU7+V30SUeJe='Ih"44&*g:)u,Vt:40oZ]3YDfP]!NGUH#3nW$h4I;-06D7:4?IIQ7t*/:e@(c1'FVtDF#sflRrTZ'
%PYt6cKX+W^iFUK`oJ&H/UbJ@G8ek`/HX:MiHiQd.g*Y6W@4ps`g7BNEWbjRsj7Q`%A:en6[l9RoEE,90YiuL[Tj,6Z&_\W9*3X;V
%k(F!`d?d=[FA!oW)!2J++;J0,`Db!7nZZis!h_%]XL`(^A!7K(9Yr,(J<\F)#t2aU(sL52ZEEOJ6=tD\Y^F^4&K%V.5s_;c.h.O5
%4IhVgeXh%!p6L*$5hm(6,E],Y1dlE2,S93l8/pRm1tY&T';=rdTtn1]XU7*NCKU?/^a;VR*k!qX$p>srGa;82+-MW$,Rac4I#ofk
%.?J!S-Gc-TAt')[%':WipMEPF@pW+Xf?2,q70I&up+^9bf*Ue</2U:V\YrB`[Tq`)"u"lN][,Xj-BP)%^JAUZmuUHQ,"cDWWV8Yt
%$LdTT_;Z0c*GG$pK>lfpG@8h/(lJK*&B6C:@W>L^DLsKr`G'Z#ZNlD`Y;'-I.`UI%7b8Cn1KYW&=(s)fMkfU`/@+HC3/'r,Em6-N
%LW+:UD+KW).<=Fb;.'`nJsX;,-F#Oa7q=$%:LJ1"/mjj/Lfg/Slus^a/.RTlK^-J71nD(^7)\(AmXH]:1BQSn*`W_\7+4OP#h9:@
%nkp/0:`+75)s/U'QJ4&>d5^Jdg\HiF31].`iJb%OF,DZ&=<,CaLOfm7//G.&CYF!H#-g.A_46-"#`M[fMR_4#^c9<X!Q6T-Vf3<(
%,jN`97=1RVdt>YKD':jXaeEb^AP9SE6fYEKPC#39F(cO%9N.KaN5d<9gF^EYSAMnJH&SX<1sQYD9I.f76q?e;3HH-*%+Pp.O.dJE
%k[8\071h'dVsjan(JPMXG>?;ELW,stn?(NU=Id7(6H'N@b`BWS5_fXg(oQRE"m6+A(oIr&%kWZ*?lVm%XZm'1.Epe>D<&DkL"-s]
%#0@"fTqr<pM[,D>n,eA[=tgEicJ2)*(e9eL1H-aD*'/<,Vmoe3[-*TY$cQh]Quqg;6#g9D4RU3W:n6Z[2eXoP`G+3D?nTGqSG(4*
%CDLD.:*YSY>D(t/36fZ!;N!7D#@m6*Tq,n[%-8,A<lm[JMDdZ#I7#8T.D.#RM8\@-1Vp03F'+s,,%<o\:n5C+"h0mf=<-TmCd&/`
%;k-V43Ql*@3,QO@`?$Q?n#&#uFBG'QX()5J1EmUdYE9KX`M#j9G,`Df*:>3X%acCQ%Oo+$\I9=1*\E0M2%.EXc9K<V*1@T/p-'%H
%6^bG<c!bVeUZ^Vb_W$/,IrSR1U0OLp8Lt>fA`+[gLW/4S.9V_:\A6n-Pec8i;Kn4+N5Yt_B#4Zd(SH@^8C1aa6.T66";HV+X+<&>
%"NB>8JfZ?.S=Cr:Mo.M$n>pLh/<5N5E9UhO.^7Mi``O5K,(#o'bsFeFc9aNBNY]5_5n8fOGjn_EN#A<*Ui;G!itN6sC?HS%m4?VX
%F>O*>Tu.M7_i[5"E?%S3W!O1K-mEW@TEF3g?'B/#T`a?%-!N@cJoTF:37nJP\FW&!>)WL\Lium\"65I[\@i^a`[SPCf=)_2(oQl0
%B[47((oL3`V<uNYEJj2DFZI&;j-2W@)M<$#iS=8h!ok!NVeHDHMaNrPQ+C';b0^ad9G&%q"&XOF/0g$mPN&5pN9?E?[RK2+`.Bs:
%_04JP%kWL@V"6@Ri]3^MZu06q,&p-^*(9"P3/-:G_ZU:&;j`&Lk*gul$+963oX]=&FL%2elWs"JO>s%TcO,Yn3+Y<ke:Y^`d6OoB
%/.MhTT72^'3#m``au'9ZNe7erb-YQH_P0CVEt41.=M3iu&#"!#b!dnSKZ9RLg(hp@7b!=+Ls)H29%oaiP%^B&)ke8LJZD:<8YuBV
%)c=uHY/MY'LQcFg>QTjOU;[cs(l&ge?k!1t0RE8cF,C0[,FW9.`*mX61m;`;/.Mj,*7fd>SAL>;"d\/@3(9[?I8HGsp)A]?'SjrC
%YZaIlgj,;n/JP,PI$tEg*#=;tmP[E`(5I1(E5mU931t6J=a\*GPdH4:&mu^)*.9[j$-(rj0o+*f(e59qZ;FT!n=Em%kKSQt7!+fe
%"633^ZpT6IN'fT0be\?+`hBK!9.q8%8'D?&RgtBUpjGQ>8P`_6;&hJf@,-%,>qHtM.?*ia^`47_7#)pI1_.u=mG^,mj"QnOc:AKb
%Vs$TWVqr2K;cI=>ZQt=G.K!_G.:'2l*)`R_Jfur\*u)GSX[D-1k_G13d5Y):mQaZ:j%tS[=#iQc*(nZND>t*,6V^!MNoTUg--S7%
%>s&TG#1[a=gj-I/5!86T<"3;Z!8ZX-?PPDq$?6HA^)7KN"1>Z1Knl]FksV[mp9U^s.\Q*:D!?\K*=5E,n.M[:$B[>9B8`apd]T+@
%kB5N(KYm5!o@.AX@aR5XeIS2<09LL]Oip5X,`'BV]/YKir*;mlcO<1/FgD+&_$4ot![De9!HASYnI'YfH;!7!^pNnXO00XYFJEl,
%2rL']>gJDP0Pt^U@(i:ib^nae.saW,OR.j2+kDU1X=JTka7T3rD_K4)MSB+5="J[!K3,a\=*/;lMm'DD%tRW>=c1ObTaklV-DEJs
%Pd\c3Q/X\>lB!J0A'o)iAsl94T#)f1/,T<S`Dro;r1&;11[F\0%_UuQ()>kq4C3u"ha1f7bUM+H@@W$U29Kk_0UojWQO8PnD+B1q
%.DX,nYYa.bfp&Vc<VUf)G"?2:j=#De]nn68N(W)(lWCK+8e48B*oJpg4u^uLO+(RAk9CacaeKXi]&,*4&$*Laj0]ARKJIY(#cpZa
%JnO3N1.2CA8AdQeMe9^BeJ_*+R(X)EJ9:=a'"YN&^0m_$?)CNJ)-#B@OAsaDdd^/k1KWK+^MZGkNF.A1+nE52JT&cll#IHMrtsoh
%H'CmI=Qt]W2c@1HA/g#_``@/Mm3DNk-ki<'/On>li`EMr,_',iW+>P*!j&7,h00>)HFnFh?^fgM>5!HY[.&r"qAr=>BkaZ5U&4)c
%PHXM$"T$rmdaIQa[#(WUnG6,@Za+OWa'AU]<u)FmkG7Ie6Dn]R47'+$jj50[ZHeGOi`6frQGdFKYUD*@eW<UsJ^Qt75W=(7Q^4?T
%GsAR@:a4_Leb?LD>?C@:KuCP(>$sObfNhR27"h6rIBl#@ZHi.;)ctT*(g6cuM)LPFI-%A[KXn#dTe:%q#_)`50$V1Qm[B#&GX0lb
%8onc`Q_7(Od(1[UU9DXhbSZWTA$$Jod12(mdJ;dQ!ka/2&[*Ca.uM&_K2RuALOo3/fKFV<RrgnclEQuh<"l#Oc[OUYmqKSE#M%.a
%VNF?L#PWO!#!R5P`DibaRCG\,T8J\Pf,eKOR$cee`gc:mU]:_D"G4-^TFmc7NUZoU3XOoZ_9Gm*q^U;aA_l>'n+6X-2ddm6#]V-"
%_QAt(iu0RH6rWMAUG3ZP2kH*Qiam63KG-,WNgLQlBg?4K>e&FWX"MXl-pjQ]SG+j=NmNHm0@T-=JaDV_!O;W?&'uc3!n^N/3t]dE
%hXQ9P\2j.jDF4g%dnqaW<PC5C3Q0s`G^R\>EeRa'FCZRL#JkES<RI@MOuC7?`_A2)G2e2qpVf;%oKBMmT5:Fh>3E-Eh_kche0GIs
%;Rup0-&+iG&j^a.lN:8E[Wa_1oBT<Db8b[+imt!KLB>%?8^KBt6T9dF0**Pkp9jjVQd+_>h=bGUqI2U>0N"nH&34'Ub`+q='I:]0
%<*=i&Pq\gb6(2lCGic?tL_^*CdGo4Vr9.NZj(&1]\a(40#cNStGo&S#eo[/nUI\(j0R:U2*1mC8aP\3CU>^ftGaftq,Ui9b59u3k
%g?liL.L^%C8VLl."m&-2cV(q'&"sE5]44g_cPcC"bpV5i.0)ZceRInlhM<WF5$Df7lVh!*l"#C=Ef\!Ogi,shV[nZH=rQmb#j1ls
%rhe]o*@b.-QYT'U4Hs_-JNb<<B*kE*B6^1iLSq,u&p_>,*9irRL7r,ZgnmM;d7;#,rP@fG9V&nY;F2;BMo:]B[h.$Y.#d'\Kmp:Y
%+=JJI0_J^P`d6UTV!k3j&K-0iB9"<qV?1i13&9o1\j7WK*dJ?+Cbh:Z)UXr@+<eSh7k4Gl\kf,P$Y<gG7e`h0fb(UQ@/-_X%*Qc^
%#=Y<kr@[GN9r'248Kp"CeLSKoXL_i&OMV!X#))k4fJ2WrOWV'h#7!hm#Gk?f/@;MSFMS[>YZr7Fa89>*Ad;;peLRFm1P+Fn:mZ`T
%[*VQT4CQLL(82UFTM3IiUa9L($&!.d)ae,(38WKm"A,FI85OIk$]>L"7s7gmiL+VjF@/11Lt+Z\I7[C-<)BUgqZ#oq>E<C<FWL6@
%!<5DMdN3K\mM?`3im\g45n7^%(-uC`&"6JHTM\8e]O9ZI5I&enqjdF6=ddg*/N2^b!-Nb&cA<4$*>/1_3+?"`6FV[f?$h:uI>YG^
%LtTRs*n\se$pc'_"L'`6:+mf%Q+5l"j2t'G1Xk8]pm9M^_,!o)+=a$[./%U99lI.#$)PBYU(S?1XI=j:+Mbo.Doi<YFkM;uYHFk0
%1Es&*1,9\DIKqqZ$p@EaQWkE&'$n(^o"4B')EfdFZjNE431+tuMa3Y?bT0;di-rh':CJ.W-A.U8g^/F=(mpD,a(QDsOmI9;:b2kR
%#$ZbCP95lQI'5hui\id-3?^u0G(m8h1#qJBj6t/oHM^P(l^[j(7A-7XrCl@[@[15DF(uD<j!W$+0'_"U5o/er<[qNaEFEs#$H@9G
%a9,;U':;P5\&^(QH@k'hLf+M_=ML-\K\HlT1`enZ=:dO?5LiN,XT>f.8qrEH-Umm5nAe/0j_m+k&EeW)*rk"0Zp]YgKnTGu>jEcL
%l`.'ljXqZ^4'!-;mEGdI2?,6P.Hk-N^'LH`=S`l$!U`N@d`0W_)Idi!q(7U*#[KXqeYa\hWmI%aM)>f@=;SWFT\G#/9^h7DC,pBn
%aX\*^$#2SkQ*<#?Mqb^U-(05W)d/:je["8k)4!p.)4%6ORO*t@L86n87bHqZZ6R:kZ(r(`\Q)L?"tc0<9\s#-/cps5iA[c"8l/RT
%&"fimBS_sR3.WZ-L=q,8.-dA^1g,0nfCG\l120DBBpoH^,-"rXLkA(-.ntq5b%+g]ngfW[%g+VgJFT$FXeDQtFZTcYA5j>GeQ`ni
%I]8!ff388-X/-;j?dc$1+_],<[>$I6BU\@7b!#&0(d@!IPhDTY`ouP.QL;V\N=--/l-ooiPk4J[doNCnqWA$tLG\\(cWBTH=VlW\
%2n]'6K23_*6iKsF&'8A/M95'Pk.;F8ioG"<7j=VrM)m^-IGZa`bA9$I=I[T)7]1a1!O4"VR0K'l&]V&gPB"q@AsF1".7Gg/!JXa/
%DlkM@h[r:0I:^4oZSZsH%3\da\6decIT)p@ZJBp&"oXPj9r%/+EBXUWNG4Da,=CH=l:<d%bOB_l3R'7'DCC+S0k@C@5dulq.O0c!
%,CB`S@n\Z;UeZr.?tPIrClP&2GdO1lF4=Cp)\bdGX,92Q)Cfb3)Pc"XleJP)BU;]!,`;r<QitSSJ4@[#SG4i6<+_p0r-F0]@:t>7
%fsB`h`!d-^dmSku:i,<_#<<7=hdj,T+G?Je$6(W(%&J(OKg6H**rPKj+3^8'bB\S9L0H4c^<h&'jG9VG,21j>3#TC:)TjQZ0JZ83
%6^>4-WTeN6iKcpoCn>Z9/[Zep'I5t3>Gqr^b#TCV88;Vfct"".b0r=U&E^ptlDD8;j;0\\c:=;o@TPP-U@f@7;l_I#Js9&;:bW^D
%>Q]65<(k1e?,W<(SnYu0pRoi!4W557:^!ceUnI-D`fFG$dT\46qq>KI0)Pt=-Y.XCp_ppf"EffMN%`#3<<c]3A5$I4#c),RkccA]
%@u.`0KP,T!)hjran?,R03,`C:-+6]_mCGp,J0C&eG5\;]p1PjOMJ.eg'@&NaQu7@D1sA0+1h%Yd*n<2PPT]O@$(<gj7HKTp6Lp4'
%Qs1:9<7&uHL(mHbJ6I4]7rKuqg'^QMq19n0N/=`D';-Wgb`W(Q\X2h<ffPW>UHG#,9&*.B'#>-$WHr95`Y/a/d%h-!Ana%)$nV</
%O<o-t<0eW+X;om:]jM9QlkLB>%S`8tXK3X=:5Rsn1fXPUJR<_'94dCo_;JMEei:k_E26=kU,fb\'4M\Zm^gVB\=BG*O/,t"qh'e<
%Fus7L+-6\6N.uTYD-2$$g_mfX7\>VRT<&#&!l>2Bk:j+d]+Rr:X4r:s_5'q5_GT,kgM#km8U>%sM.V$Pne->.dp&Pt+1/&`1#*26
%la[Ep29(-pQb`M2m7mulI-WK_&8_>-WD:>g<#3o]$qoV9$qAQpfjL&ZRAVtYbB84*0<X+0!K'Uu)-4/om;>3uF5CptH!nuNN<!n.
%GS,ufUH8pQPTC$IeWbrj-g3ud+hf+nA1!QXK]#p?&&m+6.f.tGA*L?NLu`7[4:fG8MUcY;I:R58b@2FNLar+SFC->eia$Y&mLY-D
%K2aGF#4an-*:9/O*-FoWD^.mhs-;.rATCd<.;.10bK[C+R%Jsk?/o=m87BR@*pUDFCf=$'5=n-BNAilo0p4C.H+$f.kaO]C6^oIp
%cmBgE?+,hlX<jk4\78LhP0#1JRg_8<P`B\lkb2.USn&k.`;c$1;'^>F$n8@X-$mpWMK8`kU1(=u*uR@DRC^=k&7quUIAg9T<]lUW
%?5gq'aCb6oTV9l??'=@0BpfS=o!9j#7HRM-^9?hI,q$I(f!JI^r)(:WmO7BoRNl!&>;u2)[(\.6>bNR\\6-?/TmZ#FVfS30IR<dT
%q"=Yp#-s2GE9"FlQ;`L3Fl7>\$[3CZhp:YGSrl%p*@[,V1*H4Rcrfdd]&d@(@10T]&aDmFHgl64k]5.-8,$iukTltnYR_?J-iFDj
%E-fohCCPjAU#8+-k7r_--59)pFS^/HE4!O'>D$=DiPeK3\iGH*-5&>#'n2I9X+h6@-El6eO15(m:d=7(FmimO=E6X<8M`0gVcl$Y
%0X0-rfhKNp/Ea<]'.kq)s6/VGQHRqWH-bYueYP&SmXm+okWl.1K3I7M&=?G;Q*d?#OhuFp+CtJsb"ZK&6oDs*BNaH$T6=Ck5ftU`
%0TU#?.#UdQ@auMI4N_og<$A0m,/XM.cqoTO/"Bs@T*5&j,=D-_B)P^(hI&U2N<L($"mF]K$U9d")0oh/s&;u9pe):lpkL?rTpR`1
%$Vd<NIi"6L,bGV4Ls_r^^tWWX_MT(1eJ3Y$jEVYmpq+Ul[U+iFctj`s`Dl5#HH6]t3dD(P'K1P"jHt>$*"Q>i<6+B!Jn!CS,3$p<
%aFkElha0/Rb$Td.-h$dB\1*847LaXIMHgKDObl5Q$5A+m@GaSp4"E&kbB>0eHbYq6L^Abi\TH=k5,8f/[LbCqqeSdS=2K&n^=M!I
%,eZnC.<8%?E_Q<.4.Q='opGPKa!49[lhJ.MK#W[f]dmZ)Z&0^N:LqU_dj->e?mFq^&K"c,]Tt!U+B'(=/@N+M>-YYT.uRG9fr_?T
%Y5Q-;iGdO"$6K>YC.Y&),(Jk+:,?fSA\'Tp3PK-J(M^B]g9V'JQ^7P/:7@2/X%t/Wc;R`[Z^+C=I9u*9dB&g5B)])abH^!0;&)J<
%m1!hn)Y5^G`hlM/e>*2nkEcUZBOn51@h%RLYtWZiE(V-d$(j//k"gHahV%\?pXd\GieR."`cR8#-&A`k39(TdL78.J&?ZcRi'S_X
%'#Hat8-+cu`RDpYV*OR1Z5^Y%8k<hEI8X3DU3JX,,o<K+KEK`Oj#;W%0@NHa%`1[7[#k@/>#i@=X_(6^$;L>oSaa:9d>=L.L=t?h
%"\o76NfW<uMY5q2jcDm;Y(!sTq/DAVID"2'oQb:+UOYa\5NknZYt'>uBI1`,7'$H'-AmrEF9njC6iq6-nU@ELWQ\$C2'iYYRHb+V
%4ba1&"KfdB"X(#Wq]14s^e4aO=P"h,9S=ACEt"gg*+*J)3lrlA+M+LQ,GIF=!XFLLL+s4l-G12BJH6k\Z\&(33a,oOqIK,Fc>&d/
%p7gIp1h?C7Dl;pGj]G^9qZ3qbK2[:SJt#*4&lZ1u1,_cnHr;gU*Z(>pkPtb-lo+_A!C\E[Pm*b=b/hQ&9I1_cR#W!dNm8c;@I"M^
%;[d#md+9GQ74T9Um$X8Q__%bT))2RN;ORmHaX*;e0`ilAJeI;/$H.9p]qF>igRY[J^"O5fCnquM/;'Hq&HXZ#"):W>q1+QT4)Jmg
%94(&42a@k$j*!+&'\7OA:!".rlC_#DL-:r%&e2;qMaV#SQ>0#a@1c*P"@ZrY%"3rgbQsIlaEkFh\1&%%<`"VY-tNhdK@giZj&LZ0
%-NmXX]`D@].3!8/\-4GHe_UIc"3ZF^Y7aNjNQ#3-b*Wj:aV9t9)7S<VK%?4&%Y&m:[eW!I'3'L6Tt1K)_;3>h>Doe_K)#<ZcpROu
%UG@ciLIfsj_!0XNHP@sMZNWU]i2D3E#Vk\I'@0bmWdlMaW17YSIMHTFb7l3p-lFSB\e>HNZe"dF>2SbI-TWRUcr#@$";`If,f"0q
%==;/p$AO<`6f(/**-=Z:,Ae%C,=$gW5r<bXKNo&q[d'XE'/:+fe'JEZA[c0^RV&-g;i3R&&TDG>+7V2;C(?m;%PVU-TGT'hBWd_c
%k(h'oF=R"0M9OY]pe[`>N[PJC1`#&],;!sl`o(U[:"TCh)'U/Ye@m%YIc%*cC3?F0.P:1("P,[8ISk-Ek7P!j0t[or/$hF,6nT&m
%kjekX!t/2SAM+bGLKU8p.mns9Z"kXjn06cl\^r$aiW*@Q?6m!MMF%iq#[,5I;s`'(4%tT5X-7"&E,/J](X@!noVCCTP26R7k[p_$
%%=O&^+4Hg]\986gH]"p5,k=G/oVZSbPuoUJ<Gr/G$:AO4@]!-2^c'GupZ?o8jh?0)[7tee#uVX-<NgA-W/)`MFb2lWOlHg2#Mjj[
%K;7&?Lk%m]CD-a:#AXu,"[#^0><3g5=nY'f33,(e:p5_!&g/sH`qX#*aZJm(UG8iO!&Nf]GDY)/#CJWA2%5+:C'_jZ@7)'o#OtC]
%CT5gC\7ET5P+g;Mk5Chb^`[it?l[,1Z>Ia=6hM_)d<CHHqB[l6&^DT_,mtItOkg'Wn.$E!nR?0$I(D7Cbm*GI#_!,;RaCA3[0m'!
%ET30MOX_1o,9k]@?s`nb?.[q.JK_+;gB0o5NN@"f+tP4^Uq04kf.W!!)5e&p$D2R9^f,O2qCBGC`P=lgZ@js,.N&]G[TG6`BR?ME
%,<1P(G?%[AO&k*85&hOX7^RG-q(SX!pfu[Y_rF2N`n0442p($ZZV7%>;%='LL8kiXFs:2hfl"4XFXMXdrRZiukX:[.O2Md7<N+=b
%KdeRMAf)!.C\,Vb7+_ou^3):$]t5;<Rt2bUcqR7Gl^"e49kES"`>Dl`BY)gr1268:Fe(^-HB)KN6BB![.eGrk,nO+A&YC\37;CW,
%`Tq`)kNf1\UHg-kg7P.?>j"S0WM)KUo9S&`9C,hPnj)Q*1*Z,[1DsuajlrQas/>/*:b*L$^@eQYV;bm."/R-#L'[\`USWJ-+KY<t
%/fhm4f@JC;i-^OB7aF3i"682K'*[6hj!4c18;e1j0E.VL_K<V)5WRJ9%3gnV>d]lAimS)$4SlP=mh3su=*O]CApjXD]<*=CCDtn\
%0gEW^%TR>`7Ps2%I=WZ+PCRJikcsMMK=-a4:ok[lF0B#CT6&.2A)`qo<e"pW:1lB^lhHPRX=NK"hV6dNq184JqhX4.KL<[5>pFn5
%S]J*d'QRT.A$)bpEXqo@9iWo1>O#@1D-Lq;Jft,NRO7[e0rP/aCe\c2F6G!r\okIB?,%DRLB$`B_&PC`qfUScBOB\koVQ^O80A93
%>""@>=U[bk>K<9)9K"Ora?(FF0JnIsN"PIk\/,</fQ^%,f;smHLfVn&cEQaa9#kXrBM5&cYs+'[Q]C.;BZ+5!Mfe$@&L%h+BUHHs
%OdX.68*jugD+K<kjbr=oe_[B?X$8SI"L\Rd/trW[@2n<2o0kRjT->,h"biCu.*2j7?;:FJB2n33\L+\=^\L*Cs/1WZronq1b7CIK
%s&,H"m=1TDrf=hoDkHsDomo@*UGoja*?P4B5Q:7=J'p](rt4n2gOK"R2fIO]Y;LV(&*K"4P#h87DuT0[Il,;lD(<YPUKtP'+)V>Z
%;[b4kf)JhOiGr=49Q_EqlD-bKr!O#e]f(IDs5E@=%HcHq^\#nDCEn)s+5UJIObN0!(EQ\(XoGU(_r\ZF?rou"3NcM5D$7'A_qRQU
%RI%;A593n7H/2eVmAD1VU-2fm%JAl_njE<>e+);A#/'\[nY,maVdoX-YiF?,Nedsk@fJ5hZ`cM4mge`547,6pr:9Xos6a.hLs1:\
%o?6%jbJ/^;gV6Tr/,R*Z`^Nq69UQ1OCeIf8C<S<;56(-L5Q1'VDs!CjB(d/?P+.TYRerZ`o>aYAHiDuRs8>1X2sm:6j_t1sqrd!T
%b]sAF=rHZ+6GDsSZA$'ndm*ij:[\moTE"]t^]37'J+o$(oXd?fE?>W:!GRAr8mZjmDuYljroFti7d66XB4$O>XC5f](Q\R"4c8>d
%4P=C.boYUfjm#^8:?S-SrqVU>r7=12q1jmb*Ad9NS.T,Y?iG$Sq`k++9t#OnIV.fYqu%H/hu<'*kb(?7f`<-VQI^GGm>k]Ujr=bm
%njcIEF4[7%Q(.IGc+gmC'/n>>F]3B+@`D@>Y0Dmq9)jiYS@ru4l&WUVV]U:9(?>DZLZ^o#o,mu2q%(7;It.7J^OOR]hfiW1qL<!V
%^YXLID8g#b]nhWkKur!&L)>N+J5Xr#Nlg<M4-Q9/@YReo5s_S=Kf9BKh%3.gkHZ,]a)?=0,:9\aO!-J(T(8X*^W*Fjg#YR`qfWO`
%pZIGm9)GK8!MYuOjh5W$`]NM$m6r,Gq3[6?D!H=Yq'rf>?iR>)s47\L+9,!F=CD09/"a7*_nm(XS3&L+3F'c)30^+(jKs165%R[2
%24X:X!Km#LD/[!*DK#A!#&;pF\b>BElQXBLg@'Y7"P%l``o*5p2<D.7eMiU^_"`JUF!ns'J%U%ecJoSYKH/f--LGPchd2eAV;][/
%f?DE(AAXg>mJ9F)DghA\eeFC8@)2,@aN?nSK'BaWTdT-X:CfM8l1!3"W?-M\L9/B=$gA,:qlj1R_E8aLNB!Mjhb;8pTJ%@E%.P]V
%M?;P'-q\Zr?&#79<q/E1Y2Zo"p@HpEs61WnYDr.lbN1$iZH<X.]u$B8mY%'6j500DHO\fAWp\_W[hmrhjnQtMH?7itgrFVWQ[@?2
%m8\:A'7PCAdWG]CJ,VJV^h%gdGkaMT?iPQ%rkF4**r`?us82g&&-)9[ooFU#7t:J5^\D0i=bf*l;4<3[,D7%a50af)$Ot$F%)c7Y
%1=PH`.L_,h?1^CTTRttm`%@8[U965<8#daaZid=.L%eDcU6aVrJ9Y(8WLWC2\b=o!qWX1,-k4Vim_^d%o.L4SPL;og4_b2D+&*=m
%+N;MW[OOBmG)Y\4)[4&EZ0j7d/s!,[F,ZVpGhpF2\GNqo\*ud-E%+Dn0Oc7lg"`)8fHup7EV_ctrDDZA6*+ZGAr'B)>Ln]K&^=8p
%&'*GFA0g/rGom7M]Z/fXUR3jjHn,-Jl$'D0:@HF&5npA2V/Q",/@>LS%99)IfU'63XYu[FY.O@m^Ri/"=mjoB^,]?qqTOcQS1K/4
%B#JU_Q>]NaT@<'"c,oNpj)k4]AGMXcNZ[@nJb>spG1XifLr5APf=P0L-fMe[b5u+cjr=G;G"#@pr`CP+9u9d17R9&%ppu[NZbsM!
%Z:NsY8gF6NF-QJVF0]J-gAhW`@$3/c7D:cb^,]?13Ea)LJ:B=%Mr-Y;2=ohgc4i.>[0d7,6T`Z(Og":>lO6#G/FD3Skppu,?em`m
%JMi)*2:U+86,iBrMdK(3QW@[7%J[Y66hTt5^HK9HYi#@M5MNO*Rm6/@c(FX9I\!Z`.]kA!<#iW'?Kf]r$G`g,rsq($o]S]ND:OiT
%"O-2qhS!#,8Xk;QSZ,`b8Hse<ceCJ/K@4I1W]/9ReH@IXe<\'%!/j97&365;ZGCIViourQj,QJ*c/\?GB@Hb?nbB/kl$`/JI.MU\
%S5.+C*fkdiVrK^sa3X[*r$[U2.Y#J8=XC,ZN;=fLEJI%&!0(-]>>ImN)CaOOn9#c_:;YG^qN?=8ore<t4<@V_f^"?LVuDu_o$-4b
%c/\?=9)5[NnZ\MG\7T';>(B_3N/dq#&l8jN#"m0KMk@Zn+akHQZo!qLA8r$#C@dB&)V8p0Vh5@SCU1*J:Wh-*PPWNRs0Lh]DcZ\K
%3ii1F)ofY4&:[\'rm)Ze-kHT"RD_rb\I'bgZ<'^=&Q/IV*@(eWKeFmn(Od,nbs<>Jd'km_"@IH`cj6ZH2$"T-4dCR)<;)W$b43<=
%W.(:3SUJ6miUc6T-:`;GqtmW_4"tq5k3@Z9VK(+k&N`V'f!0AiK&Yh$+EH+=;`6Mf(XEs%/8FO<:Luk)SLs5nj+BEjrAn-QY2>3-
%6RVA\ZTE_k=Y:L%MOjLi"gN5^Zj^DLJMN>SZP@.0M@+qeoj_;lAr%a;;^[9+e;G\/^tH.RKu5BI<eLQ@YBdVDTtTW(k@T7:S^-\/
%?[4Rt*pn/:XN,<@JUkU+ID;PPaNHn%eL_``-l;Ka4_>@K[c@SghSo+=@KR=kee/Q101u!Wj^J:Pa7f&%WLFKKljS=IRH)V6AHJp"
%l"CO)Pk&`fQ2ZGtOl.DmJ2mLj;T<P-MpJJefW7Kt"QWg83%8VqJ7a#>LE,CJS@rR[9*gprB,<I`olP\g.O=4kh1$O(^DYpAB,;BS
%HMlUgX6[W?QBVW=S>7]'+IPtLY"d%7PO%3ZQ^"eOL@)rm<On(ELl5K)TBMLfABsS]FZ+qm'KWVp$.$luM;F#Oia(AH6jQJ)Hi#20
%qf"@2&"UQfT%s,+SC*>"XA^(W3ki:PNc3r^Rtcp3:PuL"p>WnZhY]\/*h9F)e$?B!$bc5kUg/oKZh#'%`Alb7^pu2@\YD)IZAij%
%D!RV[D>WX0/Dl10@r2q?O8[%MNP,(NYIk)f?_(DBj'+TY2VpVH=!RXi$2i"uq%;/!JKkh&!m1N9d"U&,(;e;F^guF^[o%esHU8Y;
%cte&d/OK;J\:gWG!antPgn,D"KoU^Vh,+nS!B$RoAJ&],7L\V2<Z0:u_($H*/@_leYum&hMSoccabu&ab"m5Y6'(8>/:`+ca7n/-
%<^s([h:J(;)H4>=-J'QMTccNUqp?.QMR)8gm4M<N<Tr](lVAVVag][%<i=q"$jlFU&eR-$-3#1$IL(_ip(&iTM?.Ji>3uBmN`rs?
%,AR0H`$QMSVk(EKGMm"P^h4&LWI##f4UXm2[^!D*H6o4VS=OEIRdi3hU4-K1?N%]X#@M,9:.YI'`F:TE>>uT4#?@R]Y";%13(VAA
%2Zr9\W(Tbd.2$S5U]d>lOrA->+9a9TT)t*/J9"S=,r#PnRfXg)0a3.-Q[)Dc;]/U>;C:*J898M*,fKf^`.PG2ZgL2rbiFc[FA5KF
%CF0eSHI-,E.XE"iLL($k?bK5IS6SI!!#G\c';H,7!X0@88jm-N<)jgc::s1rmG3>AXl]Tu9G5h5q;![Q4No-KF"j(K]bKX_Jq=P9
%Lese$*Q4[!f3SQ[Y6/Z:FgpOARf[/<`Fb>oLH:6+c-r9eiY+kB.'OuA*(B/?^RE\9T]q<A:#X4IY>Td_cpDL?Q5HLMi)jm4r'jo-
%;%kDE8=ZEUF$HZpePJ\-!&dc])$BfDZ[IAsf;Z^*-248fcL8,Q?1!]2NV%IH\a\-NeQN0q:"r3*B\+Vj;kIAZGA^W03fn`<Cfum&
%;>Q+G,G>fM+sp4k=roO"79t4==o0H+7M?R6"P-cc*e=AOlHh;Zi#`df-6W*q5\=V:ksbYi#m^u:(i(VQ],>%CG_uO`\q=L).<_@$
%&1D&%&dc3CkU[S=JK'+4RE_F(3#)Dt?\kY'4P3cnrh;CeZ@LkXq-=g]Bgt<K\4AFAPkSV%%M.L>bOIo:$KU5W@Xq0JCoMLPDWgic
%o5YThP#?W#:&YmKc*+?`!@Dq-=0-[Do>'=Z_s2's54sY=[AgkY"sR*`5]WS$Ub=/VU?V_8W^pj\OE`'4kumIe*<a31HpNVmXhhD'
%J[nHPj,)$e7*&b5E-()fE1+Mp_8*Gla(bZr8smo"$L2J*OWm@lcQ,2"OObR28<Shu+?a&4JQ"4'AdKT$#VeH-FcZt0nU`f1IHIj:
%Y`f<s&jg,<'3'@OJAt$Ra@uYr^dpFNOG8;O5ja[B5cVLZ!09S^0T/2iZD+N\gU7]\&2+9=XpXYH$=+F:)8J[H-Tn@s9br8W2;;1U
%M)<dEOd)6Y65%5PB,u(_Y](8Qkb<9j5f)tu[s&dlU[br5-i40s1JtVQ"TI`.f2K:Y\&DK%,VmS$FmYHP'aI]<-%Hs0!e=/k/YSkr
%`)H$M``'eo0[pT7@E!Lj].mp"#;MP*$p;N,*LR#]qr)!;fbFd"9?uR4PE@>o^fpdFLj%CG(9]V6/D%Bf[nR'*EZ9;]A0@/mY;R8Y
%m6[JUI?VLp8^Zp7PL9?n<,FBiT;lI0LtE#WRBAI$\hO7,G8Dd<;7ADQ9d:h%?;ShMDW`A4ADDToTh(L-j,Q9W1!XmK`Ls2k55$Q4
%]*%/k@uGodlb)"^=G5)EeJ@ID_4A71p+6Jm>Dd^`@Z)K;j`??&J=i0M[D`n=V%NGReq%'hpDqfcV&84B%N@P-j4+Qu+qX<HWS>Rs
%(;b'aT'M(tW:u53ScD]Yq[N_dcZ)>p4,h(6l"YuraJ#kEmP$!5Kt-TU79Y":^YTBc)p*9UK\TVneIEf]m2$I.H.Ep4)co+;;*2VF
%cQ+p;LWt7"JPo.Og0b!a(ZGAe%5p8SX*D%g5g<'S#$[mG4n%PU8@;eEF-!LXj8C92.Rn=-`1]t5ln8qAkkbQgUqZ<#om7=or*k#4
%$/F=IDm)T%/T&*-KL)Q^D0KCh-FJ\YGHJF!5oY7,?(h%JUWp1p"a]+8\JC%qVT[3f<%VND+.I&.js1)tZ+H=')HmtZ]5(8V%bIEU
%`3Xp!k;MV6//)%<LkL%B?#%a#KHOhQKV#d`o(+9oC3OY[@Z##Hc%l\KQb*XD&B;Gr(+Ei9C&:B0gdI2-2\sP@dn&9'1mna'7iI[>
%=+E=M#d]tn`N<-km]c[MoAh)geO_6D]sQ55,,uo!UP]c62(?+g:=?K*?*[LNl5DEK\P?5okMd/<1@6VlmORZU&NKNQ`t]H>0J4SD
%n3WGsG:9CEb^G7%A>8HA$rX7-?1$!?7%(YrcY=WAG'u*JSgKm_fDY=>m#$Z%eIMIF*QXKJWH<%4!G=g&,W08f,V>%@VUc<m6$\bq
%^'e&qm*06,fEU0#RkRAqg3Rm5m>Tc()/@ZlcuYkJcfrruWDV.H^t6Zs&7**0dOtJra3l0-gsnc:agER*4A'q+Rr+7i92]FhejjeQ
%l<oA]ID&E`OZDjP-`_ralh-qY6[5(:BC[7c'`5U?@17'3?gZ<3<B!P]DF6+D&Ht"&Vub\!T2#g%X4);-YULNm=?YMWOc-oKIJR[u
%b?(&iJC2!cUtVAJE9#1MgsZgbRXS)*Ft-/f4_^M6(@G,q(3nK-V8DN%B`fL+lOQsIThV!8CnR^\M+m.nPjsF!,cpX^j1<EqenBE?
%kd",?46J3NVquMUXJ7Bt*/JA:j!QP8+64K8SE@`e9S@?:]fP<OVU%OlO-dIXp&er%0Pb<QO+G[6B),a0!ll9Oh/%gJg;HXQ5guU%
%Z&E@F5]a5\l7cIkgrI14rZN]F44L1[qP]*!SPt&P0cKlmnpreq+a4!F[RH$IPY%o`'`9s=,n,\k?+UJF9MJ-prAnU"6Tid8[6UHX
%.1jVe"-C]Q+fb>^Pp-koW'SJFU8B5949/o=Yei"rMa1"]1q&Ppen7@Oa1G%T"t>3"C<a_WE_G,7@,F:!,*`q4?D[R,79rFORWJP*
%O2rPih(LQKg_oH_Xt&XNiS=^@`<%_Ed3]2k^0*:^$289K1XVm=;Pk<KJlJf^H?\j-!(b6_SS?03]f8@\_#s`N[WfCm&*m+-E.CZh
%c$,-Te4`\[FClY]:8Gb])\Bj-hj%6Hrc&84qCHH0Z;.N)KLqXr0`bo"K(I9$hf-cA)h"9>n"7jb^u/X2a$tA0-IK(.>PW*#$s&/\
%K6jWY\U`/FSl1PZ@Y5='&hORnKQ=QQA@'B,&L`$%2OtD0pb(q4eF_ui8=<^F#N_^O;7h]oM)qc:H?AS6EFuVG0kVV_80JVMm1=m<
%N;"ptCeNE^?SJ1q][#.ACO[1JAt0H&SMBE2MtPjR$&_OQbbe*>:!s'Md(k7hN^=9;MOaSE?n<DIIO"4tGW2M\4LSj1kTf.S0OpHN
%Nip/kK;ToAII)%Gm10,kP(W-CP<Q:*ip8$XcOY6>qaTdV=P^(I%V,T5aN?K81ac_I6XYEg[]!]l5M;Ed0b-2Bl^BZUE1Tg>1FJg?
%*]3=!Z0.6ZR+0-Kq_bgJJC@crfpS#*"H_]NM4?R!GfJf\p25,n\Q[*(X7b\G@dPPLQKMtO@a&Kem(.E$_sLR`f^%jl?4t3RV_T?[
%3XF\mprSq:2TKK`fS3sDHsqK8%bhP^@@0]sUXFC/(+IoW+g?4_3O>nj7C&So5(a_<Ah)KsZ:"..2'm.lF^F-F%k^>DS>9,^R6Db7
%gLR`ibc_>'G!=KepMoHV]"TuQ[l4(flL+OZ;DG7UFhJ2seTS!gSR>F=1rR?co&1=^4!6-&O,$QLNj!m@"dqn+TK*#.J^ZjL?,l4X
%N[r79)KCt%iD[$ccM@g;RhVA2m6Rd#YtpL(P(5B@ha7Pg.=QKD%M%<YF0oYW_8H7a\=]Bh7'*JmJ&-Ma+j?`(Vne;648lB:%ZUqe
%m+mVYZPt?]V$^FU<54n-R1h>"OP]Y<QgI#R_/?oWUu1.2osI%]Ni?nB9eiQ61njLYAa*)uUa8X`F/SVCRLJ5UHI-K531>-f?Ouj)
%jt(Y^qB]?/d\iZ[H^(%JWt5$Qc-6QP[.V:A8q)aRgmAt[Nd:s]a<D0QGB+lIG@O6#:Z,]D\dVX2HTL>[YH9I.`O9\Y,XKL>OfTqT
%N><8K;*1i--t\M'V.qal+2HGsnh"iAfJc7EOOHYpm,r";6C7&IPD4ob'+#Ye75>55/SS^cDG;%fdL;#okVDeSJ._QZ,$40]NYf*c
%#M14(hl9)4#,tbs:^UBG)(2@-%4Y-7(Ik"YNNZ;*i0UKCPhou1i"2d([j>P#PmC9eMLL)mO$iMbTH?7Vf5Z:IU!G+=[4AGZ>rbBY
%pLmX^pds;li3S.7e.:0of8]WTki(4uJUgIL_-_B=W>D*e>.@B,G^Y$Zqpaft:tZ@qAa)mcc`b"iG-7;u&(6VlqP?@dC<H*#Rm)nq
%(/pMnTAR\=lLT4u:TsH]6hL0W_/Aa)?U?Wf3+#'ZWb%Fq^<V;*Z,UKMq(.Gne%kH`UVuh60j,(5Ab:Xs]&Qf%>`-7X(GG:.fHimS
%KMgF'lTFOa,$#n^9+t#']Ro'O>MAiS3u9<g_s8%[H\8mn@aoP4B0J9iG_8h[,0JGL5?=IRW'!\-$i">N(<LtZ&Y*IEgVaOqP3HjW
%AAK:;GAClhW0SR(=(8aQYQt&'?.OX$#aDV8)4"5m_U0Q-cjo4A^ZfS2C-q9C.*9%:&`S^-'<R"O_0ZOe@h'45oPh#9#7:>G$r[CF
%_E;gNYTKmkK,kTb^NY)IgpFN^TrBt),/!i4EHHUm_'1_>e9MTuddTu%#AK`HF]7JN>0<2SHt)#uRkCY`PL$:I.oYTP^NO@^auicc
%ba(.u*Y0l;,AkU$S\]cV1/Ep'^-OO0-SLpO8C`FK#0m72=u!)3R+sTY8=S=(FU@bNOpO<+I6=5iE5[P@>Tp(AnP(F?$#@c@)6>&\
%hb85"5m8L]OhmXM+Kf$Pq6VcDk)'pAi$QG])/\\-WV7OO88r4O+0*M*<KdRhN\HGOf@%oU_E0<(i0"_)`SMkFq;A(MYUKnWTk3Dk
%'WUsl.l9OHU7>+!ak_9.+j(M?PJ=^.<p1YOI$=Xs8'4L@1,0/tgi<N4_([X*bGl$'%XO'pEa,B>!K'='p#1(uDt.FV@to2cp__WB
%N-T+T!OW&5BZr5p(t7.&Af1Vjk3aM(N*uIN]\76@!L$3`+.6gGUmC,b4&$rmk/Ld9[uDYR=r=/S"<T%V?[(613YSAhBc@(e.!!LJ
%,Bnn>TuI\i;NaPS+l(d03d1UiSop)(p+4?\^i9"Iam=.P*-a$:3H&MDR^d<^#:#)+RO9>sN!>RM0S4(Nd;SY'[[X9SB,Q)7QjEq)
%DH!`b5S[&@6]UA)7Lt05[Ea'`aeCq5iCC(@qN`2;2T;-\pJ5>8<^?Na\H1B%o?Io9679Xs\^qNZZZp9mT/r+%IKn4]jdR>t>q#u6
%"c!T/#=ia<&tVJ4#/_uWd1SXb>.(om0b!*;(<u0dE-5K@dMh=<OWpF]1eHhfU=k21c=W3C"hhYkmDiCu\?BH/::Qj32IXN^=4K@D
%1/IjT;fRF!2]GY`\g`o>aoDW\Tt(9TP\ie>XETH,G0FQp#8j8.c]),+6o)]qe7#]J?8I>rEUP5g:tWa9hBHF#hbEEiR_8D,&sb+/
%HEj>,i,Z1HCLc@dA9!p5Obk't7'4AJUg(3B2C;b<C$$ob;b)4_WLJm(&!e(l)\YDs/e(KbiTcO*ZnPoP&d,HM',+/P$0[k8M-Ool
%O-uC1@.i9O8iF0slc7_H\E.7-4&&D5Al@H%9U*PpT4bMcM1PQ#M+Mb0b%>+WLu.IM9MFO><3L+3A9RXb9MEk87c$g4A9<Z=RuN9R
%c85'r0p2E5Mjo^jG-E'()M+4)R/9XR&4UCqAZE_6fYqM:8W)M]\816f<Nu=:)_!"b_lf+ES+r_t7%#,*l-6=pFL*A(Q=er0:8QBb
%"&Y:).El6UCJe_Gi;^uddmb<n;_$N1Ar84)++[YBbg)IYbjBA!^8<4[pJ;..YhKkFkjU:]m5>4B_Er=NE1d!sVP_@28*-bo2-:X<
%7@+PMA`p^[qp_7Re?lWsR@8#merO4]X.,P]ErS7BEY,qe;K#O%Y\C]q2BnYB<]_dn*NB@B*,f_0g;^mqRVo*#YP%Eq9ML>`M[F4P
%9MNToNumX2;\P=8Fe9YN-Ii#]2XI9>#t7ADV6-`6Lr*,D_q%d1pXaFsCI3rd;kLLq7`J*5Xf5`r,@/uk=9a:Q-AS^[+c0]H[\hg<
%I^#p\knc@U.pGq@)Y\,`+sE</d_n)bQ(\Le,5DM%TV8>3Q1j)D9oHAZ]3ZDE.^"2\0Ti2gUlomo'4+D>?^[APNEjqMC-k]Irl%T+
%[q#A=;\Q1],TZNHWG-?INcXQaVM`%5(jAnW`@[\:*9Xc-7?(:\i3oM?+JtNL>>mtF8F0F/VM^o'jH2F/2PF7-oJdFcRnuo$%Z\ff
%KYfsq@s_a'W_cf.6?I"lm<CkJg'"RZ^-rNI;h[sZI,iT-<"UN!qJL1SUgV"WS%5LB0-p@BU:H+09_#>P_;&"Pia9`k\S3d$V3UX/
%2h;nM<WBtlZq+=;'>(fS+tTJ#D2IC%,VKngN,EOE*Uh%;S$7X)YhAD<'h5>^3Mhp8U.(`e]r<b6Y$K_M^j3JWh;1P3XD,""iRQW$
%Q+^m[,:*j)QG!U;QqH-#9k;3+.Y-9CJ6<Lth!Ig,/=k0/fsE]oNqS)7:5bNPFph)E2+[/]0K`/9c9j=fiXXQlJn-g%U9\^g"WMM:
%%P+-l`+q:jEX?%K9^,qpaDPK+!R*`M2EuCqNu$uNim=0[3BEq8KHnf-.6pOL?.WHTO,b)0FD>?X]-nPq3$H5A%$<0_qQ\&;8k^,O
%CLX_f*ClIuh3Yd;!dAEMdCsLU%EtWfXe(*kH?9'h@^PAX$)prd_N(E#lofBP0ed\mgT:poN@_=+*=lJpWF`D924Su;\!aiM\+Ojo
%N/Scgc:d>(:Wm=6"ut,oX5SN3bmECPoH]=A;Y?TP=Jl>=6]@oJBf=-a6(fSq<R4X`dX=Sm<tKMr@o^AQC(n[+KIUgQBo#4]OYc%W
%Z?MM_@Hc.6=JX"F-OffA\^N,p'36bdFQ)"X2CA(K-K2%1L2i![V0hTE[%EscLq.)&ZL=F2L=ds$k>1-JLpDnIJAZUF(EAdm2jOI*
%1#GqEUHr;0^0aNViB0CFi.D@:7FYP6P.LM^Cs^VT;Gs3<%'s@8c;fNRg!\ChbfCJQWoq8SpX!IQ$[=td<<ml6K+E$Y>g5@*rEpT$
%)HTc*P0J`:I-!-<DT&T[jqJ?EU(M=+7[tO)j[Qno/+#+O0sA+*h2#-Hhn68RENm%Y%s'2]r35*2;ItaCK`qu7]n0As$Qb?$UH4&Z
%GW0.2?je%DN1AXf"V:MgOse&mJk*YqI7#dK+oU*C<t>[FAJ.tr/U2NcZ?4lRLP59cai9)J%m2rg`oT\&e\A(;eAI)D@<ttsgh+LB
%/ZG5rD0X]?UQjShG<=Lh[c'LjA1^6?b_He6Z9X<C#\:lSnC#DnP0A^e+YP<\1n@Z0.6Ei",qC$Wb^6dS10O.u;_e)l%kA\Z5gOTc
%ac)#DRYu*O)%W/*,?Y0%@E,@e%WYBW`ktt*q#[I^nSZDE_0.q?%%Y:0$)*=:8l8Sa+P>&'<4fLO$9#$P=HBI#J^B`o::WeF`A?[*
%C@`B%(b).:*3ZVH9OOP:?rp3pdtG'[GSMMmpN?-SFDQ.:'3E6[F2"]i.k_S@P.M$kArVNi1"p2g2;HO(BB7LcpWk4)ilq%eh(B$:
%L_AAO]-np:ek8!iU8\%IHbH_C,&K'Qh(4H6acm,BZRBl6>J2eM6D0DKE0s'u:kbUf/;aL^`<1Q"ZRETq;qe@J=Il/:gamb5g7QYA
%HCJLo(eND[(0eU'[FQ+g6QNI`3,k7.=;Mm,[$E*JI$6,!,I=P2cFWK)LajTj&<#XM/qJGU%97X4-'9(%4GL[._C3a1`mYYAkDpdG
%?aFDt3PiK)Cq9P@5lsV-iM1Se\fD?5I=BHjr1*NHI-_]qdF@gh[6QX$7iAnG^bk.!0CbU4FMJa)oK21Q_tH+Zr1SC@k@7=Ha1=Cu
%e3#)A6I_?a:X^@MR4Pn8+V>kp(mb%k3rhoag;%Z'dD\tFBpS-@DWQ"$<MMr.T><@VD#qumSegY2?5of*i0KfD'JtF=>?TcAdH(7<
%)2BDS]mgX0S''bi.5t)I.j,q.Xn]J4V\Zd3IB^m`*b"]^U*T.[??b(0CfT?G2;)]tM[C/QCmZ;^-hYa/eX'h9@r&4O/*%cIJ)=<"
%hnZ8kK02`uU-sL@K#9H2hPGk/o\5PL$I?m%X#h:IY^I`hAdh_=XR6g[W4X5@^]5Y4V)s*D-R',MmqHAldaLcsFemAaLX0=]3=isg
%:\WRaJ&P=@"+.]uV\:q4W>s$m3+FBb*!\N`&\,`Q_A-X9-uZioEjoB\$+b6)='_q!,u(T:s0l?"_/,HI!'_g0ih-;s!`cM,k/=&p
%%KMQ#`?ZUNnX_);^pJtD0\I`a#95D;3+7If#&n:C6k4^(8@Jn3#;KGJ2/YeB$<1&CZskPdb7K\"XGEO`kU21B?,5gCMD16cA/Uc4
%4%'&#`P7eUb?8\<LmhDOg(\7E3EOS^Xo?2n$+r@MG8KAto%dU8%qR44lG`N!)1tngMc&:Vmc2&@;g7Dh"3<&fq1hhfLco'R/1[6l
%K,])G0K-G]d0C>mWYttua#KGhUIZV[h$&PO9(@.?!h^Yd*4q@7B;Dco-5a.i>W%@7k:0+olD_cLK(ai\r/DTQ'enG\3S/@bd1$Cd
%3AS*I.frJ5%L6i=g*044[.4\'+>+QL)I_g0X;d$H;aZTh4Vh7r1VF*#0LPpQF+mQ"d^6uk+qq?1FbEHDDC'W_5kYADT'V+CVU2i=
%U6uUBGPjqT%'-IVOtnVi+H30RDH>=Q7?JnApcA'ZPNqU*c9^Noj("W;D(@aPqKui$*g@d07YdG[FE!u8!/F(cS&eU4Q,Ce'6'sns
%=H663+q'\t'b'md'T5P<!)P,d%T68KTu&?]m6/XSs%W_7UMAo=`4Q;=huQV/+qIRTmT*b^W:Z4j!P*pGJZITI,E%XUde!\n<fH%P
%4n+i_YV/4kOGLTq3sW`r?kpcPL?!V\q5Y*^EVaEX[4%u,[H&DF=/n(f/BMb'"?.EZP&U2&;10;n1XnH^(j8Rh)+ooa<[cCj[Mc*s
%?Q(Z!'*Bt5T_-0N@fp7q-(<=<QK0(29QUFIG#=Q[U50(=RotH,m//Nbc(B-'FI&-n&_9uZ.aG(&8nQ1#(n2)SnZ5np'[LGnS1:O<
%U@k0W-:M&hqU&s]lI"JsN'<"+/Psuen@(e`!cEKaZC2-#..\u1Ypa/cMD(tPZ%c$gY;++h#CNbQ3:"o%%&pR^7k56Af*V[g;jnhP
%o"rU:P[829iTjpp&WDM7*0W]B'h/Y!040D-#tn0^Dd[@^U<L,)cO)e=i#V8lgsFnV7\o#(8PMP\X?6jM"WR[.&6T7;ACjHf6Nn%]
%U1`[JD()ZSmB);9n+#Bu`+Y=r0@F`5`2d4H"5%Ojf[KFHURFF*/o\X7TMN.9)N%rk-8r\Nm['+$,P:&Ha8/)$T@X.KLbu96bUt">
%&>s2/ae+u+b%K-IqLrSm5#s@S]_#^_MjHB:]pMq$))F"Ye-"8h_,Sgp7bqS4We0>Jp!mCX0NVcD6YAhH*+)j,duge].sa?bb@Am[
%8Ek:NXP:3h;7=&j?+X[-#[7\$`bLC`;(uTZ^!]qQ.+&T3k=X2uQ85RPYt[GUm>HOb#J7.)_[;Rc9>sI,S26CJ%&&QAOUr(l'p@pj
%CI3A7[7qE9@fbB8)\<(S#+TP$[54kKCnl?o('APcN<ac!D^HQ91_`_@,aG?(A[/kNaU\YdDI=f-4)0O!Ql/Sb8>SeAjrEG-T2WI[
%la#h2PkkJ*1#iOp>ABg!ZP?QYmoe1<QJg*rRg721nU&ij7Rn%m70;LJ0Z%SuTahlH*o"Vc6?^78f3)'.>1<\Q<8_a=-?00iA_?1]
%L+!J77M#QX^.j9=<)U#q(G="Rc/!N56P*^<0S7j63e@LWg1(7b@kH]70+qiuQh/d;SN4Z<%TKg)XK+5lCY(i*863)K@\*p`*J,a4
%P-3RpKYV&\2$R!:O1L[_$fV;:0Hlg:L#D/`3S4P-d:i-\7*t->>]QcDLjtLAMH6LtRRLZ-5>;+1N.Zdc[(D<;DYg)5MSO=Y\CIR[
%X!KSCf.>`!kp]-]$$aKWBV_T6%H;,k?&Fk9H)`eO"RCt"'/P4LnH(Zd/l]GsIRmE`VrFbP":#pLJDaK<$Aaf'RjEUtm)8uQ"ZKr?
%6]GChR'qWE=>(2JS/X^Bg<r(nEtN:.oRK$3+In-cIKulCaP]+BS]("i>;@u%"7eu89"KYE:jc6D1^%n.g\]W/$MmYD#EJcq<UpAC
%SS8a65fmVq@^(I41?"p@'I\m&0p(tV,h)Ig83-11$,c@]Pp7t$7/sY/FF\g9"9W<QNCetG5+`2(0WPLqjA=Zh9L>C(CckrQ5gQ<1
%!SNEO[S*"*RCTabb3gEF[hXX[U2hiq%LP$5M$V3cO@A/oiTMqtBKa),RiVr[QftLEoN/DGYG&qNF$\?$I>K]%ldL\fbTS_ODCYrq
%C%7iF+9/r_VSf+aGp3\a%*Q;QJ?=r/g8A9h).?M"2bkW!!qAC?Ad<nMU^SE-4R5E\+sCc>lq^^$#h=*6+#//[>u2p@qtZtmU4(HQ
%<>kJqmrd2SX'=%7KfuYufSJ,1:DZD@db28Dqe!iq\#ju\aTc]DNhYJ%<oF9Ql>[PT:Vj/":R#@TY0S4m8sNR_jYR>,3<`UqT%EW\
%ErM.5KtGuo0d4:Np1iS'66\E=\GN)C?P3scpLtuV'c/SjBDW,mJ@Lo*DE-a'n$!Hi8H9=+k4('3'.Mr]m2m&2L+Vjc7#+!4&:IeR
%qo@?-k3_sGWZgG$Lb;QU<[2_Q=MdAp3<'bZ?m.%(F'mo&%Km1m%/Br@#bdmP+ZsI5a8f!P7)ZWuq7o6L2Y:EmWJ92'b+il8#S9aY
%ni]Kn@"4O?#-NiYrKC^HGkCB'ld=Uf.p>?@o%#ou5hsn&09#Jc]<8W,puL1i_t&$G3E#b+ZhAVd^>pRAG9TEa`_#\s@d4aG_i/u3
%HLLu]#<BH-q#NpCdt;<9bUhB2`0dhrR4JQaX@\?b&>m==*c=q/7D)_.,m66%g,oq-O")$QWj!X-_hR(_[rCApP9FW_$j*js@)0-U
%MMYP6d"-er%fsl_!/O:J@3_N1Ddgaob$D(WN(dg$eM2,Sq@6)U^k8YH1<:1+T`e;(`]mn_CGQ.f(a@H>(A^"&!q:$FG.;/MAu6Y5
%:F>-g:_n`!,_@f78T9u?ESI"(_faj>E#LLHFP8EVh#\-.o8[5+7\)G<5%Y'FZX@6`RCP_o"_F&+!&P=eQOrG%7mJc(K$hGt1P7]"
%r!ZUWim<YnOKDEf-fC8HNPR+2N@$6@6t).GiWdt/7ZKiodd45._ua?b49D</*LWQK/4rUCDO>CoI3&`=;e*<O?A*"r)LK@GRANu7
%X#EF_0Ls-7iegksJs;t6(Z5?uj$uU4Yl&XF4c7*Hpc*&UrIjsqMc3Ipch`[ej5aE0$W[!8)?TOTS?In33E@Ld.m)H526(nF/f)us
%TT=rHr#%r>3XK:-C'g<^I9S=Q&7T3Ko*n/u?7/Dta'-9GYm:r%)\A`Q=0Uq$Yg:->b[&<6E'e`bWcPL"+9/bCjeE&Zi7s3B$#VUJ
%AP0d.:6Zl7Tg[(>^0QW::^#Q:<i`nJ$`=+M'Wca:+u6EKd0f9)V7;p*.GZ[U5Xf.\)hP8W,\:q!.$CJIqF(IdV*Mo;7KXsBZqj-D
%dFnH2RV768VJJRueV(g+%p]KF)H//K,g^\DP6c6UG7"`,A%C##`7X!;8r6OG0qgc,Me,A);92nb5ZR+]p(Sp-5a6ZDN+)si%(,r*
%kT`c#THN<U1GNhXiPf2bP*,uo#@a/\WCmfO@nV:#(fRXlk%58D%DIg3,e+B1(ML(HYUhFU/L4'B3g6D0f4j@Vb\F?7Lp4fK8mtF4
%]SL5Y_B;Q96A.rm*p0i--B.$HLH3oZ5`t8bD'&02&<#^U;=ae3GS-pUlP2$%rgpX+RI/M2;:Z14D8<m6#Y7UWdm.,6@DK$?(/0/S
%=pnN']\(&-SC9L-$<JZf>H\&ECf4.IcU:0<o"D#933cN6Mo74O6)Q%r%&\836##]!.`9@n]g]VIZ\O,ALrKGI;sU1=@IYF9B6dX1
%=9rI@K6PjPM9(f)Kiq]H5.0`1`]e55csHj3D5Yr]H67"5U=l;Cm*X[R]9(,G=mpKC,6ikmiYgDd"M%4P)PU%3^db;:#0h*[h-)`Q
%Q#'?UH!2oLXRQRFJ-V+86eco5A8?\)Asl`rMXdok0?f'T_PD_q##Ub*6'3r7el2@'@)ZWu&e"l[KND:GBF,lF4G(G%6_P<TiWc57
%YDj5>*g0XLZT3\2emUGeZ-TpOhT7=`KVQ8:ln:h/_I96#OA/>kX"7-CoYhfE;>M3Mn`$d4*eN*Yc5KaiC*f>V2MEAERsMqHWjS6D
%;fm(mJl7Cj[RM;(^_kPe\X8n'M`l+.(Pam*[1?r];\rUWanK)*_0Ybg`<&=SX=f5.25b[t$';<F=JHNR!euD)c)Bck^*+OHg'1Qu
%'_Yk)U,C`h,c%DNc*XY0Yg"]RKc2eCfQ`pu;!bQ3-T6iQF4TQ>9ZeIbW@5bl-95`[H]`.+/":5W/k?bVC-57DBLHeV1S+"ZmN9MW
%SS=ja5i2<&&m;8QPVpB@7%gr$HO/cu6F0n&h$?Q2_E<;54O+^hELeo*?#\[gN1!Y^nJG@KPgO<f%[.8dMc3^D;T+aTbB=#j!>U&;
%$p1;1B:D/SMI!KgDZraqA%0pU8;[sF5[!Z<pN.E3qI1s[>6HD\;$J%iR+,LX3Z=VJWKe3E6&\*j[:UG[2!,U8K[lW%pNLX::ffIh
%-oBq!"(AWU)!=ouC4osqX2<b'r7,pA_,1Q?F^`^m:9Qt(?t">$\!n0Sj-8APQ7.t0occ,D_+d(mX0aO$UJ7*+TQW``*J=k;G^?*V
%g$jd4Y3>&uLs@<7ihd1cUbRGKK!B6Tp1!?2::95B`Y-&O=.f3*;7"G(]I^AoF[1bObpANlgd7i/rnneJfqq@a23)VBI&l!:PUTQE
%6:*?%7,\5e[q"-3D&=lJ#.laYdZrA-*cu2)?>P#,:7H"FVO3]a:K;_T$KFR6;"VG;2cOpD!g^YUWCjo1<iao%UgVdnNd6np!g.9V
%[m8gDEH%>M1#PkPisq80#TcrIh&OZAWF?ip[8+t<@]K,Co=dL>N$(DZo!2"a6h_Cd85%h)i`^ZO&9!5j^)1nK3JIrJ`$IB)'"4mH
%-t)4J$.3F^d$7R4YM<Rf>3l/sNj2]%;+sqFeMrquVnUf?e\Rd6F63_2&J3DJIUJ<@;`8,E%d>#cAY'mS.#AEf!E#pU#]YDm-i5$E
%@l(kD+.U;jV$ODr'QqeTM0"TkS7B,j+<:?;>SFMs:"Z*ejr>Y)2Hh@\V:gOGL7N'l<`agt\l0d#Es_`.hSX0*>FrCO>)4i"6h?CF
%Q3WQ)fbe6-&i<N^c4IMG+]H[#1G^&kPa?s`0:P?l'gREi9eI[^9USL=1uWcSA.],N+unDi=@%7P.>^eOFR>tW5=-$Ge_E\5B$k=(
%>"`r]JMPO>N@I-Wja_'QVl$7'FK(aQme7X?=(M_:PQrQ_aDAX2&q47Y/$UCE/IEVi`51)J:qBeu\dRa[)5TVi[g?oQ5Drr?4Z/[N
%/%<oc@]YPpB\scR[RHj>>[`hc`p^$$RHPr3!Jfd+np@Xq/r+q4*JNiR?5R(l)jYd2d-@WDpmjdK]bn$/.2&q>=sY,/mfX<3F10X/
%&r`Q'(j85']bd,k2DToHqKfTICJ1QjmUN>q!<e.-23uKGErZ`m`lbHeRnp%(TXAI:%IjZ*n(FK"X&]+.Tj-8WU*LjfK.'ZBG_`:E
%4'.7.OMqUd7R<h:#Rt=u;^&0;c5?TeNS+3C[78F.QP/rrV/16('MXfi>]FB,'O?OXWQ$0NVo;J%XEL7YmSn!\8*Yj8T2Op^kM>pP
%8roA3@8_M%[XP'^Z_Q'2%gE\?'/R'@r6Ht0]Q.Dr[Mbp3:[GS-&UQB0J"f1H-sBVI?nNcq13%S*nWOn[Auq^G5i8HdQMH4CXi6-N
%Qiok%9]\n$Ma_@_;P>3==,%@?HWW%6"1Oso3&84'U8h.QA^l8Tr,K1-;^AY1ddE=,Sbhkc.eXQ]i#n94m3r$Cap;j.>3Kj\KE8PX
%RtriT<it,O,J/Y("VVjq$m'sG;J'mge7.5h'3m+V*=^+CV]'=AR@sYJp'sL!J^VZ;Y]k%&0P.e^RBBa^'>pQM)-^`)L1-Y.2Ah)K
%*F!_tMT)qFU5!CVlit;K_%1/,Bt,a4g#giN;!,ZUH7R["e9.`FZ;2=b6?EHDE9:$KUl#e[$!IUmMIrAe,TnO(S"UH__[fA?-E/7`
%Q*D2pn]`IfM,AVmXML@5/&J<H&b]nHTP@MM7\g2D#;IXN,ImBbA<^L`*U?k]MbEJX?*"mlf4p%*"B0;c#Zja,;Js3\`BG-GH#bZ/
%G-ikIml4%(mDjfiQ.%l*:$e-JOD;*FRu@I5`H_$]HM_E>R1oQR,=7)mL9i7uJg^N'Q=<fLejQSGTtcej].%b65^PFo=8'-f#29Wo
%[AGG#q_28J.S5fM"jaiu=]H3!nR!+q?]<"k/_DXoV+,(DH`5iO(7T3HWX)G0Z_5K^;Bae/l`XM`mkJsEH^`kYZDC6EYt`gdMm^m`
%!tIhaM<!ZYQcnp<g5J=je>OZL1+n;_f15,G+3>cb4N;D$ZmS@,eqoJ8%:?$ZbbfscB_oC$Mq)"'ZuoD?)kp0e"Jp57<KqI8=:#5V
%c%DYieq%S`\dFcM-AeSST]$FM.]_FY_SVr^Bs]V$:SCR7[O\]"`"<Me:CLi@$%Z.e!ogLB`hB83(.bH404kfk7EYb/l%;tMXVO"l
%W^1!2bq$Fq,Haf($m3NJLeI*dWETW/%0gBG)NXNb\@X/i#nDD%5=q>*@L%So)WH\4eNE;6RNH_Io]e(:S-DCB:atn:fEE*++;fr;
%^n=&Q=9*?nQ.QF2&t,bn&(\l2"$%hoR8f<+^R1EVc52u(D_`CX-_`'<Y;6WZank*)AW5;2>-afp3q7C\_1EVqh7#-2,6kHC?\"Ci
%'h?nM#=jG6A3,.J$#S/g=etd&g:fE_e'0(RRWM;mG:QlG3bFERo$pWK,54DZ?WN&AJ8FYd#dk`dQT<_.N.<L^]S4+s.*fP;Qrj'?
%*Y(7WK<`t$"`l9W`$5EX&>mZ)KkJ;&4V0W+MCfTYY!fT^G&f[E@@8.C&sF=,3rD/4]7B'r]n]L^>+/h(5q57F8#*UIX+NF4*47Ko
%c",%,.1!<qMcY'$A4't?^Y"9d4.1:'MHtU/?.fj#<k'ns-=UY^mA5UV&k95WjY74h9ZY3(\YnD+Vm0$7e:<bpcBZQZ1K]`V$.7&>
%R?C??bL;8M.l!fEmi">8TM.;V7a%]\N1\p:3uFKHTKaHY<1<@2n2i4*`)e74K=IUr+fJA.gSYHW/f<_7>9VVQcMM_u8qI;m08bWl
%D$Ct.]GuFZH^UWa)fIF\&22>ipI+.B20X7*A%O<b@C6\@B=Gum4G+Yq!KLjSH:RSL8T)e/!ZrcY6@cE:L:c_#F!WS;3?8J1.7Nks
%#UXUo=68t>MpDhJ!^>10%S*0J#]Wh=A@l.`0hi>,40h=@&V'n!6<+.MQYK>r/8->)hr:Ec;alIA67=93blmHC0!*8&)!Ao=pI[Bn
%qOiGWp[%Hhj63@TeSr(1hHPl!bI5O4BA3lH5C/Af&1/&HWZ0EYPD:Ri`L^<gbU[Ke<*dh_:,6C#9"Q*F.#c#\=TA\%:3A\/F2Y^r
%G_e3^+JIAJCc%Flfk]%&`P\KWb;k!nhJhpf#4o?t<:..*31I$k&Y$BcMV&MRPAS_V8-r*lBpZ,)5/,WCk[N<V,Bn`VP):/9nCcGG
%Z;/*uNh)Oh(o7k+*#/Y4%76._;:JA+rGW%=BYb1@L-`2rD,$Eu6qT5dd`cllK@l>]hU)#Ps&>uCU6coUZW*HIWFiU^!m9JlKPpCN
%kl]rS'XaKa`COC">I&m[C%;hJq-`d--MWa0?85q5q7nW3koj_Z8eElp#J+aK;.2+iC6qk;\7$nW,QL?,(5J(&jAXSRN+P\VP[s(T
%5`&D5i46Kh]c[D`\Z#gLhhdN.RAu\8@e60c,g3.A!^[3KBm47(8p";;\Ql-K$X/@$h/XG^,l2DC,UmJq1QAbXL0PSUN3CGf3PCdU
%SVjTd`&tAo-@jZfGf@pL."OY0@qrmjGNG>1Z\i<L46D`^%a83PV8Sm&r5UV(*YE=#=sp2;OcpQ!L'18RB<H9GbZ]c`)<3EEOJ2lg
%6]+*E6cg_mr,Tt]*eGKb'IeoacHoQ-B<mUY'.c8#Pp+(.)ANlFQmCTulAT2kSji+WE:sD[RZY'5G`U)R[Kl@`2[[__?c@.D%<8N9
%79oQmb$!AcVo)X<FOgbn4R\gu)T0.Cm_-A]KOu=NT+pSp)S7,hIMLF^%-q`e7Xd4)cY#'a+uumc/>O$e*4M5;iMacu=HRWrr(9br
%pRM>a8<%+m5HMLOJjKd'eu=KV<\ZhcKojuW4a;UPR7L'98f!Y:(`RBI`.uq.J1u#XBB@(R]o3q!enO8@NXFRo5su'3K*ri`<:%;r
%O2%o4s*V(d9qE/cNC%[F:.WjnHZiRW6iBFmWYKrjXVgZ<FhoNQq[>O5=@+pmj'=2[Ws^!9T+pV1ZglI07!Ck$&N-M^rF=VA$i,$8
%?YXej<l?C;,LHb^08M:>Y[quOg.GD^M1>\>^bR.eEsDEEOFn2YQ.J('6BLO?8a<)o%sE8HT@&`L)!'DTQJgmEU?Hqn0I(q@&c@"`
%>33D1l(DkMgLr_a=nMm#P/.j-@TIoPfV)ocs.]6#\T_/e0i?TH]VM?;hPl]p)U[)%QIpL_ATUCA1<8)t2DH3Zk4TVn;q'B&3XGWW
%%O+a4EP.en("F,X5%p0nX^ENnh#8.3iCQVsj1r$t]mJNb@N!(fQ"N3aK9nUd]PthEchB<dXI@Ac"p89l0/BPmA=4QM%%3HH6\2#9
%g$`C>5?j/-Lr7Mo/?<3QaUStFU<L>'q+;V2/d/9"il"A,CE2kXW]9,8@eCNJ@[t]e[7"[I9N]H3csMI+l4Bf9c5W2+NY`R0#cmBt
%&XAS6$-e+V7-qo:<S$*MBQ+sje;/YbAp^8\lFr9M,I2!g&<:SiBpV2d.SS.%=+*[G_[Zu=">:O[_HfE;_qP'Adj`g!i5-sb+t0kR
%H]4n8dF"[EEQ6i%"Bu!MRo:h<)27#hEm$95=Y%tRU>*%""45PoN%FUR8:<F47L9fY&s*mmb+I(7DB[P2m/RuUJWRq8S77(W9<iAq
%Z.<($>>kc<s56Xga8dD12Mi?)+tFne\lNXaK]EbU1Ep\##ZZe+-.^_P.#/pd&GoG7>md^8SU7Fp<AqGi8TF]p&LusR?"Jr'VOXrA
%nK^RIDOsS-O@3s?(S,$H%o_'*VdOYqD\c]Ac=ViI4;<Ko*k6thQ?Q*6AsiICKffdpB1<>b@OXAXXYVf5Z*r!*%d-iJFH'a&)Emdd
%79o$T(aO"O<mIR#MP##=NUFOSE4,ll/>SZ*+*>Z3HCB3jO2o]@a!q6d!6$dO0XY,p*Zh*+#pP8tK+]"%&(k+;\3TbE-gZuT?+kWC
%$@su--A*(/$I8BdAFbY7WJO_4Di#DZD4`V9NN]3h2^S/q#M.Re;_Gem&Llk)66eY`.u%YN(>JI1R_tW5@Diq_rI[BaDd9Wm?,e)J
%A7bUKKX<E^NJ0q#pJHeW(%$R%FFdo?FGL92\L/9/(m0[8*O(\iRIjn/YWWdk+#_+PF_8T5!JlTb<@HB0US>+V*L[ull:$h?M,#3n
%rA\+O#QcR6-k=\'"`UdCWn9]Dfs-\n$BO93C1j7_"dtc,"[Q^eBQ40$bAjj<iL%_f$3:CO0YU,t/8;Hri4]8##I:[H9IF"S3)#U]
%`R&*nVGJ#!g07aYhmiJiUHT0"Nl?sP;/*+QRdDf/$V[U`^m(=o\[KPY*(sL/-=pM40HoLCCrp?]Ul>u*K\XaU#NUh$hO+dl[NQj!
%/@WgC3n*cqV?6&h>^V\,dFHc5NB\Y6[qU*lKoVZTg]b)pP'Q`PMm`@a/(5CuJg1>G%4oe$WgJUoiDVRg6p_WtWYYaFFJ'/U5nL7+
%57mGNL)@Rae3(i*NhdrU`]Bk4EKEPE\dB+hXO:Fc-gKQ)(U(&E-;Ig7-RSiTT+uWba?]4E$i[:j]pWJcciqF*Y.b[]KjT;fR??2h
%NRgQeNJN/pYol8QF[eqdM%$!_i[<hW&qu2^%3Z#5@RM%FL[AQ9mM5b1\]o5W,<R_rmRNrMR^)^8VFM".4GhR*e,Iur'mE,iKRClf
%:8:W_lM1tu[a)&%dA`p.[df1IUHe$g$=SuUmgUFKMMB@RF3(Ik@9?on+sELK&p0UcqF.3rV'`o^a51c(Kl3LB+kZ3qgY6038%SO:
%+s$#*k]DJEI;3BlBhWP6c5YSJ-ud^QT,7:K8)GDh_C+!)@a<6KHpT3X2Zl51G#fF1N[#l_[[ag3<6q=^:C'?F"4'Esh[Bn_Au6bS
%Lh.S@Q`\9l1?XQeGR8UE-cP_4Q?=tGnX1W9YS^_#1:JbpT$d[NGD>05aSg/&Z#F!^gi<h&Ld_XA*U5\.\CoE"p__PR&=pas"jXNp
%N4b]`>uF"H:3>Ou$uLO<IJIQ'r5[^#D64eaVh)SHQ$OBY[_&ML%+e#:,"2?+g7@B%Vg/>;&?7bE4OB'+?fkB:0Q1N$9/i-.EhN%B
%96<i<Af@WJ>dc<6M^bf%'X;&<)m6"XHPWNN2HFAq0*S5/&qRd:E#&S;*J_DS[Lr8SiakLNqtuhDE40\g81fkq]:4+.c=i[5qXj=1
%g/-@^UAJmUPcG7O6aGF;9$uY(N$5Feb@cj[6+[X[,_ZjV<EQ&qdtS_BQo<TTHs_$s1<Z)['SWUQq,/X,5^fLb6RQ5Y":2.%]^6X=
%H1*Sgi$JQQ!pb'X1XoQ]NVV,Yr")M6EnOBoPXE;4C/GYrVe?gZ>0+.'i"NF5\_hYn(0296A%a[UD(p5sZmZD6e^DDUVBhsSRZ[:!
%XGdCX;5f9>Ua5I#2WunA2\BFdl9mJ:J/(-g\^NdV0.[M.(,8Q^7C3,nQeL(1jn\4ZH0^Uf$oC:5bb76:6P^9pN#Do;>_e9Kc39M>
%MkD4e:R-?rLI1bQ`_E_^dQ/lb2+h&+?h*AeMbfs8-sOPXIQpY^/AO6\),rp2&;Y_7gYau`<!G_KGTr7tW'Hg&JOC\+rDi!Z*4Vpf
%4pHR(_!sHf]=<jhRD_pB;.VToRucq^eCbs,f(L_Zg]SS0IAQFT.$sm`WJ)L"Hd=LqWV8,2h&Ek9pMa=O^qF1PF&Y<h,pfn/1+O*e
%;g%sB32+0&M+n)R`J,Mo(QPQ6oQ(X0EEk!+E"Lt?AEit;)mP,P4Ggrfmc^a%[K44Y.,^DZNWGuj&_@h<$H9`oreW/YKd1@Tl*)BD
%:;csK4,1YFZio$]_Ik\j&KE+']F!k=cD%F]o`sU_73Do<Misl=1$uLjk-i`>pK2=nJs[GD3=P`g(<DJ%Od/CjNOV\U'-?CR7!nm]
%"jt$cNFcF<q.:&]Hg.=F3/H=Ko^^NOl)3/WG;m/N+"AKH+(j"&_]%.[9;=EH_n^b;j1QAbb:>r,Iu!Jff5J,CqeFDRh(#`p?'n65
%H.e#d=n:l(As!tJ+/Y]]-:UOB^RocSLY-bob"FS-X'%e;`P;/kPKes.(/,6/;h/VQW:jZW4+=BbN_UV5D)BhjmJ*9&e68Q;OMU!p
%o5kOpMMt.[bhup?4THZLREOd8Iq,(EdZ[EMFKFipbD&d75#3O<V5`($3h$1%ANi=k5;>f$Q]/?^`EKemgc7qjp4e>rPPb$+*CO9t
%_l6&J=2CXG_?6DDB"p'/9/'9ZcJp&nZOu`tB]u+*A(ZU9aKQHRC^P]ZMo1P]dndVuFNJ4N:oor:_;-tE$::a0[/6:3f#sS7fflni
%F3V^S<1KBnnCsW%;)gD=aG<Na<W51LW*#K-iZ9W)53^bA]"/;C$!*=3^gN"WPJ.b76pBFDpTjqMGHAm!jQ#u-9OG6GmL4pS-)BNs
%2Zoe&=<S12BNSg\\i91mL4=EI5'ikV-sQo*)=p^H0%8d8E$^)Z*107?2P_?-(h,.*31s@)o;^W-*Ti@GrMpeTWFkI.<c'f^rj!k5
%G8@+j6'A=MRUsqHNjWKA1b,N/Mi+BJEirVpCDQKP6Me<f@)&)0D[0ei=+Q3,#We[NOTRqI/]&#9Mu\k9otfOVW/i"`qmh"sB./j?
%)a$M.jd1qhmUG%[qQXQ.Ga=)\05F:L/^Lg/@L'AX=2MDNl!u?=8rrXg0ECGLZHQLGcC7;\S-0\\^-K%';NAI4&'lm3]I+c+=O^US
%Uajm@BS]CI1IJo99-6.9%q"TsAFPKUU8!CHSH',GR>Zq0i3>lO`j:ks)GK@M!RhPF_A_Cc#8,@>:NtQAo,)CgD5X#o>.tl;'r]B1
%pg>]RBp`,oD'9AL4!grJc]%kk9RZOmhg^*KP;En+n184=4l/8j<u:J6eW1a2a"oT7Tj\^iafnd39jiU3UnUD>1NhhR@VdHkl6EIQ
%E?c4kEJ#k:9tP=<7-NslIlA_5QS\<ZOQ`$]h\W8rTOqC]:]n%Z<BJ5hm8o$lDlQ!?THCo-1^$Ia2Y[>pd%j(D7Fg1h"UC/mc4$*2
%3r#`VAJm;Z+I%M)ea/dsOC4g_aVOed6jCP2`N0?sDK]_;a+C!"$t44Nqj#RdRAc/fk5,ZD.WWF+J1sc(bkI1]rbC;sqm"':E39tb
%?+"60Y*W]af1*TOToat\%&2Bj1i4^&asHW;%Ve5,2spT(bMSkn=9q;"0YgZn@H4oci;IQN)reQ@WNSKE*%cli>QhLJLje?kjl`sm
%Wcb@7U(GSDD$E?T_\cLRD]#D.2#I!+=^q:8c]+D+g%cIfM[+_DfoM[W9\.TN7qqoXUVAlh+#qW.(C^r:06>M@+IL9_9QNe&S00-?
%8]j;,h+1Q,/_MFtq/9A'[%CgG<P*0D`0*#WrTRA\G"=8qb`'JYl8Pe+ATCLSU]ojA(p%'drnXRMk^e26^l(ed4N\4Qj2:eX!PPe1
%2sl(\0L,Q>kS=:0&:o^()Cr^g),u?U:OQ@7%20#&%F/dPLmhb#1fag>VC((Vqq66;7T(o"-Y)Js!EiF;8tS2D_/1o_X<IcJ_NO2k
%,O>?en'0;d&+f`nc%=_N.hQ5T@X?opR_)4<e*;\un`(KJ+if%&2:'r,N\#)sI2gV)"jml;63F+<=gB3W`d#1jqD'n%Vn;?12%MD?
%rH(*Um>.j4?sogCgaj`s)c9E`(96NuF`fo)qKk$kET?sGK\aXM@mVNn<fU'BD4!JgjEcWiH($lRj^GG#;n/8+nhqJ8r2//^YUFZV
%,"m<A@AoOa32^2&*_GC^2>#K*Is7K5c@T/N6]=V=6mi+3RRC=](^LnE=aP>2D6W@k1X=Pq]Bj5`&@_7clL"RAh<)-r<[2:4Ibd;c
%a<)GH_faH*h7bhdhu4H=RE2)/hi1d!&k;?YaSkqHC%iuQ]c]ii%U5g^5"lSZ&=2\&W0(nN[t`*HhHd'`LEuAeM\ZTSE's;AIj>-O
%G/YSm.Y'F\3dBjSQ0T/LfBmoPr"0>k#s,JbqCc40Oh:4/g[7k8HOn-D_S.!noBBhN5%p_@ijrbi*;k"X`PeNq5HoG[K:llEY'OH`
%qNodGY6SUY>W*mC.VRY*.'Q$#:30l>^HVF>oCN\:pK2-qnc75q6YL'>6u!.@_]lSh$0)akj!@aT+@siD-\+ESR)r.'cJ\_TqP5XG
%&2a_,_>9@g:.2gUNVMaUZbD.-2PQP2ji@*,iqVLo,4?5?D'eq6&-nW%j5#R5!<[<cf>E"gaQt$h."[pVe>XEhF&861GYNiNF8\/*
%=46bsTHhtP/eKf%](:LcfS93DDsYN\F;8\;4!?7a59W810^gUKO1G_%L\C;md,*[=Hdd*rq!,Z&7:Bpt$dNn#$^d:rBNau1Otus2
%/O8G$V<[We0M4spa(j^[CK=%)V-G.m7$s&ep6@@Jbjc(b=j<0\#UL?#g<MDL9]7g3EH.cfB8@P`nODGUbUib9\mC5doo.KKWn8S)
%Gt)A^bj%V&O!(/n>oeHBXY:f8#g*Ao*74cQ;&aXLa9Vp5Q%u>[COQke3LKP75VNp'/ePU:3,As9#h).4f`MBYJ(kb?YSg;OgUR^,
%^7abLarLZMgRor!OU6E34PW]qj6(Qd,s'?L"db2a*X/1$R5>kh&=\HQO/9X(,qE-lddbA$%"ks36t:=c8]JUKakbA\!m;rmJmpV@
%?@`V".rurH#MuZ.qNjd]UH3/;g5=0dPsL6HRTV,Wi*6IY;LkJU<32?"'?QJ.%6>\`5;Gm!=o!6XZ5E&$XG7=L5FEe>D*/oY_aIrj
%*nJINPR^cL98YlHBM&Th%7P!1OW7P$>6'll+mV2k-`@_(Ll!G/U)GEdBeui\R8r\JG#"[eE\7BY0Y`qj53rij"LlYj2-?%o,FOZ\
%DFXJcE;k`PAj:";b2f]k3ksb@gXk>G6b[BdR-28L8Yfd<Bo,s3`-U!$3)VY/RKf&"P!YaBErGjt]=46029,,q[:7@%BpF$%"kF^W
%[/q=`_S:7]P&Gr\etL=)r`PGEZMYPK/1AYlbVPLJ`^Z?Kau:G1%c!]@HF!Ad/3o4YL$UB=<YW0k8>M]uou#oYAd,h1L$>-6r$SCo
%2Gqeg]-"#.Cl**X!-naJ^tPK<lPb@MNCpQHL.,TLD1i7ho]8sY:gMh5iWG4H7)hi!+hTa6:Fum<b9M'H:_(F(@92AT8J9Mn`M+\[
%[fSb=:eeWdiIYHfIT*51Jm<RF(*MI_IJJ%]h`-r'YS4deSGQ6UbJ8VnG$ei]A1TI1'P\jJ3&(O+,RCPn2(-O2JJAe*Mfu8[e<1I1
%:W/..2abKMQG&oA&'e`fY&%R1]6FTa7C-,l@-ls.K$5WC$L(j?QRnc?(DZiZO/D2)\h6PE0lrbX&66(oX=;GkWP511f`<%cI=a4^
%B-EiOc;t]75i0q5#f;NM(_5P9D-[F.lb=QQee8/,%BMe'F8FR2)*7Ir)u'f%jWCi!Y7>$]l7g,=*]BU3)7[mA_Ur9=eFAt6gX?;Y
%4fXIV\$*PTmJX>!6M+F0)RU//NsiGV?lh+^ogC9Gg5F,O6,AYaF85V)c_&*'e,sse+*.qLSB8K1CL&-<qjK#XOpmd@AQ^\ORC!0\
%Ok;]SObic1,,&^+MmrnU.uq:6QcajFZ+7@XJ)ODM2rA2"<X"cT?<8B\0P."CffionPiMG<PI5<N_7MgOO3TlElf"hqXQ(Cs&@2";
%]s3`]c@BsXk#+j:T=L"=Z>rrE(E1GSOMoSBki`"jiSE32)d\JE1#Kq*HSnQ_Wuh0(,Vd+5p^#^kUA*b7Du+^=oZ&HW\=m)$m<[^[
%H'*C_4;e"Y3H2XS;U:[3B=e)P)L.#mQnJXR&lI5gJJ27s?4Hh@O&')^AGpF=W[kHo!4Js?;`h'r*V09#;SEus_LH^tjA%Rhad/kZ
%Ce:&6/f"#d#$DF%SH4WMC4fWX=bF!K5sShZ?2Y^)85,2B2CFgap+sJC!&?=c6a[+*MRgKXWmhXA:"Q&bBi"h[+lYNg1X#@^W,+I4
%KRT]:-H[[@ags+J4!-Jt*Wu)]&-Ug+?SC2Wf[8gUG#M9R$9]+p>gQqh&Lg*$`4-&QE3-YXoshpLYVr:+,5<jei"]ar5cH.SO(IcZ
%4[<3:Am-gQP:;BI$6(-YX;qkH'].^ece7%Zj[.JT80UL(s0'ccHs*fV*9GCB+;ueS:5^)[8+e1Q8Q/c9N4)clC/E:X9M&]e76V"P
%Tf_lABG4Y[$Q?*OJqB-$'JMsZc<4)i&ZBDgSfeE[F(0E.@&#9PV/[-+jq*E[^hThW8fA,Raal9*U6UZhT`W"TM+8[#340rD&.OB<
%Zs(*M(oCYsQ/bQh@RCHVb^bj3okCSOmH?BCAF`GoEbA-S7]?NSkL\CI^.019b)'Mp,YQ(+>%-W&DB<q<Ubu1t@Xb(A$)5O2!sH%o
%ht`O[TV@Zldl8</iC28DX/4K-"Ua`1D]1j%5bj@K@[Vp0O4Wt&7NELJP75OY-%+MDN.2oQc'@@I;Mj/[]Cp4GripsE"sZr#E)uN)
%:0>'7/.`\r4qIF5B!e=)>S8u&nW0HD_TY'E(=R@ATeglso>,4HoP%EW4F+YMn"-:UnV0qioT`P;CZ9o-/\1T?423hWm,G;gM2D9E
%Nak090&'gi$biL=Lj1nua,tHY@I6Ro=hl3!<K#Du?c,e;C%S?Xq>(bt(1#%if[NpA1D#Pt&N+PeklV7ElMM:"X`0"=b!X$-b.Ye<
%C'BO$#)*Br9E:E1mjCA\L68?*mm6C1G5SY#^ncu7J7TcC3MSG;q9"bY1+5=ZJ(,7LOc"4"FHj&>a!PQSjACWr_o=/=2Y\VNn:St`
%7hHDr6IE_;rT/0UMIh6F+@o/oig+J*Z/j#r,p.aCBG"3O1e5bp??K+Z]_jAm!t9505Xku]=G@gDEG/eu!@\*2O?EHQJ0q>:2^kp6
%8nC._C=7Wm"0#4P-G'IJ@r9_$`5'`6(4CmoC>7FB!5Nl^neW"T&oFS@Z/3PeI?qi>1ois,+Xq&(TAYkE)O&unH'0K*$"21UK%A%C
%CheZkLLRZ%_;i(?;^8IfVbDfG7p[FaD'isPOrMjlTW[icSBK=28_pGG9PDY>JNS'f%sd+@J<(t@[N7[Y65?dDBKlUcH%;8%>uWrd
%3(:e*(&cm9rE%m[O*Xlo2eN;T&ajP8Z%2DYgds?KEtt@/>(9&K8Z-$t'AM8N\-+a2E2EsH[D?QddPdJr^pZl*P2Zl3RM\.t=7&ZY
%AHeh&V#\k_k&Wonj=X!-[IBiGIZ"WPH,DS:)du,HL-7Yd=gemj'6mbV5S[".*)P9K"VAu4#Y>OnkBe>t,aDEp<-Q;XD.o7k\<W[,
%#!ks>%ZCi>dE!lD\r]]a3AoLne>?\Lj;I!`%T"lsJ4s'HmSeuO!JSIID<=[+*tGPEYBU3!(hJZ+e!+l]^NV_$IdQB=l/Q)bj1>&+
%@o%unXHCgB,E=(Fd!"I2n^gGWIPMI]BcZ>[X>pA?@sZ]a=XU_dMud_)A>Z_U\u)gJ`9JQ!i/Ku1/ut&<`7K%r].&`M&?qY@8;m2s
%5h7C1f.`65)U;/-+?#3OZSL)f[U@W/)N+BC1ms5pW["J_HlQrBCVCH"DlomN4<:gI3S-D4$-CB9:ile3d/`qF\0k?*%?thoFVA'=
%bY<nm/FkOnltPs6:k>UKO.l%tod0[ekUam<\>a*28T$54ZL@9rOgJ`#OX.b%6&4!Kg%)*:I,af)9DL9tX6Jn9_7=;a(@')sX//6H
%nFE)1mFQ&9rESfRUthCZ:b>H2DP,B'?AQ>FhRYibE/8Qn6F&\HO(u_a>bc%WGXbZ\_]ORIS[f7Cr598b[Pa"_p*qa\V`gC)g>[B)
%K+>&J6'h[sT6:_7/tsF`lOCI'g<=S3FMCRahZkCGkmO$lqf&o0RiK6o:P22R2T('A+TGLYYU)emGt:[][OHnH1)*A>Z)B(s+4R1+
%^?_jd#?&e"m(ACR?a9)kJ<KJC(SOI#Xr(N%O](jFX41VQ#>I=^Wg15#9nf/L;E!8PY4LBFh-+&RkJ$"ISCmr:Git`ErfN)V.<+51
%8`nMkm7c19Y\dT'?YSu+7`-VW;T^aU@-pHK7(tA"7TWEmQ]%8R#SHc&dRm#$>jAO]WHpB%Pj#cU_A,F9OhqI7D&j.bQqA!=.$)"0
%9$>g_K_?ko^-[hKH^9;q^1l:ZnL24(CZAO9V?pT6:ZKM+"k6S@40K'PHJj%aU5e$b'EM_bZ3AFbEY8tn@Tp`%<adAKU*1q%VWh`8
%&ud5r>;Ca*%XeKT3[@0a>sJrN/nn><R)jPI:SFRV8BthS'\e2o)S)l0]h*f@E2k<s1qOV0i$boPGtc.<obJU.M;nh>eDZ^tSGbc(
%<D3KDXpj/XP;k-2`G?5[=[1\8CV?1G&U+[=Q?ZS3N1@srBQdi]f>=LcU78!"CsfGO3O25*'D%35?<=Bp3!!R4EVF4316\aP4RMNR
%W8%h11RZH>P,[3rck#t(b's'EFr3VIj@],K0-5f@V=]O)]C71I7;httneM+Ne@W!N[RV50qZ"&!/\RT)a]3CTrXUmV"K>T#ILP1C
%,c"4f!Ceb0XlHiUWbYEM2r``$f8>C.fT3%:\*rRYN4>X(U\;0@An5N7b/fAR@P(cEl8<?[K.RS&PXKW+/Xs-r7E2N'W=iCrA8"BX
%]q0'H7(OCLE2P[\ltmjuMn<&uY%=2gYs/tmDIg$'M:?=KYLXgPY0L1PGneXhXB(Fok&6HJAE+Sg;bo\1<6pi$&`q*)XB%3(\V+WX
%fjp4c]&jKa`l[*CX[H]*l;!J5K5b0rV,T=V^=j&.VhnSBXXO*U9u:hR]NA[*Cgj<mI@;>&/&#47cVQ$L.^'5S)#CS]e>k&u;UD&5
%>dV+*bRBehe:H[QU7#6rdA`"Tl)6o8)SM`t5GN`tqMtH:8UUF8-Lq+IPP>Tah1,:_0p^u)'H;ZuL!L&Z><-H_P:hs5>9VQ#AR5iI
%;#->#CLEq>7%oRJQ7M!$'=?/Abk(m:$:VXIHEfZqeFtnEfl\!1L:P2@.sR:u6dRTmEh`8P%tlf)ljH+V0QM.[l".*K,d\/kPUE7+
%JN%!saH['=UfIlNhr:A'1,!W"lF^iQ6;AdPNtM,KJ&AjH$k<e6$Jj.u7EOLbkt;N0a+g?R+,-WXc;UlnUEN!Tf8_Q/VoHOE%5;3_
%X"fq@KG_Q6-Qste4cJ#[Z7C1e^nO.;4*,72Z4;,;.Di*<%tE5km?D4fesGIndKL5M-"g-P7oW&,!YZ6Al*lIMnpmK6ZuNJ3:aSg!
%OoLn>UH?Mr<@/-`,__4ld6O<ZSWM,%<MPGMYWhpZVi[4OhTm_O@2TJi_a?ZGN.^jaS26HV[#-$G/*%b=\,%XKEW8Cj#KJ&Y4pA&[
%qic7.)H0.mPX$%_P:](\dd5A<1n9-IbRpCq]GZi#%IGVXBcU%>jQ!Y'*Npjj%0H:H3-K)Z6YG<-JI9qHL"lXC-P^\Rc9f?eGao22
%kV,Wni=EIZT2MnP60cK.<NaUbA_tq$KF+uG]FHedOW][NN=hj2.[!qZ'>EN/Efr?3rOAlr=?drr'?P=1g@?R;8+K-S\\Yj6Su+=T
%1fiI=K(Z-_P*#rQG&#m$1K+p+Hb%>-B+XsZqWX^DX,X3s.akBWRoI9I@L_Lm_[\Fc?9TQ7j.Y@7_kP`FB&e#=g=Eb1E9Q+6NeIlE
%5E?K+%aO*fg8!<rSZ6Z0A2P;j:,h-):r]b'cI7i\#))Gb6A8#QOAFniTRZ#RmEUeSN\k%Ba/ib$YGsmJ#U7/L:b35V:7;@i8l#34
%r9+s]9/'-kD4H(#WnZ>?e0"q9XYm&Dc/!.o)if8/\GC@f%im'#n.FeoT]#5ZZ2e^6i,spToe[PdOj<!/'>A#OB.BGOEPT9.Bq-;4
%?-Vt#9gl5ihj6]n=f?:`GX__WB?`]qR:!GCM+<R[]qTL0&GpT9h5)dT$NohPcOm63HbGEf7'WV9CJ^n%S=>K=:#9"-LI7gTi8>;A
%!B3d56uCV:PIPD'[p;D%]J"C0FVj<HAOIZ"+/f3WT*OZ6=NDiTg*htoDtnPuTQbX'R%UtNMe:V+:u*hIbFJ:V?d-;J5>2U9QeVc\
%eou.!#L@,V_o/n2]JjFnNCVl@S2FLE?+Z*9gCkRqK[`R:250^#roILoFm5TnOoOhu`@FM`T=`KY[LGD\&^46#RYUVskUCnaL_N<h
%0f(d5lhF/1Z:USnYDprCfjJsah%J+3;0/<7kFoAQUVnu`@D/VdTP\^<9>iK_`i93a+G5[dJ'GL-3/W*0TSa)c3>T\I(8_l*-:VP(
%#68X2ANB1A+[kR!-WC,!bT*YW!er2l8YDOhWbHOsp4"&-FJgRqMKs-=dNkPu4n3_1@;<@_A0r[D_C$C1YH!(:=0;7mX#"!5Xh%fO
%Z5cXVH9!WIHp4(OXKdL9,6eLU*N'W;W%E92Lg>nRF+"IR7)B)?hW70%d<@mD-;AN/l<Y7b9Ics$Wp!`-N&>K9\@\DP]6EpROTWlS
%H-2o&=Drkj;Ig8375?X`[e'll=d=#ahF2prVK@,<g/bOe[mg.!4Tq2f(LfalI/5nR92!0P<[BdU[<_J5l[un:hHA=E5Y+rh*O[5h
%,[SVY83',Z*o+9s!&i7bcNGl\1AlgA;Nc`NmrBWNkdu@9Q(estAn^+K)f*OT(1MdD7-_tCf'N]D+4fcGSQ.9"R)'s^aNL,C_9&!D
%M>5!h'S_sZp=/:]j!lRQ/WgNUAYR=rOF/.Gg9e>+M1&CUP"EKJY-U[V<_trUqQHp[?*LlJDEYH*[GH&ll<Y"-'dIch0#CCs.8F8>
%U6p;YR0rWh=WtY-Dk_I/1)e>C\d,9@:&288Oa_Ir`Hkd!QS;9b*>3lm)udGrdO?U3>L0iTf\>i-2)X=g\!s.h8X>[/,.EHE56-$o
%X`[m*cC7ZR,LJV:\>R*SbR*p2kOjAt8RspYQg$:!?ZkML2:!=c?*Mr:qte%BH6D]G,rS^)qro@oO=&bZ\.5ZbC?utY8V#Tk'>9;e
%OgM@k+ANS;fFI7j:8FN4lX5pNr:,kkXKSrjm(Vf;dVdulE:q*)G3c4Y!Q6HdXmHO;cg%=I@$9Fh</40;UhniUpN[dED,Af9i#-IT
%^M\tr]BYhDBuA1nro@Be$4[-TJ(I*R'\*Dj#@6NZFnbmLl]FGJO&LrsG!-Hh.>m9lL'J,l*+cV2b%4=@QVDtHRp"2(5oe%aq/o>@
%hgLha'pBiM!>c4BFXV$!FLo5&,'BMn"&8&BVltI2YK_l3PrXpBNeiL`c;J0e:[rN9#.9Q1WA:ia+D'8boOb*.RG@*oZCT4glaB@!
%X.sE-prfV@rAlaFm^pb&]*>DCG;n+=DZ+ujLVtMZ%'4_9lorjNLuIV3ahoMr=n`58"Q&qb-[D%'CR#RgIVqq$I@D%p=5UtHR1QdM
%\=hI.p8YU*3pY^-B2[UlIG;H=V?>=:(<D'%=j\p^,mEuDf\j_\1(,*7DTo>[0rG\uCFGDY7[]M(j?!5)SB/GAXp8^,2Si)TFl\P*
%Vsg)<>u%ZY_#<3Zgj7eY^SZhK_l\%:BV=^XK&`2QD,e3;1=qH(n?lqFU0*d6Cpm_eHOLdgI@acQ7J]`:@o4[QNiRgcleD+MYHONE
%K/IO2[sP@9G3eE&7RLNB<M!VUl!CrSU5V!PqZmJPA[H7ckc^_)EM&S2=B-HMK;EqN(?p$cpGXPHci!0V*JspM*rU:WUe"Z.\0'M^
%=Kf@0f+`d_oqX"0:SeqJ;F7fclk-6?'NFK.!\@OkVjE;-I)AKFpYamum<)1"hgI^6GXSDR%+DmbLX:NpO/d,k4m9IcYIjP\'S-<>
%A:6alY$c3p8Qk0a44O?'C3iaob6jbZ;N&qZZpCOojO/?n4&+;lS0(27]8gH"!E]X:MH[2>f8BI.M%k5K"8@G[F6dtXrgG#h'LF"k
%:do1LQp^MCI=d&;7l<ln?fF6!''Ys:Ml!$egaum:o:=ia2:fR=3'p>F#PpJ;]C*;c55PPe#Br,XlYcZLGEc+O&'Ol`K\(g6:%OZ;
%(4VN?98laaQD,e,\-NS+$\m\h<$`<>Nl4LR!>6M$YS7L=]TE:?LiNNdaXr%34WP]aC@maa%]q@_lFeITNp\ZQG)DoNP--#[;0Z$3
%.puGt[@MQJEDt)0%MsDEf/<nL*WehT'ord_@k^sM54@MT)Ba!Q82%4[`SYfZLo?-LMAL6`9--"N'T.c'(t'OqEdu0OBk<Ka%<43n
%hUpaR?s&G>,K.eK>(Q3*j=#U9E!SW.K*<bCI7E%W;5.TS8)XKhc!DN.&/%/U!>iDuR,h')63P44E,26&UiOJ-(^cGIODb=-$p!FT
%_*`f55*Hm;^`OO6NPbQjfNi<IYt78*T1[\`aNS4QL@?KHnX,JN%Tfj4E#GdR=/[$tI7Q/.GZa0f!!rCM@L*KA9e)=;k%*G/iooJo
%C/\lq.*6gl9ZtSpb@:a2Y_Y4XM82i2+Y\,-k8p%a>I2QIau+b-cI=:8V'm^:[Zgn_TSe4:b!U>Z7"RB'&Sf/t)FTd?d&`M,c8.",
%$&*#o4e-f=_NCm%fpG3,_[LH#1YV&W2ROAll"$,I#ZB()lqZC;d-VKM22%oB-:@oT:spN1W8L>*Tue1,CKs9B6e#8&*@_r"/:(C'
%W[-2m@-9hWmdX[+ikG\\)jT=JKbFe$gIRI$`jio9YS\<+?BP(%#QY0="m;(oqI+S?82dn$WA2OiVpo/;c6hjhg[;Ncs)]SLK;Z<m
%^E;SE-DDE^Hf1TI8\YP)As):)P<shZW6(0Q4O$HbG+>t[\-`nZCB=kF3uRs9a3a2IVolLSLo_amo^3[3UrNih%LHXTU^=Lr]SBZ4
%nKM\j4+:q]e`ne8WV(.YA#nOj_0:fifX)Jt_Lk-Va%FCr!0@(uW*i.aC0fI42arH*QW.<C%R/I=fto&"<r#)qr$=`c+eAk3cHL9a
%Nbtgp<67rGd;cr5,pGG_Mr]u:W#c>*"F2RG&N,5IOuJT0D!S_%_CO7UqjP<cK<,E9.LSA:VTIUq+bP6mKMiVbiV+sHI)pT-YTa/i
%P/pgU&7oB?\Bc4jW;2E(G1IL&#!*bMfg4+^Eh&3OVh2<!C/$JRd'^^4bc*=NjV*Qs+d[hE)NML+<1KG,eRfc+\JR5_)1rp*:Y9)C
%@XnOd8!*_fHT@t;5Z(YdeK\K?:4/.(jMs^O-J=#2kMJc&rF`(B&77Z:T1%pR,,.GI2cpTZZK]G48/WLE.837u?8=c?Ag9,/3'PDf
%H;g\<M9j$;J>>1?nYb#_A's2ZWq-_tqR_-`&G\Rp:_>E;m6nr&XFrlg)i@<(A1AoH>_L++F+O$&,KG,0]_G("]J5/b'o)@$E08,V
%hkH:cm(0?]]u@:1Yg\iD->T:=]8dcR+=Spo#Ugt)K$/pb@'!MYD%3;adX,)kZB@ukq0BqDRYI",H(L#AF1*hSnhdVD<kuUNH!!m=
%/+8T/q:F?Jo2R@0IN*4.]NsXD0c^_HY4CG:bR.!g]JjGnX-8j3,M)$l31.OMU)u20Sb.*5X3B^81u#=:i8osCRoMG*CMt#qMJ2o1
%#0uQb!Y:tUB34h?]j72AcqiN$+q099S(k/BQN+Z;<\d:#jpWbmUdoQ^<OBu#7lS);BmRVA",L\)F.opo&LoT/B,)Xu-2>ia?P5gC
%2b+t0p;aYD&#uoA3O1HB1*9$AL6^5meVdjiVGa7!0uL#ckR8tk$S-K\XHOM4d2Q+5Q\F]6.rl60ER(dD"4\a.(fi[hD1oj3::j+Z
%)-5fjp2Ddg\0Xbl)-3hjQKH/l@MLS)B3SE>!jg]l=hh9;*`hNB/O(n7[1;S5*DSNRCD68Qi]bTSa&VW5=ru8Ee)L6\f[dHoN$<XV
%B>f\F&p>M//MW<-%)798N\]79]+?K5$G\(MG/N>f"(bm]FL:M.&M%+kP?[WFXIXh%i=RSLNAORF,?E0*"/n9!g.;T*:I)H8W,5iP
%.tVN6U>9^MJCW`m/%CrX%!kCELe5nIXVYMZh,O;qDk-`A8JfI*[NeqqmDFQX/(&:f"/N4S>p(YS>4V0E'j4!^PY\cnrUDK*K<!4a
%Pp;NJa/g,PP`#dK(a;AESj=lZlq6iA'eo^E-F85'<rL;'!a5h,>DV;TBSDo`ONrDX"Q$Ks0;''Z<+&]2>#G=sfE"*J`UJ&mcuG]n
%9+(pV2JAp4=,0uTb?QZuPnO7]Dkg?.N.#)-QfWEsVp1pd]pPEnrM+YJ)3OfDr5uBHf]jjYdjfTE/e<m*C%_FM@B22eDTacJ37r!"
%F$#ajoA8c`GjGlZ):uQCH:;c)\r>s,Xin.jf]m>>L98Y/DV2OZX4skLES[jA):o=%QZ_,geQ^W7>F0Kg\CI[]gH+0c\inUkK%l-!
%]'LHl9e3]Zg\c-I^Wk2^dJ`U[l[u?8^t#Ne"0Q6A*HH;ReKJ##Xq&"2F`kdU>M"j>QZ_-*F]m=U>eP:9aE:Y;NEhfmh8n,Nf8X%%
%F^<(2=k=*g]m8G\Fd^hj?'fj8ao]5WeFr-84[1TI#@5#sGd&Fe.JYrI+(k<.8pFGm&*rLp!WG*a.i<Kggco:M&qQmC[rlHJNSDE;
%#W6JR?.]m^=ibK)HfAQ>V3AC=^3dl&TXI0>]#1ZV^?YL]`icgoPE:;(?#bcmGP-]nj?i:roMlki,idcJ=7GKLKtZ:f$*4=@\g"Jp
%W@q^J<tNg>B$iorJc!lAo!\+qZ!F"QEd3]8me1*DFq&hCDq^lICAI.3S[b8L-Z:N6%L+Z<AS?R@g\RSC1N_^aL#epXL'[<9%_?\:
%7_:oe->g`aU$G++!h7@7>qtr4c#AE?M#K_kVh;.9$*)ZG=&>#gk<D=8gef53`BdSd=J<NeK<?'JIRUD1Yr[?nO=MX@m6[uRTd5+I
%jN;b1Vamn[(Sc9:l5/?q.UC+qQ?)ieRX[.(-PMXaVrLijXWgh2\"=GP_eOI!;br>?c\l&!BluLtR9#)J9m^a[o4m,Dh(l*Z5?riL
%2bpR?NEhfa?-%.ker<q*A_k.ERFVgPQYCSLFf'9`f4A,EE*]np"'9DF2fN'2FTY^OX`!$<_s93_Rg3gM[b7sqCH&<L[VjR?D>lFb
%*sVJ[2m*\&3WW<gXU_k0D0<YEfiA>_c*f[kC:;Xn=)V;%E*]np"4q*g2fSGuFT^6,>;pM,[WM[RB3R<4?++n7en&&EDY;"lj47dH
%2f;p@ode5S@@^_*F8F%bGIZ2XLQ`HE?^[%;;tj^P5;%VE"nSt"T%;ek&[uBASG-@9\.qnZTmLR,BU8"5XuSu&]KF#2KKp6iXR$B.
%U'+6$%3X88:Tu]46k2`R"^<cR;EA_V%CTle6-i_1\.um5LNg:@nGC"#]$CR#2:=JEekDZ,`Ot"P"]]S$DM9LHd*B-YPISZ'BZ."j
%e4&]3Si!hLC7c<'CCX?"<qf(BrhDI(hQRT(10]]Me='MD@s!K0+j-SJCK[k"+5F(aB^17S3Bj2sLK\8>7Wt_1#,kfIY*^"NOkclm
%K3X@6C8"[']Y)XZTN3J5!I#Kj9%]4$IKd,GUh!jPZpI;aV%$TO@`[U7XW6/glP[*>=iEipVkR3a&7W+FX3?Kac`!-#iYVfR>%M"s
%mr(@k^$?lE)n!8Br4(`./]5h^gh5YK-EVgLe'rhM"8B4oYb7RghObOhHF(2,S#)F1=dS^Qk2hl@2RtsfCFe1PFmYSE2)!%^c)O(\
%D,hB_4^$<h=gqO>R!"nKrE4&>(M;K8F^`j<<u5I3g!tdZ[p<:,ea2SX1B$G)]ld&%]`["o=W=c@;L:c<F)Q!oCPG"]m>l0f+&q>6
%la!Q1YqEZ"&Z`CA)mM$-\e486WuJ=8m-6p=gTE0I]'\cLXPU*4^q/pu!j(.Z0#2e=Wsc1M]5!.EgXV![:PO!8ennM*@ble3/$&-E
%9^AU3`Vd702decdLBeK5T9,*ipL/M8Y(QUlH!"!@Msk;'#8,UIdOYY2+$jXK*IV<aZr..RmG]2"rp]toVq*V6gsB"Q"D09Jl>]B=
%Wo>$cS9HA_dBO'p:uR]agSSbgC+kR!0lQq6Ub0O7fr\-!]<i0(KeEs;7f2Z+SOEDDS,Cj5g;_`E.\1Q$YqFpVo>^=r(]WP2LN,PU
%>rjKR8U&K(b"+KVMcd=VUc9uUXP;?0MJF,PhL1(1ZLsE"NJ^Jg4$=uThlh)FrU*6sX,X<`<''&'@U6_67MP%c!BXi,l:clFcaICG
%dBR8;Ofg0$"m$B#.ROh;aX<?B8[\&);:.gDmQp0F^$[0*G:tGp2I9@kpAb('mI<n*=,$0PY*BdXat]l"?a/<A?U[+L<=(=45@Mj\
%ncX5eoSXC.%M[7[D,J]+EV]o_Fm7(E!e0aR1p)20X&M.>5%39\lfG:RK)DWp<L?C,O$We,gI5(a'YG-5a&79[/0u=Krs232k,Fau
%\u<h9BYCk+SOEDD7;:Jqf2X;kE?DG<hfX!=)LRr$CO0$M8R8N^%#Y0<B2JlXo3#eJq4U3USpH^B&t;r@%Ql22bcZfJ9(NR.YLi)8
%,(B9f1i).;.[A;hO'%b;]"'=#Oh&?flhdGThs66N^j6S],sq9&<'BU8W\gqep3omXar-2fJhYS@C$n:Q[CskBoXbp9BcCD\WH?..
%`4C?JbtVonjQc-<CG)UP23O;A5>==@TL9jZ=_X[IbElKJ@3rVMlBR+^'8__)X\mJKC&UEcom3/Bl$(HGZSnD?[Q<G4@U6_6k,pNd
%Lu*5#6JlE\U?$P3OW#cV<<dL+)6YN"'Q6"2%,nqZA4'%4;42dXqJ<>sM>5nbb-[-EQ!%bT8$p;q`S;/^K[.rJ];A._.db)lI28N8
%bluRj*9>Y=+jVmmFFpm@K5RSmdmP!ClQ.lVC9K^U>/(t3D;a_0P`E7L=Ej4[;*b";-Z$eUA'%kt^r`A^?:CB007r4l'JJ)iP1of-
%1e7_4(YpI#XI2k'a@'ZWjr[QA[9e%in[iFMAo2p$V:@)5GPA8,[r7kd=:h[AJl^$nP@_:Vh2M!WLr#:<eOgP5B>["(9F=BR8NYFJ
%9['O'EU)CidZsH\5%O-_d[0t^?#OsN^A$aTnbfX<Vig0^.^-V_?6Od-[\;!Ep*sZm!/=PufDm5ki7Mga`E];R)^a.eK2:h4Bf,r_
%!/RGH7)9l4D5'bKZq),'PeiI%I,psb@fa59P)dbZK]@[seWAYKV^(qX;/*p2=<1HlGe/Z"eV;5bbU/V#=(doW1&Q")8[DV0j"d,F
%Hkb++6s)]N:1Vo1`(C@F:qCfFmSJ^?1B'Usb1(/Ag]B1N=i7F6^K@h+^/!+B_)J9O>]4kQ\i4SY5Y!+LFRY)g(,Q("CN7eS8U>^U
%HGd)=]`B4Vi+!TB\WXR(n(gl$7<&nC%ZAd&5TCtE?k)&^m7me:6tW]orIY8BZeBM>>E\YZrcCdHQt27d=Du+@FX43[cRofY]@uEh
%gg.8<h0]$:AGa-q5(VlPeXIm[RT[i20GgCE$1"=jE#go<WegL2%Zd]pZ6(V'&#G2&]l&\P]%g1_Wl*guY@H2b,N#p^9gi8j"5SUA
%F8!1lJ+!d2@7c$L\#kbk/=^/DA4n..l0BV&7'bG/%F7rH#0u]@iuiU13$X90ATuq*YESVNAp_@hd/>"m/#]="'Ve`P*>X>#0VD-o
%YER>JGQ7YF\mOrN1<M$`/77P6*)e*VMmZ[(dsK^8T;?11ENAi.CrF)3l'*Vskt#\m]D*bh_Db$A;-?"=IY'/-71!Mps!U4dP]cP!
%p-R+8QZ=r-*ot'V*Nu4gUXroW'.#t^;o!Z3oG!#DHqG3DlQ!c;NZe?QoMu.E.sKshOPdA3Ere9c)Hq*A(0=oKo1W"6Y62qAfZ7u7
%+L)5uO][J@c88G#'`:eMATSW3T-BdV1PO+#,qLKrF\BMc2aoKbPiKnXlQD@p"e-qX6Bk]MJ[mA;GX3.oPbFqF;O6ZR@:=^K+/D"C
%!!*FYMir#fIE!%hM?_fTK1n$>cn$=k&4ItgYf/pGLB(nf8.3:RpnVL.f,R4MFX@2ZMafbcm]^eNijaLU8fj^E/.hG!.49Wr]Kt1l
%Zon`73ieoGM0j3F"HqXd?E+utHUnWCdtOJDUK0_`.6hOB;4XsbQ1%)='an,cl2V.tf/)b,!ql*Z6\U6elQHQ9UD(Goe>F3U?;RdY
%ZTnTOp5cYZAf>3^j",R]]]N2=U#V4-l'PsX#lB[[&+EML?EB<f''uMn$H"'i=pj++Dp(\[":D2-@L0q!O'09Zc`'#k@7pLF%Zhu0
%$FKBo'4(C/rdf2W%Fa'(I.pb<:u:9(FZ]RN8a+/qeW_`mmgojCFTmtoPYj\?.A=43)B^S(.,#P'AX%9'g67%b,RO-WKYei!.q*9d
%i*GBD3Z3/\7]%JP?%Wt8#AMEB9X\Jp_?\1C7N8Fb;8h;K1!"u8[h(5$K]S`r9rW?IL.#GarE2Qp$S71H8iXp$W]AVqRV5k@@kW]A
%"f:gb@-l6O;$ciT>8*2hchs4K.QO\h3Tk6RA1<U^=VF0&VX-0;FER"/OW2J9SC[n1P$\f!-Gcg?>$AJ>LmVbDpPKfdB'*15TtbVN
%&NIPP;S*[+=9[H_#aQ1</;P'Xjk><R=m!b2&1(8-IR-B+5UW7\C1+DYR^X-gA,[WpLM%.&UK%ZQ+$E"PUac!j,@khB@bDq\1(P5R
%dQcP'^]Q\c/MC@r+poS]+1Tjni.&f(=h0<J%MF.'"DGi)r/!_M#k5bVRh8V39stpYRN7:p$C0TO'k&SW1B7GF/LsOQf'=Jh6<m?U
%`?C#D_:lh.\H16&?aLbN#mW!'&p'du'i'SG)GAI'rCff&6Wg4UCCld_r)FJ3=8>I5Q_bH#X(+[X&/J@i>03gsNpHAb`Rd&d,/Am?
%!n?ZJMjWjnP*ug[%]Bs)G8$NIm;FFYD58-b+4Ho9.FNm%CK"6nQn-*[.-AuPKf'bJ=b5senM=J7ffH[1D5;j)('P*,-42[UneG,S
%6IfR.G>.PLPlQttWQOMH$&X\\Y\$J>$hl:QS-k;lSPo6#'h5N:/Gi18cQ^MrTaD%Z$W:hGUb.H.&0e)sHqF[3#[)hJ^C>4Q")oG!
%GefR#ZT_G-0uR7B<LdbOE53RulnKBmO`+$hruSDlqW-&B@XDkj)7F4dFs.u%;K:djd(sYd%om;'AbY$W)r*NWi!fa5%g=.MEH!1C
%GjWoiPT25216[H1kgUM[fl6MQ1'unY@%f(Dpc-Ma#[0?aE?:bq9[k8j6Xk2&=iKq*U1$0mSL>Ss^+%rr_O-/m1uRSMOMieXp7MU6
%#mcT;/JX\2JE>B]-\"mJ%98,IpF>]R2H_)ln#rXKk`rs.%3aY$#lbPtYZVt"K\0$1E!1@F,thgjFiW[%bp<@*,?Fa[PZcr7TGJY)
%S<,p_`Z5D=TYS)J6k4PKcIc*rPj\I.;am%:$&,J0G$t6&H&O[.3nQ1pmT+]G[9eRT%L5p`0q_m<K,bB#^eMj[b+1.#Q,%sokTTsn
%\ChLOeF!2PCk.]mO4je1&l(crWAt_8:KP$?Loeso@*2o&&nA[MJToqb3Nc=tH2K"LQruc-Eh>=\+Mt%l>.Bc-chNR[D;70Tgo,g\
%&I*J8i*a^cP%6DU$[S4rE1.g\]roupO"gZ(MM+DCdKnb;=+XH3cU7i5KH'/*!Gs%)/3DVR<Rb/NLr^)6>!b>BB;nmHg?Y`OhC3lT
%g]XQ7fOdr`G0+8]GU@0DIP+KTm_2(+aI?B*:>CN('$F,2UW9l_D_0oW)d3dMMbAU0.q'&c03#MonQQaB6l7p9eo/C%L^V`2IdE^Y
%iF/k8adT'cXD;`%%[u`e$*lc@<^s'o8/fs^=a$']_'hL+4I=>:lBHC!l@eUO8jIhlkh>P@ii*6B1'4/2Y=)U@k[]@:$B6hV'S:ft
%MGMYOTF%QLGTR$W_)O%.`%]AEQlCpUdKJMs8Apk'-Y*`k#3Ggq)h^k-#lm)R,t^TNEVu2mM%(XV(.ent^,V\j=mAa0<_Hu*m#&2S
%A[IT]bi.Kr[Fc0QIs4[Ig^F5$M_V=nM"+f)1!6SF/&shTAa2JRIer4epM:0OC_OkU_I[OQOhqNqh?"52!G*O:q(Q#U18c67/5Vll
%DB,0V%AU38,X(\taZM*-QG>=^RBunfkD[in8E\rs2\*a9a`3%I$aYb%1cYaqAg-ck"L&VR=p3Xp8:*p;I;kD.MaRS&D!nQ#Y%]P'
%1L<7iSC=3N(![[*WO8$:MOq4.I0[juh6n(9@FA.On1r-S+&8C%g>jU3SCT&nRF;VhD8*^Nl&4Fik^DC5`X+WBe&<MQlDHc&$c>Bu
%W`=I`N!G=&C^055S-T`(^'*8u5-#$q-bp6XIq:pM;Q>t71o4&\kd1Ne:!sni!6@RGKOGD=s,qK@jK>M?6`3WGH\&mo2,%&Q1Dos'
%=qS7H@5G8N09O46UMD]6&4jCZ?6MmlRar"^akMlmSL7VbK3P3gYlkX&keaTLCXno_<`tu)N`EK49/sn_pC^o2o/3l@?N)3K\B0[Q
%.A=t-\CF9I1]9!jdm&Qp?'q&Y.SQ*gpD7shWDM@CZ3:Kr$!0]^O6ZV57%9m5[G]\@pK68;;C,smI/@O38cg&(X-T/edN\.U%k&&N
%OcKg3)&%udPB-Y4cZ):?,^g#&/N.AZ-J;u@.kSgFINCeM??lGECIJCGL-+<<4Q>"m'.U-Eh#fZ*JJeK)m"%AGY7gON\72YQX14.>
%`T_kU)o:;rKai\-3))rfJ9(#/#Y958N^+@T/u1'5drl"4.#Ks(>^3##Y!'^sb-&So9i+,!6q!Pp'\&5A;#N3(WR37dW>S=<&L=^b
%^AY4HS\gUJ2(94^SPobr1>EO/MdNbJ+Of2PCm;^Z=\?UX;n(@02c<5)A4Q%\@>q_pZT@_VbtY;Y/F_n2l]d[a)Gnef+Za6:kI?4"
%:H_+n8..7Vn3AdXTH&\@ldg<>9+b<]N;Kq,S/"UNAn4m!Y##uTT\D71%hrD,3Qi&#UKBX)QI0W"OV]<tLXQ+BbmfrNSS!uk'bgh1
%g]">)b3Jj&Q:/T;-Yp_kr,@ZE,EZu+1/JXYoQ05VeKeE3*=q^eSM>(FS!c<L9UVX,3fsipm(V^AI2e7gY&pRC%iE1paS`lR.,o.5
%1UoN1PdNe"aC$S;>cS*Gi!h-#!$3OkKoHr[1o:a`"E$aF"_#]0rF@(m.QFHFYJnP$Q&H#Ll1maN8T+rui-bj9_O&0%GrM/.Lu=H7
%)-(g]1gU;BgF+#a25<i\,qqa+&@<Gfidlf7l7Z7VT5f@^KeX5+AR`DDkU_f3*]l33a,iKL+X(gBq)3ctaY7+4^(5!L#@.iG%E7dT
%eg,)]$8?ik7_QV?:\t7o-&sB)-3:`$<W!rQjYh\'`/427]dC%3+?kfCO&5.7Gqb80bA][G'HblV7Xu?j1FZ7gmK(lO7rd[g7k@o'
%G8](%\;^k4fNm!8*Q0k%#/o!bgqR>2JMO#RTY)>*K!,7]0kg]./oG!n<"rk).t<AD,_2.2C]Qa88kU4]kL6hcn))](4XSGODZ;Gi
%9FHk!ckQHH5Da?R5R+Vb*fPj5L,cA9(/U$UN/Ddfc>+k52SSJf$go(hG^:GDPsJ<LL/L*)<-j'4fkg.9cBG#e)'s=.(-D8Har8oW
%'c%259t4f^)]hh\@MJ<!3*XMa47r1LZ'=u8req&B"63)>q_]5LQ4ud;,T_2@(Q%GbQ398Pg*I+GV1rsN`g?p10geB(/JCR-BjOg[
%5Fb9I,7QL`K:qETJhZsc>ji-P""nVu?_L:H/j>X,`LLB#);@?TIdk>m<?'*m@tomOQm2Ir31T"`*)GY_\T/su*W0%<+eF5;aG6`'
%ESKUs&LWBJ4d&/h=FGA^J3jQ8$k44ra]E`+B=@dZW(:`@6$6!AMCGFt:fEMe%8LM[oJA@ch<n_q=A&g)baIq?._qob8_#q6H:p7>
%aDfZU_ZO,$TYZc%XHe@rYkKc!YQh^E;gr=2SS#.d;hX;[#gPUBAt8&q,8n>#JP'H4/Wk%c2=&RC.3!sqWTLbPnKq4N'/dQ.2OmAc
%`1HE)lnr%Yn.$PtX#Lojf*sT%fd<,'6fK`UV=fNCT[4t01lu7LA\:5=6/Hq_TaL]:nT1OFeXkYG!LBAXLhu-N.<FR5#!`]S:`+-'
%F*@lnpZM1=)+#JU:9J5_Jh,#(W^A1eQ!C=V-ie$#LJa+/#&;9D=9q6E,f=jZKS"h9O8Buli%C+/WJ+/<d5erQ$LZ]sW"VEfP(gLK
%$>u>a+;R.lHU`DK)kZ%>%bS/H$1A^8g$iO(RhC$en:^Ue#er6AEnC/[!hRVfl]O%fTj(dHFfX*M;&hh%kiOAa!!NB74I.OOJdX?F
%A/7MJeLK%24[Qsq"15fS$Jll"""7secRB?sTV74W1OoP<*r<\g5e2(-@hHjO[P\9D,8AoI1P0Bc'Wd6_W,;kE(WYIu59U`J53NL\
%TqM'1'o,VIs,I30$)-i,RV)^i-qJaHjl&NSBGF:u-\O5m<];p'61s*-Y8;k4lf*\g[u@-WW8!U]'F6LQHnC",V_7=i:lrUe"Q9=f
%ZLfs9RfSbqH@fW/PiInCqZ[R-E9g]=_^?]g!$50gJei>o4?gTE%4"\(I)<t`g?&Sfp\oTFqD-?"q#jN%3BCk:%%s8!U\0UBfML"Q
%3.-=d<\3Be:H/o.UlA1&T>7G=nVM?LP`8JcKYt5;8jDeO,U4d:;g^pOMNQW4-]g$3DrHn,%mO0I=E>^Zn-NUA6%-$-$/7m$.DmNp
%6sa.[J:^O:'3tSAP#="5$;a,$Tq)/j?T-PR"Xm(/:=s=jTWh9KgGV:t\O4GaCaVK!,kC;8!9N(V5<D.+(;g7u$U(@m]W3>*`bk5m
%DnoFWM-rm9o0D*KmG4.LXHq"3#i#.9/?Qsob1NGKff18i+A9X"BoYQ#P'?HE'LIs/r?=LM-uFh>]&KH=mb7=C-dp!_[WGELDs)eP
%I0ce?^4AD?,,j*3UETc#eSZ,-bI`8tCSq@5`_D6GS0FSN_k+V-&r_>n$KDNX94G/APKBi/Pi<\Y7AX!4q2i7ELrR7dNQen_D[H/e
%"6!FHho+l7BEtBRWr[*^;5t2uOJ']0"d*=XD'WOH`a=>s>F.Gj/-()=V8<OnY_\HZcl:T,YV?PHX:-.sBs-A+iSdeLQ\UCbWHYo1
%Ri5Q61@:ZL?7J$A^cihDgIdH=>'&1<I8JqLN`$2(G4tm0`7\imJ1]MJinYPbLon.?<2Qte$n`Ha3`TLTMX)b9`t>r3NjPV[UbJH^
%Rg#)s;"j,bbq<75R+m<EmAXjoAX>]O)JdNlasL,/7B60H"n;Y$oVAG(3V>=QRa_6C%8XlJ2T-!>)R^=`4nIV>2G""OU^$'EC<UgQ
%1c+9dA\@+jAG+$/hH>Co5<pVtoLfCeGN!)u;DZC1?/mJq4:oIhVl$9#2K;*X%p@I&lHR2&-8o@V/"#?(HOasgO#P'g@E9:.`!9>*
%AmUe1-:Q>nd=?[6PaOh"'Co3s0csSj*)/s9@Icj_Q"@.?MGhZ_q8BR(&u.YOIOS:j)M-C8_=CtnP^]ME1EOUO9I`ab/M#GUP#.(`
%@aGVBp%WS123.[ept^U2.t-S?58FIE+[d:DF0(PDm%)"W3?tRAS;`q)CjFQbbuMC1^krAUr+Wu(24MW[e*ADeY6it'OD,)LQZ0T:
%#$F@C9a6PJ&gu4"prc2EjeFu)Ug/h/?r'1I>Z;>iPFP0^XNQ]930idjpL.Hff\?ct%e#[ucGPT.*%I[PL#L%PRdHUY:)4i!F\N\!
%hdmkU4)Y0SYY@\6Qp_`->@Z*J*/?"^g6WKq'G@^-XBGeiYm-cZI0_3Te+bY#6BcZ\LN.R@#c-q0/c.DgegG1T(q<^JGT<@;???Yd
%+QoFPnR<,dPH$X0F$NM,WLZ>]3ia$[a6ZQhq.PT?5i<2H?RU+YC?,T4=/UgOO5J>/AL_r=88-Ge!Pn2\,]a0DcB7A=LYheme_Qa,
%K3.0WiA6qj!2V0UcLDP%`9M<92d*Rt)O4/n\Ac>iR#K0D8LR2"itT\T,&Ablr)P&nN2Zc8oN9Pa$(9:N>iZsC+kMTiO!>hNq_/P0
%3mRmBDANX'2j7!7e<V2^IH@WQ5;og7*j`G;?ShrdcH"c?Z$GrJlV1sq@d7a8q^@T$6)i8m!\"QnoubPMYcLc*Y#M2u!fVU"%jE<p
%f$iqY[(`Tm!aEemir(nj=JPrbmk0`/k"#U1K>)F'\m'[A?0pCNA@?!9`YOgR.b6&l\Q(d\0Bl,Q]#^gW)U'NW"k5f"'Ps%`H$o(i
%j1-tt_Ye<'hqFV*8OH'Z#U;rbo/rf/Sk7#^r=951/Z<C$8hmh]N,n.9db;[Xq)V/gDNOHd9I.;AW\<!OJcCm02lK+h7ZpRoR.M^!
%RCip\5N^cZlQ"OnS4$TPAp<$p>,u"C.I^2uHW9eD;)n$^<`;]a-E'pJD8MVZiO!gpf1oWFM7WuL5'E%XdQssSf[I]Nf].dAJ6uqA
%L4G9\*tk*Q1kSohBFu^Qh4D$a`o&aMp[L?pd1>fc'R?'9\,#`@RW$dBf4//OG#@YF#S;HL("CtT&'!ZdYRuf@QM@L0_=Y%+J?>l;
%L/rINW%\Z2e4f,m,TT`!n@tKi))jenO'@e_jK%e(nP6jCl9or7N`(:$KmLsS&Hhdnh9,C"-dp#I5Bc4"[I&V(Ne;!\1No9H3eQ<"
%4#X_GL_-).==/]Y1FQMXh,(FDR[4G=Ff$Hb-[hP]d_U0n(5.rPC:c8'MhdCfqp3hO7;iuZ;tpuBpR%ELokNRa`0P(8hOaT7Z)X*l
%2.S:5WG'H<924um]aG>\-@MG\?=Q`V!84MVeu:LV6qBW3c'N;rGnY_6eOZZ/WC[Norq10jqM#YDS_^pL_=R8:542^+oAEG&/GQE>
%"8.^EKt,do*BF:3OL2&SfW@cRBU-;,;CYFcq"95/U&4e\!6(W/*7)kaba'OOUErY+/atBG*HQ]-Z%DC5QAXA93Co!%S[>7_FE3\5
%aS6LI9^APZhK]\flM8*'*=.m<LSrr;;I6uGT.d.S5N5+JNP/2bf(.Eq8uhR.T-pk@OFY9d\$V#c,6@FWboDKgZ5TDH7MDjf&rY-l
%g'ZdU%F1t.SB.4G9_rrDDU!dR0oo*@b5PMEj+5!2GXhOB#"PfGYK+A)ZoqL_?W^_:l'AT2:C8Nr=j[0l$16[^=Zd"!]BjS@o6IXG
%16Wd8`cfnjO;6S^>XqRSND/skVoXcqcV-1aqo9h8M:$f]9=-!`E]@#I@m2c1hFWco10hc3J9)RUm/8J:dCFNLe\dmMDZ>*`@"2XD
%Zn63W)Z5d9a'[pYfOIg.ds?&4>HpaLjj@+Bl>X1ga\2Q)R.)pZ:>"edg)g<G3\CEFqGm0*VrTs8%k`XSI[q9loe3:C^R)*pXH2`9
%hXpBD`m!#sY<Ta0-]$U$bmAq9*@G.8"H)\k')I7Irr'0F^YiVJ;'2:\_FXOEUPKOQBaeVtM%l/uo\b2>QrGC\LBi#;hGIJ62PZ!Q
%`_r?un">gXWUp^u&5:%>-A5mYTc\-FYPY@;gZ&6-'#YXL+sho1^5.qY-_@+OUdBH7+Q=M.b7L0aAWK/)>u0dqYuR!>9S9'R"N:tN
%$?dYNq@NQ>=.:Qj(<?cW\NCG/"t>3s4$8pj5Un]<W)>HT>-2j_-+dFnW>]Ch>g!g=6Ao__lcmimQUlTF)%h";0TjS1U8%-.Bnc$b
%s)5C(js"n`BQK?=5AS+*nf)3(Sj`m7.dOPf7BIq:14.iQA&[_n.ABl8,H4HbWGGUL\Zt4g;K);o716ADI1UChU6t0JVS=NIV=k`?
%/X9Yob8<Ft/g$@Jdc=WAQd"a4=VS`A#+)ajD.CqSXq\p#hai7_)"igEohT>^APPrCEr5)S27cu:r@36[.:(($RZsNhL!Hr8)1RSV
%Yc)IKXUas#KIk:Zot?glp)"ragQo2M0,\7N=,`??-:.)D%Ac&N4\K`[OBUoOiI`Z)4qb5cOfR6.(=bYaNF2s7BjPj%Uh)l*)Kfna
%%u8ouYQ]i]$E$(h;Z1/uUH+J9o_;D!4BTd1]67$oZ%f;&Q7UCoR?8[r'5\5e2DHVcF<[M[fM@hj`L/9<6"ak_04!cYPDV,u9NCP:
%@5K%IRc]2)I=,%NZ?2quKT/:A:]gG-.#LGm&,I@[eS]RKi5-^[.\niK5R*PH[oI6Jen_E7dbf5E,^0dmdDk9j_`6u\B4ip_C>WJ!
%bG?"Ze<fRW;Qgq5:l]deWcLFZEm%CGJ%mas&#*f'D5F@fP:FP41!^H0O@Vp^PP8Al?DQ]Ccb^PcVhV[?TqaV<d?^#roZW(Gk5$VX
%e[Wn-\."q,1t^P$m,"c+U)@lCQLqOcS><GlX?kNdKalmQX&t"e[u*$Xp/\H\b\=CcPKQ1h;p`9SkN_0@3iRQ)AENbaCl.No2q.Z!
%D\Z9PWNj8qVmO`6EE4G5=+8MVO`chM;,h\Sp4R`CT;e9;7=X!g.4VU6m7EP%.e"\echI6PWce?lendRUemVs%PseO;!]0?-bb\TF
%M>f2a(=/&<\0dTVMdq&0AnX>5)CKO)^'@m%Hb-%H-2VOPEVm(;_:h"9&D@@R>*i[rG3I9Pm<L,JGGNk]!ON%*=YK3Z0;][K8`?)X
%BtGCl]9%-\e2nsGd<m]gmq+ul.:pU$NO)F8A1.>2;`F5V,L2U4#-/\Z+3,*%'9NGambN?%g)1hF+RNs>r#dGU,M%6g>t:X/]RI=?
%Sc*;05L*?0Sbg_'rd*sJ6YtoW8n"^^Gu@nR>0a!Qr@,3'3?f2tGcRW)OOG,3+MDGXV=JTRJWT\>%M+au*:`]]q@Tt"Km[X["QR'N
%``bN&K3L*<[;/k_@l1@k/1YPLW]a>t9lcL(7A5@UMp3an,4)r<;]R$_qBh56*QDY.L9LJa#%UF9pR'5HpF;_DVbaJ+\D+H(m-_ZX
%g8COr$J68"X(82HYGSF.dU=#VQXPEC[-e1BM0)_SoX?=#)=Y40AZE8$X9j#Rg)k*lJf0Y*6[%krkq&B5UE?N"U2"@A78ZS\6#/O*
%g^Z?YMl%^p1q84+3_1]TI[M&fl("2]3;<`@>+YTTFWD8A\*mcUa*;>ABkQ2")dDCCa[t;JSYQN:p"u^H#'=_kLaVb.N4-<M2a,?N
%[;R(.ElVm>R)jkqeN)V1<1WI/D<:Z`mSR-sggb'3n<.XTDDU7l"_(8/TAR^9=o5&X_<,oKGIUHgc8&(C"mliVM4OQ!Lc(f\9ZLGE
%ElPqNGT8f)\gKELOG!#5,bsdiOsq)s8XMrA-L!`\QJJ#AR\e-(Efq(/HLVuC'bE0!Z.(+Vmgp3o==&fq4/O`_0H^:$q(8lXEF/b2
%@H/^;1%UpXX=n"$?oDLL)-0$oh.XcfQPL5AlR8Q3LqWWM+UP8bIA'<HAfbL>AlI.;_^T+0A"05K\1gHX3lZ\M`+>,>Sf/G<EJ5mX
%j>!O3YV.+#.`!d<$C0i)Zf8aeA7n/Mr;MA6Db\YeqQ@d@o4r5JR,?%`__iV<Z=`+A/d0E.A%@CBVm,05i&Ldm:SD&/*pAPF=)rsg
%%NPD-1M$s$Xcp-I\DntURt9M_+uIa+pk7*".F+?6#;/B&c9iQ.XMP?#i]s7Zo`kE"J.b[L?P_-7f+Zu7h5`rU9Aa`mb/qc2@p--O
%;;F?JObMJRRcrTYC?47M-RITUq=aUVf2mhHnPLGs`u,5.M*FQ=?EZr2kpHNB?BPUS8O<RVjUfp7KT,#[Q..k2ht0@+T1Nh6_A&.W
%?Bp3WrG5RJpQ'eC-_P'SDRk7@dXj,61?RNij[@C0PV&rCOs)N/c#H[*S(AD9ko/fHKV(ls8*>FO.Pee=fr%3(qfl/WSk<YOS$8VC
%X/M6"Ht57fWcZ\4*Q^@%XAW!uB?E'0om+ZqGjDY'fO5Xt*Do!uKRF1b'nqhcb=F!J%pA0LW[+?J8EG\&Gk%h2k4=!m#iJ^_6/Sa[
%*pd#Th+1PUDVm^`KOdugWZnN"I:Hj:K=p_V?4[RJP(D[$A/Ih(_k<aVVm_>'F.-'cbqL;u^19c%kX%jW>l'745_:R[d7&=j_1c4(
%f(:44(a[0hqhJrYPp6637&!h?fLC[kNbN>CG"l\lp03n*LtZ+.W39t]l$(;b?R;OZP+]1g-_R`QmhY[..B;&h=jA1T(36cLRZcmB
%-0%9EU$?i3f;J2dN+bb7rAHU*%a&uj(:GcWAoGjr2+saP2NT,J=%(F]b19guOh#+YBUItb;h$'4+)@Pa3\qu/@iFnXVNd:++rH-g
%iQ@WWT5$gc.k"t818RuAhB<'_/qjt)O&`UnN?R(6SA2P0r9^&"O=K6+Ue:Tsc/ZXcC'&T!@TA"&ZS.cuXX,lWE!%jS3_Q:d]GL9o
%BtHg+C0f1InmW8G3@LH>nGFJ.Xi>o2+-^%k,XmW7OA_cL<(kaj*S1[S<%c]n*jQGHg6af0.6YM1_U:Y_>nEkcJJon1&KM'lg)0"A
%["&F<?Yk[jeEd4Y!^2;Q8N3gKL;4Q'<\73;,(a@""Ah;s*Vt@]14<Yn;>&C:D.ZCoEr^,<[d.i)@THXiAOYClil''0.54)>.h^H$
%6]Fo27O^`8'Xct(,46nErL`"jlI%)q8QtZf&@u:IP.GVt%Y@s9//==i;os#1ZeL,F&RN^)G!nYs.72.4s!U$(9p\["=i%?eHd=/K
%LZ/&]/m^j=\7K@?#o!$$LlTe:o2TN4i<\#!$j!^nX=FDZO/kbZ!#(e2&NE4Bbb`P*Gt==AqBclf7P/d\VAsBD&]b3[gfl!&Y6d+U
%!'0'@IhAlOBT5.P'u*Q7a:>;,ZQtV35l<.ENJG86BS!dRLVN<[1"gQa?QA9#UVGdV]o=*9IrY96)hj'^3;8bbKtm@g^#W"8mJ_a$
%mb3&8r;'LR0-1k8jPV]/cO3$nK>33NW5Z3="b.-*/Vcn.ImHmJf[^4Ui=dM1bC[M'O8l`Z(SRKhlI9YFbIHCKiu.hC<8Iotp^:M?
%7&l$WONP8mK"hlY8XFtD?\i/s,)*dno%MC,?OF3NPJU[kD.pgZ]E%ptP0$\ai@h%,/5WD[RhaemC!SQt*-E?-Z>T_5ZGaf-(\in<
%)t_'bp^9q<bn)Vf01;Y^Ee_>n8kg$*J!3i:CC^?<R)m[.khn*^F3JZZ^\D[71S*JXV'@l'Imm>7K>/TK(\gY&mT^*K+W=dGU:tM9
%fdmAX.8A()?]).;Qgg?9dS-J+QdTW\4lJ%_4W$p(>2s.PA?]+n0;W_i[/p3e0LZ)^JA7=ZH^hiYOk/OMYD<T6V]]?;V-Mq3VWAr&
%Q\W=X5!aX8n<[SRA5?J"QRa`AVJ#Cb;T:/2pkuZA^pB!9?V"WWc,&<7;Z<BJmt702I`2D!>i77Q%V$CerfXmt8c;,4^J*H%eaU;I
%<ET&R"AWh/$Rm<\(Aq`+D9^>A?Nej'>1+;f,']E=Y#"OgP"%o\n/%f3Z\-"4V:r'"T>Fr-$TE&1IlVm4%L7J,RaKE&KYRHPbSU&4
%-C.c_)?-pfbS]@KIhRB#*,#&9a?jNQFX<QDW?Hj$rmD)&=<.6mW5[Idn<_""GhV(/UrVn@-9j>dRNsiQ$iWJWj1)m30h]&:pa[O-
%CP0B(Q!.`ni@cH>[;gf5>eG%b#Cj;'21@mM0/Fok"o]i(XbGioDlUf9C[d[3WGur>pkpR_jc^Y_4sQ.R*W1'UT-&+@ckrIB&;[Kr
%Je2rX;*%hA",-9A8kLLK(I\tJ5#d^]q;g,FW#\E_9^!&0buLdfNhWIC9M&]Z='Vg:Ff9Ci-i>1:Or.>aWe<2!^6MQ[OAH(l.TOt3
%.b<<BCBk6j:aoX/?W:4;PWqYMc7MA%F(_aQQ#r!W@dV\q68E("W#T?>J8bY)OQ#_jU=t;\]^u%2;/SjWcKH#UVSF<6m&\n:eq`,*
%OYL'>C,(nXpGB#'<$W1;0Rkus["o:dWhSNpIJpT/1a%A>?a2cg<*i"f<3(&QgucYDT;t!iEDZTYTQ!Rl6L#);;4'Um=ApOSV92,4
%_rgD;mh4IMK]FO:%OJ@T1lY]?-%0B]H9sAQPoHnPEGse1R>:qGp\SLj>%25PZkM5&R:Abu?s9?iP@VJ'D!U"4"2/F\*8jTT>m7PP
%4ont!>jq5Li?sJ\7bOWD9UFtA8FhJRNo)lB&eZhdJu#m%,0^3raYKD*3O%-B]C0MX\e,Nh&:H9I?IGW6?%QMu=a*Fe.)!eWaac^+
%:;k8LHt-f""=r_7F#U6$bZX0Hc4AJV`hJol!66"\Ou9Ztr"r^o*q'sd`paWMg<bMXc5fYa*dIVH?rtYE>g'53e,X`kL^qCGUT$ft
%ef5PkO`\t'Bo!*&nuJ:_nC&3h9-`Mq<?93`oLT-_>XLo3TpZ+s`\0X.&t2Ko%iOp]1!CW!nr7X9)W1E3?uUqGQ#*]ONOpa;oF94g
%Kqtga?<m[:9ZD0$;PU@W.j7]R2Bf(B6E!;!_E_n*1=^]%,@nd2PgS$s-*b1W$mM;Dm7s"I(4"lT*N6%h?(p!7:r,(:d9XS3TGXK=
%`*lQf0]n[<A;:;TU0_ud[Q+JRiN\)rJN0;F'9`j5i?J.fjY`JD:u-#6Efn=kJDIc[C<]F>6)AXa;Mh68blp1GOLdlIH2DINs%=0V
%;mi<+_9,):-O)eDC?%4i.LhZArTZ+/Kr.a9-S3OeHZ`?H!*;H8<ooA&ULJk&PQqFl%j4.i*!s*UW[4t-.rO:u(<^\kQ6=*%TU)uZ
%JILO+J0^2dl@NOf]dX,SZN1OB3eN[@Saa2Rs-KI3_.[i&DDad!+n8RkpV]@8W+:!afl8(aQdqs!mZ@!sO/>E<Z_6fh-AA7q%nclS
%3V!c,&o8<"0ns?KPiXa9$XjR@1`$6hNI9':i[Tt"7<k^R%i,bB@29,=0XZs=db7V4$?:K&@#PGp.mrK&b%05_3N?nnWS%-DZU<Uu
%e:/YoX,6Ihb)FmlY=uDC9:K_IpT[VY^2L7*)i\QMX+dlj[Hkm,g1>I=[]<0b"M3gdk;Ll.arLcc]9CmP$h8*LTBrL4q3+CnP,^ZU
%-$nBWqFn2M`AUGDX9+9Rm!lObbY+e'2+U.0@DQMQ[Ymbg3_==S<;1OdWYK0@._`L21o&YKc!./7Q3r"?V.kRZ]ob_;SM<D+>OG>!
%J^hJsDsW-:<G8ROCV""VX>Gh.k"++o?&]ph:.in`>COu4>)?7N-;E<b$j3V+jsH_>s/ODe0_LqF0S&)(+)6OEhgcpW_jV'A!D>%6
%UT"H=d#q1&f,^RgX(cLB@nCaJ2n%).+kn2Zm(+2+@*3ebP&rC![l,#$0/"jQ3:+g-&*XM6RM%ObA5.e9SD:hs9)SH]C1FX\3r$g9
%]Zld>7^<f]DJSU+U!gZLa"H<9Um4Aadh/:e:p'.q^p/KW<_$5"A8r$DS<kgo2+;(+bh6h`D2,Zi$TCd`g/=s),@%Qh)6Y=E`B55V
%1";_f^2Z'3$!,uRd_T^t%B"+aCP%P5UslD&apuRO]kR$"L'].<^V@-8,9:h\gG-q9<D,KN<3:U<TN3jI!Tu"c?Yr9A@b_o<lIVl[
%_I*?nW[`pJ?g1dOFfi%_W:!W`p*_`+8CfIcB!'hiV,`;,EKE):L'mOrU:i010mG=MMFS0QeQUI*:+]G76n!b_*A4=*?a:_daE/QJ
%?[OC`"b(fO=Sh?N2h+jL\VdGYC=BIV)rql,121*d*nenTOK2Vk9MV.nTkGa`.MslP!]O%f&-<(F!IU+m/lOMeE==,!(.=>(:QAm9
%D+>dQSfX(nj%rpJ8Xm+Abc"'Sj=F&Y,lSsCGUpWBhQ/,H2T$UO(Fh>\VBI3Ebdu)`:8Tn=Am#a8J[^$fU;``Fl/NL)r%WthO!sD=
%K,;kHJThKC"]($[%QL$Fp2Jr+$ms'Y):?2].<0rj6%(u=h<MCT/sU^aQ1[0\*B7^-c-B\r[egkk3?5!oqmj53QG;PgZ7--J;Q<6a
%C8(e4"\XGb0(@c(^C"/;]&=Vt^;kQ+?g,Lg+E$W._?]fsn&u?hb54<4JSE9J.'&s<>6A5mqt)+<e7"fPf__VbM!C(.5&)O6m=!K[
%q#,U5;9,\sK]Spl-AdVGMcr"$4k+Gog`4g_TgY0'K,UX)nJn!MH4UIbX*6S&ECHH&cT2:gUgm&uespjn_F4ORYSWa\H=0bZ\98qY
%JQpcA;S&eE1#LJh/hUml2X?+[>h!/$me0-?;,=cTXF'S::Fi,fnkgLW^,8V,2+0U^YgGrMOjHUC+#VnWLH8@/53aT7Eq3(7-HM85
%Un4[TPAGrQPBrmFNZD`N8WA%+afrB:W<WJ)irWY(W(+a#]PU&Y;PW^`$PAejRcV<5eOe#S!aH\f8W<rm&\FU`7md?]Y"qf-'G%AO
%jF`]Sl=6HXZdp=YG)".?AiI_A]eUB]V.E5^r\Q7JAl2DZ8,i(%@`kQU7j0pm-SCO=*_"%>IFn>qD'q3b8@=ojF&EP2[qNt(8W?Ua
%W@61.0/_0i$r31N)HGg<1.X\Q29.h[T1OF[(iZklc:JJ2F?<HXO89^:1gE+1J\pj?IFQWN,^_6e29-rpOV9qDYDh6-!'e\Z[XP5O
%C(SVp4"cAR)@75f]?Ej+P`Di:V<+J,8WdRr/o$UqaA)WCihE"qg2*otF&>a.N.TbBED]M<P'4/m>p`_i+sH-D7M_0V[O`6fZ$^jR
%LUXdl_0\%UVck]f&@<dtV_\i@b(E74RcU4aX:nK26kArufaW;njIslq6LUU3NmY:`0+[a"qn+.b&MB:@8,#h1;E9$$EAMA8*VE5V
%WGMQZH`0F=4-H-CbX6eL@orr&*bkh8oO]Ia\u;m]lYbije4:b@K\nt.,[hr5M3Ak")VH+Vb=R[So#%9H8W?auF%U(:D+d3u\_Ybk
%*j+JOfhJ$1<]t/qRl]6ac1Y'X,2o@\q5N?29R<QE<np!@[%7-E(Y/P1IVMi;b^(_Egsd$]'<7CFP,7&@de$G`T]+_]9+?We@QVtX
%;pukVoil<K(sXt^^sYr:#8Oh=Ri4b?fHa^>C.S5F5F9p?XG07$e7_X$)mV<3Rl>N$W<!H$;:E87eD/?-RW`[Lj2#:'.c&T5'n3Ao
%%9PM^rSmBG6Q5QZAnu<Vg'MasUL&e]r%'3Q98*#>PBnp'`,5\$8W?"pKHiZqQ4l-2M"mpBP3&QF5&*^=P3/mo,0RoPe:[Q0fcEg2
%3foj-`g;`))fi6bpuS7TC2=Xe+?jO&\G&JhW:*@VkYW7SSCMO1+#T609r8us_(qI6bco![*,i8^%!niq0dl[8:s5QP*)G^iL3,g(
%3,qb^Uon$F:dZNIGN0[meEC.8F\kH#.1F,%E)<lKE#J@W;N\P>S:g["<ZrFS%VeOgMT?deOS$9,1<KtX)Z9@R$>$Wi*7VprbO96W
%l9cJj/MD*?%r_k,:Gs6C!uXON40opV(uTNB=:T'[.BXEi+WbBSKGSNOW!D#;e5NV7e;u$3EQpcYI3is6M1_7nU#HF;$%fESYcW12
%W.B,)dq-$/e<$g>-4XdH9$p[tL\e0n&,&gE!Ih20)"UR&C,_OBTgn_>BuXC?e>Vjf9U*^hNS7KMo%0_dj*525[CN4jT^#6,(H"YD
%(SltX5;`SR>h#"<lBd8EdjUhoe:VC0"\.LG#3Zf-.IX!CL[@!=\YpY\k,kJ<RM'sB>h!s,rcg&1WH)*W@]G?TdV5%+k+[TP)I+!n
%2%J\6rk;Xe"*E#Sr*M'k%":a%f?H_nPm<4'&Jm;md4Th1U1R--Ahd*DU8Bd1:F?r9AmK;36cDKR\LHs?je=*06d^.8je>65Z:.J>
%(H!])je*8Z>gs<R].FU2oj*J?]SegEEtT93<-;[Dc<c0]6'0JR+>sFF\YtiBjlE/-m<GjMr]u;g1C%&2j6iYUI/W)2e3'FSp+C(_
%Inr-2Ll30!eR05Q0'].UVpF3gIIH]!Uo?%h`4MrYLkU@t<%F=6Gt#gX;W!puqV8f3lIcCRRIbYT$mp(CPT:LXA/ULV18b7H\J#Qn
%@;91F!@=Ko*Yu=t@mP'CcmZlL]EO0&,Q%dp0JU<LdM\5Erg@A)=QiX,<<fG),-mE,70=boP50":dOL2@!JRdu?Q<akJ,7LN"=]bl
%&16M;^hkC>IaQqO;k9*BSR\l&K)uOKes-FK.@@*@Q-Im6I15]3Ed!-@jc/W75"Mjf2&=l^JP5(:#GCDQT#n>`C7cQ%l.bCM?V8f<
%&b\PK>XZ[j34;QC%rNeYY"9L:+s+&>JiH.Hi_ZNG:XYk7UmRK_2t"N8,h:&NDIS*':7lt/mBJOP<L*-9-_`oPGN)7mG$uj<bEA#d
%<5"0Sd0l'cN'7"iR`M5?#U9"q+D6suq";3MZL>M#(JTd#;%e/<ZB*,W\4iI1$%#MPQRVBZ2$8hr%jc4ZV@kWPn10Abbu09em8#^L
%=@;MFHN0(Si'3(3)T*>/X7]]jWX8XQTblgWMNn;Xa?3pTcj3N1=NlTkFu"K)WH^sF@Nf-9Q/laHn4GQ=-V:Zt&eq;D/!N[aBbj3?
%c;hV@-@pW/r)aQm]'ei%cTI<?*ot$\a[Z[N")@b"q'sM1(OUHlZMD@j9!M.B5`"L$f2AqQ@J8[NSZEF&K)rSe`'*W!V'RnLX,6H-
%&@"X+`*3okD`a7:6F;M"Va*.pN&01X)SiHXB:Z2"hW.Tg\aYc65=BT.'>$":*AgA9Q_C.6ehOs3VA5[peHZ.NO\W3U_mJta$/_,T
%MC<OrEWbcV?/]\,4>R@1:C4O?C!K(ATFNLkk=+s2N9r:#L`t$tK622A;AbDS&J0ej:n)]u#W_D.h)K6\N["9J;;'`4W.J-oWY89!
%3['POANr<`2E.d;6p"I5T&gUPX&G]k8&1NaH&[F)*bPHu;a!3&jRptWeo@:*/#&:P:;eF-&_%h&"qh>X0rX0<S7#5I=9`:!72>.^
%b)f?f+#V/]k1H-G)e8qSkJ1%%7VlYi9[Vn]A4WuL.'9#XHPpO<'(u>IH)=<^WTVpX>-a[<qEo)L[.g*XRC<NeILB9k<NfQNCZhIT
%a9P+TA!RF4*r$aRZg^GTHPsO=X_WPW9WfNA:#Na<eJffep))";Zfo-cOmT%^6UL%EcWG=.dehLP*4W[;pL57DPamQM3(8P4QR70_
%)Lj@%#d3\7V[CucmW*J5lC=n%jitmm8J<l!HVC>s%(hMM.E!C-pr<pU`0e@=19fsYH'sQH`)n`pg-$5t-A7jtAL`#H'Hl-A3'DRk
%<QR:[[msE[OTK(_=D$ZYWtNVcOuf`j'>;N3k`V@G*lP5+\_h@[1s^Rj\=1Rkf.M_>q`ueTiSW4*hqg#YSZKfiT:6]A(=dV<Jtjjl
%hV+5JZb3_Mi;*oA4CYdnI8ae`\pInl<g]bC9:q&#(6iX]297i-Bs[ildjFS@;eh5>qG7,q%_u"D:'J+=&P)9-<Lq><K]>IWcj>>,
%s-PWh2\"omTV>JP$3NdZ->)1,=3+0s_jgS4+gG$B>$X*S<2-jqUR(*cM]2N:iuq=Zc]`S:Qsf?:')cl&9>[KHHPrOj"[BM8iqt9q
%q0EJ$DB,J&IUo]Po',q0Fr?(3&Re%lkTn]JMAS1L$82&,;M=[s&@Ta`iV$D9aF2M:?S]3'%NA`@=u%0n_Vu`M'6i#=(;G9O#DdM^
%r;o5l.e<n]ZdPtE/sr1u/H?*VCen0BTYt_A*4TLFmYr[I/h_?"VlHgNdqq9SG'`[acVI1"c(?*V:'+iW9tL)]orjC(jBqo@qHs6u
%+9)!,g].5ahgbWQ#la,Hs7Yo2pE+kag].!/GJF1$^\I\Ur9YSTpZ]0en.40&IeQ'eJ,8g3^]3+Srm1WDqqlhua8c"nrtcsUdJC[d
%rRG9T]79F=J+8!g%O4"@~>
%AI9_PrivateDataEnd
